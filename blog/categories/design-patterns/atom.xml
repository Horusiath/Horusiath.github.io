<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design patterns | Simple Solutions]]></title>
  <link href="http://bartoszsypytkowski.com/blog/categories/design-patterns/atom.xml" rel="self"/>
  <link href="http://bartoszsypytkowski.com/"/>
  <updated>2015-03-08T16:34:54+01:00</updated>
  <id>http://bartoszsypytkowski.com/</id>
  <author>
    <name><![CDATA[Bartosz Sypytkowski]]></name>
    <email><![CDATA[b.sypytkowski@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design patterns: Circuit Breaker]]></title>
    <link href="http://bartoszsypytkowski.com/blog/2015/03/08/circuit-breaker/"/>
    <updated>2015-03-08T16:08:00+01:00</updated>
    <id>http://bartoszsypytkowski.com/blog/2015/03/08/circuit-breaker</id>
    <content type="html"><![CDATA[<p>Today I want to introduce a <code>CircuitBreaker</code> &ndash; one of the reactive design patterns, especially usefull in areas such as web services interop. To get you better understand on it&rsquo;s concepts, lets consider following scenario:</p>

<blockquote><p>You&rsquo;ve built a successful web service, making use of another external services in order to handle user requests. During the big churn of end users requesting your site, one of them became overloaded, starting to respond with increasing delays. Ultimately while trying to satisfy all incomming requests, it has exhausted all resources and gone down, entailing your service with it.</p></blockquote>

<p>I think it&rsquo;s a well-known example and a good one to show a nature of the problem. Because of RPC nature, it&rsquo;s characteristics differ from in-proc calls:</p>

<ul>
<li>They operate on separate resources pool and might be used by more than one remote caller at the time.</li>
<li>Their internal state, available resources and performance may be hard to predict. In most cases, they neither can be controlled nor monitored by the caller.</li>
<li>Their life cycle is not bound to your local host. They may be reset/shut down while your service is still running and serving requests.</li>
</ul>


<p>What reactive applications have to do with that? One of the key principles governing the <a href="http://www.reactivemanifesto.org/#responsive">Reactive Manifesto</a> stands for quick responsiveness of the system, no matter if this response is possitive or not. Nowadays users are impatient. When they take action, they want a response, and they want it now.</p>

<p>This is when Circuit Breakers kicks in. They main role is to act as a decorator around your code to ensure, that you can quickly respond on any reliability problems:</p>

<ul>
<li>First, Circuit Breaker defines a safe time delay given to the action to respond. Service which won&rsquo;t fit specified timeout is considered to be unresponsive or working incorrectly. It&rsquo;s better to inform your user about possible problems after a reasonable delay than to show him/her a smoke screen and spinner for the next 2 minutes.</li>
<li>Secondly it&rsquo;s able to cut out the service in any sign of problems and give it a time to self repair. If you already know, that external service is not working properly, what is the point of calling it any way?</li>
</ul>


<p>Most of the circuit breaker are realized as a state machines. Picture below presents a simple one:</p>

<p><img src="http://i57.tinypic.com/wrj3ft.png" width=600 style="display: block; margin-left: auto; margin-right: auto" /></p>

<p>where:</p>

<ul>
<li><strong>Closed</strong> &ndash; this is initial state. While closed, Circuit Breaker will simply pass any request to underlying function. However it also checks if response will met a specified timeout criteria or ended with failure i.e. due to external service overload or crash. Any of these will trigger Circuit Breaker to come into open state.</li>
<li><strong>Open</strong> &ndash; while in this state, any request send through Circuit Breaker will follow <em>fail fast</em> semantic. Instead of forwarding request to the underlying function, CB will immediately throw an exception informing that it&rsquo;s closed. Open state is not permanent &ndash; CB should automatically switch to half-open state after a specified time delay.</li>
<li><strong>HalfOpen</strong> &ndash; this is a kind of the probing state, signing that CB is checking if undrelying function is responsive again. While in it, CB will pass first request call as if it was in <em>Closed</em> state, to eventually get the response. All subsequent calls will fail fast just like in <em>Open</em> state. If request failed again or response didn&rsquo;t came in specified timeout, CB switches back to <em>Open</em> state. If response was successful, CB becomes <em>Closed</em>.</li>
</ul>


<p>I&rsquo;ve created a simplistic implementation of the CircruitBreaker pattern in C# (<a href="https://gist.github.com/Horusiath/a3236c61ed2da8b17a25">source code</a>). It allows to perform multiple asynchronous calls through one CB instance in non-blocking, thread-safe manner. It has also attached a complete test suite describing it&rsquo;s behavior. Feel free to use it and to modify as you wish.</p>

<p>Example usage:</p>

<p>```csharp
// this service could be a singleton, and could be called concurrently
public class CurrencyExchangeProxy : ICurrencyExchangeProxy
{</p>

<pre><code>private readonly CircuitBreaker&lt;ExchangeCurrencies, ExchangeRate&gt; exchangeRates;

public CurrencyExchangeProxy(Configuration config)
{
    exchangeRates = new CircuitBreaker&lt;ExchangeCurrencies, ExchangeRate&gt;(
        async req =&gt; HttpGetAsync&lt;ExchangeRate&gt;(config.ExchangeServiceUrl, req),    // async function, CB should take care of
        config.GetServiceTimeout(),         // time given to function to finish
        config.OpenTimeout());              // time given to function dependent component to restore in case of failure
}

public async Task&lt;ExchangeRate&gt; GetExchangeRate(Currency from, Currency to)
{
    return await exchangeRates.Call(new ExchangeCurrencies(from, to));
}
</code></pre>

<p>}</p>

<p>public class InvoiceController : Controller
{</p>

<pre><code>private readonly ICurrencyExchangeProxy currencyExchange;

[HandleError(ExceptionType=typeof(CircuitBreakerOpenException), View="UnresponsiveExternalService")]
public async Task&lt;ActionView&gt; DisplayInvoice(int id) 
{
    ...
    var exchangeRate = await currencyExchange.GetExchangeRate(invoice.Balance.Currency, localization.Currency);
    ... 
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[C#] A different look at service design]]></title>
    <link href="http://bartoszsypytkowski.com/blog/2015/02/23/functional-csharp/"/>
    <updated>2015-02-23T00:13:00+01:00</updated>
    <id>http://bartoszsypytkowski.com/blog/2015/02/23/functional-csharp</id>
    <content type="html"><![CDATA[<p>Today I want to present a different point of view on C# applications design. If you are programming in that language most of the time, it&rsquo;s probably not what you&rsquo;re used to see. However I found it interesting, because it allows to achieve a few important goals:</p>

<ul>
<li>Decompose various, complex interfaces into few simpler, well build components.</li>
<li>Seriously reduce risk of common OO anti-patterns in your application i.e. <a href="http://en.wikipedia.org/wiki/God_object">God Object</a>.</li>
<li>Make your code shorter and methods simpler.</li>
<li>Replace a lot of external assembly dependencies in your code with some simple design patterns.</li>
</ul>


<p>If you&rsquo;re ready, prepare to step down to the Wonderland. Let the Catepillar be our guide.</p>

<h3>The basics</h3>

<h4>Step 1 &ndash; define an interface</h4>

<p>Lets start with twisting our mindsets a little bit. Take the following example:</p>

<p>```csharp
public interface IAuthService
{</p>

<pre><code>Task&lt;User&gt; SignUp(string email, string password);
Task&lt;User&gt; SignIn(string email, string password);
Task ResetPassword(string email);
</code></pre>

<p>}
```</p>

<p>This is our new trendy-looking, non-blocking service interface. What&rsquo;s also important here, it follows a <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle</a>.</p>

<h4>Step 2 &ndash; separate responsibilities</h4>

<p>Since SRP has no well-defined bounds and it is a matter of a personal taste, we could stretch it a little further:</p>

<p>```csharp
public interface ISignInService
{</p>

<pre><code>Task&lt;User&gt; Handle(string email, string password); 
</code></pre>

<p>}</p>

<p>public interface ISingUpService
{</p>

<pre><code>Task&lt;User&gt; Handle(string email, string password); 
</code></pre>

<p>}</p>

<p>public interface IResetPasswordService
{</p>

<pre><code>Task Handle(string email); 
</code></pre>

<p>}
```</p>

<p>Now instead of one service responsible for three possible operations, we have a three atomic services, each one having only one operation to take care off. If you&rsquo;re thinking, it&rsquo;s overly complicated, you&rsquo;re probably right. But right now we&rsquo;re still in Objective Oriented world and the Wonderland awaits ahead.</p>

<h4>Step 3 &ndash; more simplification</h4>

<p>Now, when we have a three single-member services, take a look into the mirror. If you do, you&rsquo;ll notice an important characteristic &ndash; interface with single method is almost indistinguishable from a delegate. It looks better now, see?:</p>

<p><code>csharp
public delegate Task&lt;User&gt; SignUpService(string email, string password);
public delegate Task&lt;User&gt; SignInService(string email, string password);
public delegate Task ResetPasswordService(string email);
</code></p>

<p>At this point you may want to turn back. This design is problematic. For example, it isn&rsquo;t as easily composable with Dependency Injection frameworks as interfaces. Don&rsquo;t worry. We will cover this up later. Now step in.</p>

<h4>Step 4 &ndash; final generalization</h4>

<p>Our service signatures are now almost ready. But to reach behind the mirror, we must apply two more rules:</p>

<ul>
<li>Each service takes no more than one parameter.</li>
<li>Each service should always return a value.</li>
</ul>


<p>Why does it matter? If each service will satisfy one input / one output rule, we may compose them together with ease.</p>

<p><code>csharp
public delegate Task&lt;User&gt; SignUpService(SignUpRequest request);
public delegate Task&lt;User&gt; SignInService(SignInRequest request);
public delegate Task&lt;object&gt; ResetPasswordService(string email);
</code></p>

<p>Now, all of our delegates could be abstracted away to a single generic definition:</p>

<p><code>csharp
public delegate Task&lt;TRep&gt; Service&lt;in TReq, TRep&gt;(TReq request);
</code></p>

<p>where:</p>

<ul>
<li><code>TReq</code> is type of request object passed to service.</li>
<li><code>TRep</code> is type of service reply.</li>
</ul>


<p>What we end up with is a highly abstracted &ndash; in Wonderland things looks different &ndash; and universal service signature.</p>

<h3>Dependency Injection vs partial application</h3>

<p>Walking down the object oriented road, often you could passed a view similar to this one:</p>

<p>```csharp
public class TransportationService
{</p>

<pre><code>private readonly ILocalizationService _localizationService;
private readonly IOrdersRepository _ordersRepository;
private readonly ICustomersRepository _customersRepository;
private readonly IConfigurationProvider _configuration;

public TransportationService (
    ILocalizationService localizationService,
    IOrdersRepository ordersRepository,
    ICustomersRepository customersRepository,
    IConfigurationProvider configuration) 
{
    _localizationService = localizationService;
    _ordersRepository = ordersRepository;
    _customersRepository = customersRepository;
    _configuration = configuration;
}

public async Task&lt;TransportationDetails&gt; PrepareTransportation(int orderId) 
{
    ...
}
</code></pre>

<p>}
```</p>

<p>But now when you&rsquo;re on the other side of the mirror, it looks more like:</p>

<p>```csharp
public static TransportationServices
{</p>

<pre><code>public static Service&lt;int, TransportationDetails&gt; PrepareTransportationService (
    ILocalizationService localizationService,
    IOrdersRepository ordersRepository,
    ICustomersRepository customersRepository,
    IConfigurationProvider configuration)
    {
        return async orderId =&gt; { ... };
    }
</code></pre>

<p>}
```</p>

<p>Here we simply return an asynchronous lambda. And because it&rsquo;s nested inside, it can use all of the provided parameters directly in it&rsquo;s scope.</p>

<p>Of course, there is still a matter of lifetime scopes. In case of singleton scopes, we simply may pass shared instance directly. But when more universal lifetimes are required, we can slide down the road along with the delegates to reach even higher abstractions &ndash; it&rsquo;s twisted, but we&rsquo;re in Wonderland, remember?</p>

<p>```csharp
public static Service&lt;LocalizationRequest, LocalizationReply> LocalizationService() { &hellip; }</p>

<p>public static Service&lt;MyRequest, MyReply> MyService(Func&lt;Service&lt;LocalizationRequest, LocalizationReply>> localizationServiceProvider) { &hellip; }</p>

<p>// transient scope
var myService = MyService(() => LocalizationService());
// or even shorter
var myService2 = MyService(LocalizationService);</p>

<p>// singleton scope
var localizator = LocalizationService();
var myService = MyService(() => localizator);
var myService2 = MyService(() => localizator);
```
There is a one simple but powerful idea visible on the example above &ndash; an input parameter type has been changed from interface to another delegate. Now it&rsquo;s delegates all the way down. This way we may start from the most atomic services and combine them into more complex ones without limitations.</p>

<p>Instead of complex, reflection-based DI frameworks we have one simple universal abstraction. You may find this more verbose, but it&rsquo;s actually simpler, faster and more error-proof solution than any of IoC libraries. You don&rsquo;t need to learn next DI framework or use StackOverflow guide to travel through the Wonderland.</p>

<p>There are other problems solved automatically:</p>

<ul>
<li>No need to worry about cyclic references.</li>
<li>There is no risk, that our DI framework won&rsquo;t know how to bind parameters to construct object. You&rsquo;ll never get a runtime errors when walking this way.</li>
<li>Your application won&rsquo;t inject bad interface implementation by mistake.</li>
</ul>


<h3>Repositories and testing</h3>

<p>Another popular OO desing pattern is a repository and it&rsquo;s most corrupted (and misunderstood) version &ndash; generic repository.</p>

<p>```csharp
public interface IGenericRepository<T>
{</p>

<pre><code>Task&lt;IEnumerable&lt;T&gt;&gt; GetAll();
Task&lt;T&gt; GetById(int id);
Task&lt;T&gt; Create(T entity);
Task&lt;T&gt; Update(T entity);
Task&lt;bool&gt; Delete(T entity);
</code></pre>

<p>}
public interface IUserRepository : IGenericRepository<User> {</p>

<pre><code>Task&lt;User&gt; GetByEmail(string email);
</code></pre>

<p>}
```</p>

<p>Lets be honest &ndash; you&rsquo;ll probably never use all of those methods at once. If you think it&rsquo;s good abstraction, it&rsquo;s not. It isn&rsquo;t a good SRP example either. After we had stepped into the mirror, we&rsquo;ve surely taken something from our world with us. So lets take a one of the things we&rsquo;ve hidden in the pocket &ndash; changing user password.
```csharp
public class UserService
{</p>

<pre><code>private readonly IUserRepository _userRepository;
public UserService(IUserRepository userRepository)
{
    _userRepository = userRepository;
}

public async Task&lt;PasswordChanged&gt; ChangePassword(ChangePassword request)
{
    var user = await _userRepository.FindByEmail(request.Email);
    if(IsValid(user, request.OldPassword))
    {
        user.PasswordHash = ComputePasswordHash(request.NewPassword);
        await userUpdater(user);
        return new PasswordChanged();
    }
    else throw new UnauthorizedException();
}

private byte[] ComputePasswordHash(string password) { ... }
private bool IsValid(User user, string password) { ... }
</code></pre>

<p>}</p>

<p>```</p>

<p>Basically changing password would require only two out of six methods provided by <code>IUserRepository</code> &ndash; matching user and saving his/her state after changing. Now smoke the Catepillar&rsquo;s hookah and take a look again:</p>

<p>```csharp
public static Service&lt;ChangePassword, PasswordChanged> ChangePasswordService(Func&lt;Service&lt;string, User>> userFinderProvider, Func&lt;Service&lt;User, User>> userUpdaterProvider)
{</p>

<pre><code>var userFinder = userFinderProvider();
var userUpdater = userUpdaterProvider();

return async request =&gt; {
    var user = await userFinder(request.Email);
    if (IsValid(user, request.OldPassword))
    {
        user.PasswordHash = ComputePasswordHash(request.NewPassword);
        await userUpdater(user);
        return new PasswordChanged();
    }
    else throw new UnauthorizedException();
};
</code></pre>

<p>}</p>

<p>private static byte[] ComputePasswordHash(string password) { &hellip; }
private static bool IsValid(User user, string password) { &hellip; }
```
We totally dealt with repository interface, introducing two service providers presented before.</p>

<p>Hint:</p>

<blockquote><p>You can turn <code>ComputePasswordHash</code> (or even <code>IsValid</code>) into service on it&rsquo;s own. All hail the modularity!</p></blockquote>

<h4>From testing perspective &hellip;</h4>

<p>In traditional OO world, to test this feature, you&rsquo;d probably include some mocking library, mock repository&rsquo;s interface and check if correct method was called with correct arguments. You may also mock underlying database directly with something like <a href="http://effort.codeplex.com/">Effort</a>.</p>

<p>In Wonderland mocklibs are quite rare creatures. They are even harder to catch. We must find another way. Can we simply test it without <strong>any</strong> mocking library? Lets see:</p>

<p>```csharp
// Arrange:
// if you abstracted ComputePasswordHash earlier, it&rsquo;ll be easier at this point
var testUser = new User(email, passwordHash);
var db = new Dictionary&lt;string, User> { { testUser.Email, testUser } };
Service&lt;string, User> userFinder = async email => {</p>

<pre><code>User user;
return db.TryGetValue(email, out user) ? user : null;
</code></pre>

<p>};
Service&lt;User, User> userUpdater = async user => user;
var changePasswordService = ChangePasswordService(() => userFinder, () => userUpdater);</p>

<p>// Act:
await changePasswordService(new ChangePassword(email, oldPassword, newPassword));</p>

<p>// Assert:
Assert.NotEqual(passwordHash, testUser.PasswordHash);
```
Actually, that&rsquo;s all. Including mock initialization and result verification. No mocklib was harmed in the making of this test.</p>

<h3>Aspect Oriented Programming vs lambda combinators</h3>

<p>If you&rsquo;re still interested in miracles of the Wonderland, we can go further. Next question: how can we bend reflection-based Aspect Oriented Programming to our will? There are possibly many ways, but I&rsquo;ll focus only on the one.</p>

<p>Just like we used services to replace all of our interfaces, we replace aspects / attributes with filters:</p>

<p><code>csharp
public delegate Task&lt;TOut&gt; Filter&lt;in TIn, TOut, out TReq, TRep&gt;(TIn request, Service&lt;TReq, TRep&gt; service);
</code>
where:</p>

<ul>
<li><code>TIn</code> is filter&rsquo;s input type.</li>
<li><code>TOut</code> is filter&rsquo;s output type.</li>
</ul>


<p>Filter is actually a wrapper around specific service, which may apply additional code before or after it, modify it&rsquo;s input or output or even decide not to call it at all. In case when filter don&rsquo;t change service&rsquo;s in / out parameters, it&rsquo;s signature is basically equal to <code>public delegate Task&lt;TRep&gt; Filter&lt;TReq, TRep&gt;(TReq request, Service&lt;TReq, TRep&gt; service);</code>.</p>

<p>Now, having those two types defines, lets create some utility methods, which can make our travel easier. Lets start with filter composer.
```csharp
public static Filter&lt;TIn, TOut, TReq2, TRep2> Then&lt;TIn, TOut, TReq1, TRep1, TReq2, TRep2>(</p>

<pre><code>this Filter&lt;TIn, TOut, TReq1, TRep1&gt; self,
Filter&lt;TReq1, TRep1, TReq2, TRep2&gt; next)
</code></pre>

<p>{</p>

<pre><code>return (request, service) =&gt; self(request, req =&gt; next(req, service));
</code></pre>

<p>}
```
If we omit the method signature, this method is a pretty straightforward one liner which combines two filters together and gives another filter in return. As you can guess, with this trick we can join a whole chains of filters into one piece.</p>

<p>There is a second part of the puzzle missing. We still don&rsquo;t have a well defined methods to work with both filters and services. This is the one:
```csharp
public static Service&lt;TReqIn, TRepOut> ApplyTo&lt;TReqIn, TRepOut, TReqOut, TRepIn>(</p>

<pre><code>this Filter&lt;TReqIn, TRepOut, TReqOut, TRepIn&gt; filter,
Service&lt;TReqOut, TRepIn&gt; service)
</code></pre>

<p>{</p>

<pre><code>return request =&gt; filter(request, service);
</code></pre>

<p>}
```
Just like we were combining filters, now we combine a filter with a service to get service in return.</p>

<p>With this two methods (and basically two lines of code!) we can easily interop between filters and services. How will this weapon examine against aspects?</p>

<p>```csharp
// logging example
public static Filter&lt;TReq, TRep, TReq, TRep> LogFilter&lt;TReq, TRep>(Action<string> logger)
{</p>

<pre><code>return async (request, service) =&gt;
{
    logger("Log before: " + request);
    var reply = await service(request);
    logger("Log after: " + reply);
    return reply;
};
</code></pre>

<p>}</p>

<p>// authorization example
public static Filter&lt;UnauthorizedRequest, TReply, AuthorizedRequest, TReply> AuthorizeFilter<TReply>(</p>

<pre><code>Func&lt;Service&lt;UnauthorizedRequest, Identity&gt;&gt; authorizationServiceProvider)
</code></pre>

<p>{</p>

<pre><code>return async (request, service) =&gt;
{
    var authService = authorizationServiceProvider();
    var authorizedIdentity = await authService(request);
    if (authorizedIdentity != null)
    {
        return await service(new AuthorizedRequest(authorizedIdentity, request));
    }
    else throw new UnauthorizedAccessException();
};
</code></pre>

<p>}</p>

<p>// combine various filters together
var filters = AuthorizeFilter(AuthorizationService)</p>

<pre><code>.Then(LogFilter(Console.WriteLine))
.Then(MonitorFilter(MonitorService)
.Then(UnitOfWorkFilter());
</code></pre>

<p>// apply all filters at once to the service
var enchancedService = filters.ApplyTo(myService);
```</p>

<p>Again, thankfully to the power of composability we can join multiple filters into one and apply them to any number of services we wish to. Basically two simple types and two lines of code compiled upfront!</p>

<p>We ripped off (or seriously reduced) any runtime uncertainties, AOP, DI and mock libraries out of our code, as well as whole bunch of interfaces and abstraction layers. Did you enjoy the travel? Welcome in the Wonderland. Land of functional programming.</p>

<p><strong>PS</strong>: presented concept is heavily inspired by <a href="http://twitter.github.io/finagle/guide/">Finagle</a> library, originally written in Scala on a Twitter&rsquo;s purposes.</p>
]]></content>
  </entry>
  
</feed>
