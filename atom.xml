<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Simple Solutions]]></title>
  <link href="http://Horusiath.github.io/atom.xml" rel="self"/>
  <link href="http://Horusiath.github.io/"/>
  <updated>2014-01-19T21:17:29+01:00</updated>
  <id>http://Horusiath.github.io/</id>
  <author>
    <name><![CDATA[Bartosz Sypytkowski]]></name>
    <email><![CDATA[b.sypytkowski@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Przenosiny]]></title>
    <link href="http://Horusiath.github.io/blog/2014/01/12/przenosiny/"/>
    <updated>2014-01-12T23:03:00+01:00</updated>
    <id>http://Horusiath.github.io/blog/2014/01/12/przenosiny</id>
    <content type="html"><![CDATA[<p>Od ostatniego posta minęło trochę czasu, było to jednak związane z ambitnymi zmianami jakie od dawna planowałem wobec bloga. <a href="http://horusiath.blogspot.com">Mój poprzedni blog</a> naprawdę dawał się już we znaki, głównie przez rozrośnięty i archaiczny silnik, który sprawiał naprawdę sporo kłopotów kiedy przychodziło do odrobiny bardziej zaawansowanej konfiguracji.</p>

<p>Chciałem zamienić swojego bloga w coś prostego w obsłudze, a jednocześnie dającego możliwości sporej personalizacji. Po drodze szukałem różnych rozwiązań. W praktyce wziąłem pod uwagę 3 z nich:</p>

<ol>
<li>Wordpress &ndash; ta opcja odpadła relatywnie szybko, z podobnych przyczyn dla jakich nie lubiłem bloggera. Dodatkowym argumentem były znalezione w Internecie opinie innych programistów, którzy określali WP jako silnik zbyt rozdmuchany względem swoich nowszych konkurentów.</li>
<li><a href="https://ghost.org/">Ghost</a> &ndash; początkowo był to dość poważny kandydat. Projekt ufundowany przez Kickstarter, w momencie kiedy zwróciłem na niego swoją uwagę, dobijał właśnie wersji 0.3.3. Oparty o platformę node.js, z dość aktywną społecznością jak na tak młode środowisko, gotowym forum dla szukających pomocy oraz kilkoma drobniejszymi smaczkami, jak chociażby obsługą Markdown jako domyślnego formatu pisania postów &ndash; którego to i tak używam przy codziennym pisaniu dokumentów. Niestety we znaki dała się znać jego niedojżałość, zwłaszcza w momencie, gdy musiałem wykorzystać inne niż domyślna kompozycje, dorzucić kilka własnych skryptów, czy postawić całość na <a href="https://www.heroku.com/">heroku</a> (bo właśnie takiego hosta zamierzałem użyć). Ostatecznie uznałem, że nie potrzebuję wbudowanego edytora z funkcją life preview i do tej pory nie rozumiem dlaczego silnik blogowy &ndash; który można w uproszeniu sprowadzić do generatora statycznych stron WWW &ndash; wymaga obowiązkowej bazy danych.</li>
<li><a href="http://octopress.org/">Octopress</a> &ndash; mój ostateczny wybór padł na chyba najprostszą dostępną opcję na rynku. Statyczny generator stron, z domyślną obsługą formatowania dokumentów w markdown, świetnym wbudowanym kolorowaniem pisowni skryptów, oraz możliwością update&#8217;ów bezpośrednio z Gita. Do tego hosting bezpośrednio przez <a href="http://pages.github.com/">Github Pages</a>, bez żadnych specjalnych ceremonii, tak jakby było to dowolne inne repozytorium. Żadnych baz danych, uwierzytelniania dla strony obsługiwanej przez 1 osobę, czy wbudowanych edytorów. Po prostu KISS ;)</li>
</ol>


<h2>Co dalej?</h2>

<p>Postanowiłem, że wraz z pozostałymi zmianami zmienię nieco samą ideę bloga. O ile przeniosłem większość starych wpisów, o tyle <strong>chciałem aby wszystkie kolejne posty były umieszczane po angielsku</strong>. Jest to decyzja ze względów praktycznych &ndash; większość programistów (w tym ja), kiedy napotyka jakiś problem, nie traci czasu na informacji w polskiej blogosferze, zamiast tego od razu sięgając do anglojęzycznych źródeł. Dodatkowo jest to dla mnie pewnego rodzaju wyzwanie oraz szansa na popracowanie nad językiem. Co do pozostałych problemów (statystyki, komentarze, itp.), wiele rzeczy wciąż czeka na dokończenie i może minąć nieco czasu, żeby postawić wszystko na nogi.</p>

<p>Podsumowując, witam na moim odświeżonym blogu w nowej formule.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O pomyłkach i wnioskach z pracy w ASP.NET MVC]]></title>
    <link href="http://Horusiath.github.io/blog/2013/10/20/o-pomykach-i-wnioskach-z-pracy-w-aspnet/"/>
    <updated>2013-10-20T09:49:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2013/10/20/o-pomykach-i-wnioskach-z-pracy-w-aspnet</id>
    <content type="html"><![CDATA[<p>O wzorcach projektowych w ASP.NET MVC słyszał chyba każdy. Większość z nas przynajmniej raz widziała jakiś filmik instruktażowy bądź wideokonferencję promującą stosowanie właściwych wzorców na tej platformie. Jednakże po opanowaniu teorii przychodzi wreszcie pora na to, aby wcielić ją w życie. Co się wtedy okazuje? Bardzo często wychodzi na jaw, że zastosowanie poznanych praktyk w prawdziwym życiu sprawia problem, a kolejne miesiące programowania w myśl jakiejś metodyki prowadzą do ostatecznej refleksji będącej zgubą programistów: <em>zrobię cokolwiek byle zadziałało</em>.</p>

<p>W tym poście spróbuję opisać najczęstsze błędy, z którymi przyszło mi się zmierzyć &ndash; również te wynikające z ograniczeń technologii, ale przede wszystkim będące skutkiem niewłaściwego podejścia do problemu.</p>

<h2>Twoja encja ≠ Twój model</h2>

<p>Zasadniczym błędem (lub raczej skrótem myślowym) jest założenie, że każda klasa mapowana przez ORM na tabele może służyć jako model przekazywany bezpośrednio do widoku. Nie znaczy to, że jest to nie możliwe, jednak opcja ta jest z reguły nadużywana. Wynika to poniekąd ze stylu programowania wyuczonego z tutoriali z cyklu &ldquo;wyklep CRUDa w 5 min.&rdquo;. Piękne i proste, jednak nie mające wiele wspólnego z problemami dnia codziennego. Z drugiej strony jest to wina samego lenistwa programistów oraz przeświadczenia, że faza projektowania z rozpiską architektury chociażby na kartce papieru jest tylko dla kobiet i leszczy ;)</p>

<p>Pytanie brzmi: kiedy należałoby porzucić modelowanie z encji na rzecz dedykowanych klas POCO? Prawda jest taka, że zależy to od przypadku i wymaga odrobiny doświadczenia.</p>

<ul>
<li>Jedną z podpowiedzi może być poziom zagłębienia zależności. Im jest on głębszy, tym bardziej wykorzystywana przez nas klasa odbiega strukturą od modelu wymaganego przez widok. Przykładowo już 2 poziom zagłębienia np. <code>Model.Products.SelectMany(p => p.Orders)</code> może świadczyć o tym, że dana encja nie jest właściwym kandydatem i powinna zostać zmapowana na dedykowaną do tego celu klasę.</li>
<li>Innym przykładem może być sytuacja, w której nasz model wykazuje pewien związek z regułami biznesowymi. Przykładowo częstym sposobem reprezentacji okresu czasu powiązanego z danym obiektem jest dodanie do modelu dwóch pól określających granice czasowe. W tym momencie pojawia się jednak pewien dysonans między definicją biznesową (okres czasu jest pojedynczym obiektem) a rzeczywistą implementacją (okres czasu to dwa generyczne pola dat). Jeżeli logika biznesowa silnie bazuje na danej definicji np. przedział czasowy często pojawia się w kontekście wykonywanych operacji, wtedy możliwe, że lepiej byłoby wyodrębnić ją do osobnej klasy.</li>
<li>Jak powszechnie wiadomo, we współczesnym świecie aplikacji WWW wymagania klientów są jednymi z najbardziej zmiennych elementów systemu. Możliwość oddzielenia modeli od encji wspiera ten trend, ponieważ o ile encje są powiązane ze schematem bazy danych (przez co są znacznie mniej podatne na zmiany ze względu na konieczność utrzymania spójności z istniejącymi danymi), o tyle modele wykorzystywane przez nas w aplikacji mogą być swobodnie modelowane do naszych potrzeb.</li>
</ul>


<h2>Twój ViewData = Twój Model</h2>

<p>W przypadku niektórych frameworków model jest zdefiniowany w sposób jasny i jednoznaczny. W przypadku ASP.NET MVC nie jest jednak tak łatwo, ponieważ otrzymujemy tutaj więcej niż jeden sposób dostarczenia danych do widoku. Mowa tu oczywiście o ViewData. Wg. mnie obiekt ten, jakkolwiek przydatny, jest podstawowym złamaniem wzorca MVC w ASP.NET MVC. Dlaczego? Ponieważ &nbsp;prawda wygląda tak, że niezależnie od zdefiniowanych przez ciebie klas, prawdziwy model ma zawsze tylko jeden typ: <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.viewdatadictionary(v=vs.108">ViewDataDictionary</a>.aspx).</p>

<p>Czy to źle? Niekoniecznie, zależy od przyjętego podejścia. Co z tego wynika? W przypadku modeli zwracanych przez formularze zazwyczaj przyjmuje się, że generyczny model powinien zawierać tylko te dane, które zostały wprowadzone przez użytkownika. Tzn. że informacje takie jak opcja wybrana przez użytkownika z listy powinna być częścią modelu podczas gdy sama lista dostępnych opcji powinna być przekazywana za pośrednictwem ViewBag/ViewData. Naturalnie w przypadku, gdy parsujemy model do postaci JSON przekazywanej do klienta, ta zasada nie dotyczy.</p>

<h2>Nic nie znaczące Error Messages</h2>

<p>Jednymi ze gorszych chwil w życiu programisty, są sytuacje, kiedy trzeba obsłużyć zgłoszenie o błędzie w aplikacji. Zdarza się, że zaglądamy wtedy do logów (o ile taką informację zalogowaliśmy ;) ), aby odnaleźć jakieś przydatne informacje, które pozwolą nam zidentyfikować naturę problemu. Jakże wielkie jest rozczarowanie, gdy jedynym hintem jaki wtedy otrzymujemy jest: <code>Object reference not set to an instance of an object.</code> Bardzo rzeczowa i jednoznaczna informacja wśród kilkuset linii kodu wymagających zbadania.</p>

<p>Innym ciężkim przypadkiem jest logowanie niewystarczającej ilości informacji. Przykład (blok try-catch jest czysto poglądowy):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">try</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="n">productRepository</span><span class="p">.</span><span class="n">GetById</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">product</span><span class="p">.</span><span class="n">Status</span> <span class="p">!=</span> <span class="n">ProductStatus</span><span class="p">.</span><span class="n">Finished</span><span class="p">)</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidStatusException</span><span class="p">(</span><span class="s">&quot;Provided product has invalid status&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">logger</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Co jest złego w tym przypadku? Wyobraźmy sobie, że dostajemy zgłoszenienie, o błędzie a w logach jedyną informacją jest: <code>Provided product has invalid status</code>. Czy wiemy o jakim statusie mowa? Czy wiemy o jaki produkt chodzi? Nie mamy żadnych informacji pozwalających zidentyfikować dany przypadek, mimo że wszystko co potrzebne mamy 2 linijki wyżej w kodzie źródłowym naszej aplikacji.</p>

<p>Stąd mój apel: nie bądź leniwcem, minuta pracy teraz pozwoli ci zaoszczędzić godziny problemów później.</p>

<h2>Too thin controllers, too fat services</h2>

<p><em>Fat models, thin controllers</em> jest zwrotem często używanym w świecie MVC. Często jednak wynikiem utrzymania tej reguły jest zjawisko, które sam określam jako papierowe kontrolery. Weźmy na przykład następującą akcję MVC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[HttpPost]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">ToggleUserBan</span><span class="p">(</span><span class="kt">bool</span> <span class="n">activate</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="n">userService</span><span class="p">.</span><span class="n">ToggleUserBan</span><span class="p">(</span><span class="n">activate</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Na czym polega błąd? Prawdopodobnie metoda ToggleUserBan w serwisie jest przypadkiem zbyt szczegółowym. Daje to podstawy do przypuszczenia, że architektura aplikacji w którymś momencie się posypała. Zajrzyjmy więc do naszego hipotetycznego IUserService:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">interface</span> <span class="n">IUserService</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">ToggleUserBan</span><span class="p">(</span><span class="kt">bool</span> <span class="n">flag</span><span class="p">);</span>
</span><span class='line'>  <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="n">GetAllUsers</span><span class="p">();</span>
</span><span class='line'>  <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="n">GetActiveUsers</span><span class="p">();</span>
</span><span class='line'>  <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="n">GetBannedUsers</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">// ...kolejne 70 metod</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jeżeli widzisz taki interfejs, wiedz że coś się dzieje. To z czym mamy do czynienia to nic innego, jak zwykłe zamiatanie brudu pod dywan. Pseudorozwiązanie polegające na przeniesieniu proceduralnego makaronu w miejsce, w które rzadziej się zagląda. Jest to częsty rezultat braku rewizji kodu i testów jednostkowych, oraz samowoli programistów.</p>

<h2>Garść innych porad</h2>

<ul>
<li>unikaj static classes &ndash; utrudniają one modularyzację systemu i wprowadzają twarde powiązania, z których bardzo ciężko jest potem zrezygnować. Extension methods są w zasadzie jedynym zastosowaniem dla statycznych klas, dla jakich sam znajduję użytek.</li>
<li>unikaj partial classes &ndash; dopuszczalne tylko w wypadku, gdy rozszerzasz klasę generowaną przez zewnętrzne narzędzia (co swoją drogą samo w sobie jest złym pomysłem ale o tym może kiedy indziej ;) )</li>
<li>w przypadku zmiennych używaj nazw, które pozwalają określić ich typ i przeznaczenie &ndash; różnego rodzaju skróty oszczędzają dosłownie kilka sekund podczas pisania tylko po to, aby w przyszłości przedłużyć rozszyfrowywanie kodu przez kogoś innego o kilka minut. Pamiętaj, że w życiu programisty kod czyta się częściej niż pisze.</li>
<li>podczas zwracania kolekcji zwracaj najmniejszy interface, który umożliwia wykonanie zadania &ndash; nie ma sensu wymagać aby argument był listą, jeżeli jedynym wykonywanym na nim działaniem jest foreach</li>
<li>jeżeli zwracasz string lub kolekcje nigdy nie zwracaj nulli &ndash; zawsze używaj string.Empty lub Enumerable.Empty&lt;></li>
<li>nie sprawdzaj czy enumerator jest pusty przy pomocy Count() &ndash; używaj Any(). W przypadkach kiedy potrzebujesz porównać ilość argumentów w enumeratorze z konkretną liczbą np. list.Count() > 3, warto zastanowić się nad użyciem wzorca <a href="http://twistedoakstudios.com/blog/Post4425_counting-iterators-lazily">LazyCounter</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ServiceStack - alternatywa dla ASP.NET]]></title>
    <link href="http://Horusiath.github.io/blog/2013/08/10/servicestack-alternatywa-dla-aspnet/"/>
    <updated>2013-08-10T20:14:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2013/08/10/servicestack-alternatywa-dla-aspnet</id>
    <content type="html"><![CDATA[<p>ASP.NET jest wiodącą technologią, jeżeli idzie o rozwiązania webowe w środowisku .NET. I mimo, że pojęcie to samo w sobie nie jest jednolite (w ramach ASP występuje wiele oddzielnych technologii), to jednak niewiele słyszy się o alternatywach. A jest ich całkiem sporo:</p>

<ul>
<li><a href="http://www.servicestack.net/">ServiceStack</a> &ndash; najbardziej znana alternatywa, o której opowiem więcej w dalszej części posta.</li>
<li><a href="http://nancyfx.org/">Nancy</a>&ndash; drugi obok ServiceStack, najbardziej znany framework, czerpiący inspirację ze znanego frameworka Sinatra, napisanego w Rubym.</li>
<li><a href="https://github.com/openrasta/openrasta/wiki/Why-Choose-OpenRasta">OpenRasta</a>&ndash; biblioteka stworzona z myślą o tworzeniu API opartego o zasoby.</li>
<li><a href="http://amirrajan.net/Oak/">Oak</a> &ndash; framework mocno zainspirowany dynamiką bibliotek Ruby.</li>
<li><a href="http://blog.markrendle.net/2012/06/01/simple-web/">Simple.Web</a> &ndash; micro framework twórcy znanego micro ORMa Simple.Data, który umieszczam również w ramach ciekawostki.</li>
</ul>


<p>Sądzę, że dość niewiele osób słyszało te nazwy (zwłaszcza ostatnie dwie). Ja jednak postanowiłem opowiedzieć i zachęcić do najpopularniejszego z tych rozwiązań, czyli ServiceStack.</p>

<p>Co takiego otrzymujemy, decydując się na jego wykorzystanie?:</p>

<ul>
<li>Cały zestaw <em>extension methods</em> do wbudowanych typów .NET, przyspieszających pracę programistów.</li>
<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Auto-mapping">Mechanizm mapowania obiektów</a> &ndash; podobny do AutoMappera, choć prostszy i bardziej ubogi.</li>
<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/Built-in-profiling">Profiler</a> wbudowany w środowisko.</li>
<li><a href="http://fluentvalidation.codeplex.com/wikipage?title=CreatingAValidator">Zaawansowany mechanizm walidacji</a>, umożliwiający m.in. warunkową walidację poszczególnych pól.</li>
<li>Mechanizm <a href="https://github.com/ServiceStack/ServiceStack/wiki/Authentication-and-authorization">autentykacji</a> i zarządzania dostępem oparty o role i uprawnienia z możliwością logowania poprzez OpenID.</li>
<li><a href="https://github.com/ServiceStack/ServiceStack/wiki/The-IoC-container">Kontener IoC</a> &ndash; również z możliwością podpięcia własnego.</li>
<li>Minimalistyczny framework ORM (<a href="https://github.com/ServiceStack/ServiceStack.OrmLite">OrmLite</a>) &ndash; umożliwia on podłączenie do najpopularniejszych relacyjnych, baz danych. Naturalnie on również może być zastąpiony bardziej kompleksowym rozwiązaniem.</li>
<li>Wiązania do rózniej maści usług logowania (np. NLog, Elmah, Log4Net, EventLog, Enterprise Lib.) i cache&#8217;owania (np. domyślny InMemory, Memcached, Redis, Azure lub Amazon Web Services).</li>
<li>Bundlera plików JavaScript, CSS, LESS, SASS i CoffeeScript &ndash; chociaż trzeba przyznać, że jest to dość wyboista droga.</li>
<li>Mechanizm do kolejkowania wiadomości &ndash; obecnie tylko za pośrednictwem Redisa. Trwają prace nad wprowadzeniem bindingów do ZeroMQ, RabbitMQ, Azure Service Bus oraz Amazon SQS.</li>
<li>Gotowe SDK do aplikacji klienckich pod C#, Silverlight, JavaScript oraz Dart.</li>
</ul>


<p>Ale mówiąc o jego najbardziej kompleksowych zaletach:</p>

<h2>Web services &amp; Content Negotiation</h2>

<p>Jest to &ndash; moim zdaniem &ndash; najciekawsza cecha Service Stack. Tworząc dotychczasowe usługi sieciowe z wykorzystaniem standardowych bibliotek .NET musieliśmy uzależniać technologię, jaką zamierzaliśmy wykorzystać od formatu danych, jakiego się spodziewaliśmy. A więc tworząc serwisy wykorzystujące SOAP lub XML tworzyliśmy dla nich specjalne usługi w WCFie. Jeżeli chcielibyśmy, aby zwracały one dane w postaci JSON, prawdopodobnie większość z nas wykorzystałaby najnowsze podejście w postaci ASP.NET Web API, dla pozostałych formatów ASP.NET.</p>

<p>Problemem takiego podejścia jest fakt, że za każdym z tych rozwiązań stoi osobna technologia, która nie jest kompatybilna z pozostałymi. Niezależnie od tego, co wybierzemy, nigdy nie otrzymamy kompletnego rozwiązania.</p>

<p>Jak wygląda to w przypadku ServiceStack? To proste. Każdy z modułów naszej aplikacji może być zamknięty w ramach klas dziedziczących po wspólnej klasie <code>Service</code>(jednak wbrew pozorom nie mamy tu do czynienia z wzorcem MVC) &ndash; lub w razie potrzeby, którejś z jej klas bazowych bądź interfejsu <code>IService</code>. Każda metoda obsługująca żądanie pobiera w parametrze obiekt POCO (Plain Old Class Object) i zwraca inny obiekt POCO. Dopiero na poziomie frameworka rozwiązywany jest problem serializacji danego obiektu do końcowego formatu, który może być wnioskowany na podstawie nagłówka HTTP, zawartości URL bądź dowolnego innego warunku, jaki zdefiniujemy podczas konfiguracji. Rozwiązanie to znane jest jako <em>Content Negotiation</em>. Dzięki temu jedna klasa może pełnić rolę kontrolera ASP.NET, WebAPI i serwisu WCF w tym samym czasie!</p>

<p>Domyślnie dysponujemy wbudowanymi serializatorami dla formatów: SOAP (1.1 oraz 1.2), XML, JSON, CSV i JSV. Dodatkowo w sieci można pobrać pluginy rozszerzające tą listę o niemal wszystkie formatery dostępne w świecie .NET, w tym też binarne. Jedna linijka kodu w konfiguracji nieraz wystarcza, aby wprowadzić dany format do naszej aplikacji. Warto zauważyć, że ta sama zasada panuje w przypadku dynamicznie generowanych stron HTML &ndash; po doinstalowaniu pluginu możemy generować strony w oparciu o składnię Razora oraz Markdown.</p>

<h2>Wydajność</h2>

<p>Twórcy ServiceStack zwracają szczególną uwagę na szybkość swojej platformy, w myśl powiedzenia: <i>&ldquo;We care about two things: speed and quality. And the quality we care about is speed&rdquo;</i>. Nie powinno więc dziwić, że większości wypadków framework ten przewyższa ASP.NET i WCF w kwestiach wydajnościowych. Wynika to z prostego faktu. Mamy tu do czynienia z inicjatywą open source, a w przedsięwzięciach tego typu dużą rolę odgrywa prostota. Nie ma tutaj miejsca na platformy typu Enterprise, z setkami warstw abstrakcji, pełnymi potworków typu <a href="http://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/server/RequestProcessorFactoryFactory.RequestSpecificProcessorFactoryFactory.html">RequestSpecificProcessorFactoryFactory</a>(tak, jest to wyraz mojego &ldquo;hejtu&rdquo; względem podejścia projektowego w Javie, ale fakt faktem problem ten dotyka również .NETu ;) ).</p>

<p>Konkretne porównania i benchmarki można znaleźć <a href="https://github.com/ServiceStack/ServiceStack/wiki/Real-world-performance">tutaj</a>. I jak widać, nie chodzi tu o jakiś pomijalny zysk rzędu kilkunastu procent.</p>

<h2>Testowalność</h2>

<p>ServiceStack jest frameworkiem z natury bardzo zmodularyzowanym, umożliwiającym wymianę poszczególnych komponentów. To z kolei czyni go naturalnym kandydatem do wprowadzenia testów jednostkowych.</p>

<p>Innym atutem jest podejście wymiany danych opartych na komunikatach (message-based design), które w wypadku ServiceStack są zwykłymi klasami POCO. Dzięki temu testując poszczególne moduły/usługi nie musimy przetwarzać wbudowanych we framework obiektów żądań i odpowiedzi. Zamiast tego mamy do czynienia ze standardowym zbiorem klas, zdefiniowanych przez nas samych, które z zewnątrz nie zdradzają zależności od używanego przez nas frameworka. Ponad to architektura sprawia, że najwygodniejszym podejściem jest budowa dużej ilości serwisów z małą ilością metod, co dodatkowo ułatwia zachowanie ziarnistości systemu.</p>

<h2>Wieloplatformowość</h2>

<p>Ostatnią wartą odnotowania cechą pozostaje fakt, że wybierając SS otrzymujemy w pełni funkcjonalny framework działający zarówno pod Windowsem jak i platformami linuxowymi. Wiem, że pod ASP również można programować w sposób pozwalający na postawienie aplikacji na Linuxie, ale jest to rozwiązanie niekompletne. Przykładowo, ServiceStack jest obecnie jedyną opcją pozwalającą na uruchomienie usług SOAP pod Mono.</p>

<p>Nie oznacza to jednak, że decydując się na SS, musimy rezygnować z naszej dotychczasowej aplikacji napisanej w ASP.NET. Równie dobrze możemy uruchomić hosta ServiceStack wewnątrz Global.asax i używać go np. tylko jako zamiennika warstwy nośnej dla usług WCF.</p>

<p>Całość doskonale wpisuje się w naturę technologii webowych, ich otwartość i multiplatformowość. Dodatkowo umożliwia ona optymalizację kosztów (hosting linuxowy jest średnio 5-krotnie tańszy niż porównywalny windowsowy) i otwiera nowe możliwości na rynku, który w przypadku .NET w ogromnej części składa się z aplikacji biznesowych.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Garść pro tipów przydatnych podczas tworzenia aplikacji]]></title>
    <link href="http://Horusiath.github.io/blog/2013/06/26/garsc-pro-tipow-przydatnych-podczas/"/>
    <updated>2013-06-26T22:49:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2013/06/26/garsc-pro-tipow-przydatnych-podczas</id>
    <content type="html"><![CDATA[<p>Od jakiegoś czasu myślałem o zebraniu w garść przemyśleń związanych z rozwojem projektów, bazując na doświadczeniach w aplikacjach, przede wszystkim biznesowych, w produkcji których przyszło mi uczestniczyć. Ponieważ pamięć jest zawodna i nie wszystko co chciałem wymienić udało mi się spamiętać i ubrać w słowa, być może w przyszłości będę kontynuował ten wątek.</p>

<p>Z góry zaznaczam, że tematy takie jak testy jednostkowe czy automatyzacja, celowo zostały tutaj przeze mnie potraktowane marginalnie. Jest tak dlatego, ponieważ są one wałkowane bez przerwy w wielu artykułach i każdy programista powinien się z nimi do tej pory zapoznać. Punkty jakie tutaj poruszam mogłby dotyczyć także tych dziedzin, postanowiłem jednak skupić się na odrobinę innych aspektach.</p>

<h2>1. &ldquo;Jesteśmy jedną rodziną, mamy wspólne korzenie&rdquo;</h2>

<p>Naturalną cechą aplikacji webowych rozwijanych w ramach środowiska .NET jest ich podział na wiele różnych projektów. Nie jest to wymóg, jednakże z reguły zdecydowanie pomaga w organizacji oraz w trakcie późniejszego wdrażania rozwiązań. To co jednak uznałem za warte przypomnienia to wzajemne powiązania pomiędzy projektami. Mówiąc zaś dokładniej, przydatność stworzenia wspólnej biblioteki-korzenia, dowiązywanej przez wszystkie pozostałe projekty w aplikacji.</p>

<p>Ma to kilka prostych przyczyn. Po pierwsze zdaża się, że musimy zaimplementować pewną funkcjonalność w kilku bibliotekach, będących na podobnym poziomie zależności, których jednak nie możemy powiązać ze sobą np. ze względu na rekurencyjne zapętlenie zależności &ndash; tutaj wspólny &ldquo;korzeń&rdquo; okazuje się nieoceniony. Po drugie, w trakcie pracy z aplikacją nieraz powstaje chęć stworzenia własnego DSLa bądź zestawu rozszerzeń upraszczających pracę z daną platformą bądź językiem. Ileż to razy rodziła się ochota na dodanie <em>extension method</em>, której brakuje nam w istniejących już klasach .NET? Tutaj również możliwość współdzielenia tego typu funkcjonalności jest bardzo przydatna.</p>

<p>Idea wspólnego &ldquo;korzenia&rdquo; przydaje się również kiedy mowa o klasach wyjątków. Dobrą praktyką w trakcie definiowania aplikacji jest wywoływanie własnych wyjątków, które mogą informować nie tylko o błędach w operacjach logicznych systemu, lecz również logice biznesowej jako takiej. Moim zdaniem wszystkie takie <em>customowe</em> wyjątki powinny mieć wspólną klasę bazową. Dzięki temu w późniejszych fragmentach aplikacji będziemy mogli bez problemu wychwytywać te z nich, które stworzyliśmy sami na potrzeby naszego systemu i odpowiednio na nie reagować &ndash; przekształać do postaci czytelnej dla końcowego użytkownika, logować itp.</p>

<h2>2. Atomic frontend design</h2>

<p>Atomic design to koncepcja projektowania elementów HTML w sposób uporządkowany na bazie kompozytów. Nieraz w życiu codziennym zdarza się nam określać komponenty strony w dość ogólny sposób, pozostawiając szczegóły implementacji na &ldquo;doprecyzowanie później&rdquo; ;) W rezultacie kończymy w morzu (lub raczej szambie) znaczników o mgliście oznaczonych brzegach. Ponieważ HTML na stronach może mieć bardzo rozrośniętą postać, którą jako programiści też będziemy musieli utrzymywać, warto zadbać też o ten aspekt aplikacji.</p>

<p>Idea atomic designu skupia się własnie na wiązaniu elementów HTML w kompozyty, które z kolei są łączone ze sobą dalej w kolejne, bardziej abstrakcyjne struktury. Więcej szczegółów na ten temat możecie dowiedzieć się <a href="http://bradfrostweb.com/blog/post/atomic-web-design/">tutaj</a>. W praktyce warto poznać to podejście już teraz &ndash; w obecnej chwili widać wyłaniający się coraz mocniej trend, który w przyszłości może poskutować nowym standardem umożliwiającym definiowanie własnych znaczników HTML, mających bezpośrednie wsparcie ze strony silnika renderującego.</p>

<p>Chcąc wspomóc developerów i przygotować współczesne aplikacje webowe do nadchodzących standardów, inżynierowie Google&#8217;a stworzyli projekt <a href="http://www.polymer-project.org/">polymer</a> (czerpiący m.in. z koncepcji atomic designu), którego zadaniem jest zbudować odpowiednią platformę abstrakcji z istniejących już rozwiązań: HTML, Javascriptu oraz CSS. Zgodnie z ich przewidywaniami wraz z rozwojem przeglądarek funkcje oferowane przez tą bibliotekę mają w przyszłości zostać zastąpione specjalizowanymi, natywnymi odpowiednikami, zaś zadaniem polymeru jest umożliwić obecnym aplikacjom kompatybilność z dopiero powstającymi technologiami. Ciekawostka: mimo, że AngularJS stanowi oddzielny projekt, zapowiedziano już że w kolejnych wersjach będzie on coraz bardziej integrowany z polymerem.</p>

<h2>3. Stwórz własną platformę abstrakcji&hellip;</h2>

<p>Kolejna kwestia wynika z prostej tendencji uzależniania logiki aplikacji od wykorzystywanych bibliotek. W praktyce skutkuje to twardym związaniem naszego systemu z konkretnymi rozwiązaniami &ndash; które w przyszłości mogą stracić wsparcie, okazać się przestarzałe lub niewystarczające do naszych potrzeb. Taka monolityczna budowa nie jest przychylna zmianom, a jak powszechnie wiadomo klienci lubią wpadać na nowe pomysłu i zmieniać swoje zdanie.</p>

<p>Stąd też idealnym rozwiązaniem jest stworzenie klasycznej płaszczyzny abstrakcji, całkowicie izolującej naszą logikę biznesową, która stanowi jądro każdej aplikacji biznesowej, od zewnętrznych platform, realizowanych pośrednio jako obiekty proxy/adaptery. Piszę idealnym, w praktyce jednak rzadko takie rozwiązanie okazuje się w 100% możliwe. Warto jednak poświęcić mu trochę uwagi &ndash; również z perspektywy modularyzacji i możliwości testowania.</p>

<h2>4. &hellip; ale nie przeginaj z warstwami</h2>

<p>Pamiętaj, że każda dodatkowa wartwa abstrakcji z jednej strony umożliwia ci podzielenie problemu na prostsze, bardziej ogólne definicje (a ludzie z natury lubią pojmować świat ogólnikowo), z drugiej strony jednak stanowi jednocześnie kolejną barierę w optymalizacji.</p>

<p>To co warto przypomnieć, to fakt, że tworzenie aplikacji to proces, w którym wymagania zmieniają się w czasie. Produkcja oprogramowania nie jest jednym z konkursów algorytmicznych, gdzie wszelkie bariery i wartości graniczne są niezmienne i podane z góry. To co dziś świetnie się sprawdza, jutro może okazać się niewystarczające.</p>

<p>Ważnym czynnikiem jest odpowiednie zdefiniowanie problemu i dobór właściwych wzorców i rozwiązań. Jako programiści nieraz generalizujemy pewne problemy tak, aby dało się je rozwiązać przy pomocy istniejących technologii, kosztem rzeczywistej złożoności całego systemu. Dla zainteresowanych proponuję obejżeć <a href="http://www.infoq.com/presentations/8-lines-code-refactoring">wykład</a> Grega Younga na ten temat.</p>

<p>Wielowarstwowe aplikacje stanowią pewien problem, kiedy przychodzi do optymalizacji. Nie oznacza to jednak, że budowa z podziałem na warstwy jest zła. Jest wygodna z punktu widzenia programisty i projektowania koncepcji rozwiązań dla problemów postawionych przed systemem. Z drugiej strony jednak każda aplikacja posiada pewne punkty zapalne &ndash; wymagające dużej wydajności &ndash; które będą wymagać niestandardowego trakowania, w tym też odejścia od wcześniej przyjętych koncepcji i zwrotu w stronę rozwiązań bardziej nisko poziomowych. Dobrze, aby aplikacja umożliwiała pewien sposób na osiągnięcie tego celu bez zaburzania reszty konstrukcji.</p>

<p>Jednym z możliwych kompromisów jest wielopoziomowy caching. Zamiast przebijać sie przez kolejne płaszczyzny abstrakcji w celu możliwości operowania na bardziej niskopoziomowych mechanizmach, cache&#8217;ujemy uzykiwane wartości na poszczególnych warstwach. Wielopoziomowy cache umożliwia też przyrostowe skalowanie wydajności w zależności od potrzeb.</p>

<h2>5. Kradnij&hellip;</h2>

<p>&hellip; moc obliczeniową maszyn klienta. Jest to bardzo dobre podejście, ponieważ wykonywanie części logiki po stronie przeglądarki nie dość, że odciąża serwery, za które musimy płacić, to dodatkowo stanowi rozwiązanie o wiele bardziej skalowalne, ponieważ ogólna ilość dostępnej mocy obliczeniowej rośnie wraz z liczbą maszyn wysyłających żądania na serwer. Stąd też część obliczeń, takich jak renderowanie dynamicznego HTMLa, czy preprocesowanie modelu danych od razu do postaci przystępnej do obliczeń po stronie serwera, można wykonywać bezpośrednio w przeglądarce.</p>

<h2>6. Oszukuj</h2>

<p>Co mam przez to na myśli? Po pierwsze powtarzam: cache&#8217;uj dane. W świecie aplikacji na platformie .NET często jest to opcja marginalizowana. W wielu przypadkach dopuszczalne jest, aby użytkownik zobaczył <em>przybliżone</em> dane. A co jeżeli nie są one aktualne? <em>Keep calm and oj tam oj tam</em> ;)</p>

<p>Problem, z którym się też spotkałem, to stosowanie <em>prymitywych</em> cache&#8217;ów w miejscach, w których ciężko określić górną granicę przyrostu danych. Tak, zwykły .NETowy słownik może wystarczy w twoim środowisku developerskim, ale w momencie, gdy za rok dane pompowane do niego na produkcji będą liczone w setkach tysięcy (lub więcej) obiektów, wszyscy na własne oczy zobaczą, że wyprodukowałeś trabanta w cenie porsche. Technologie sprawdzone na polu walki, takie jak Memcache i Redis są tutaj, gotowe cię wesprzeć. Korzystaj z tej możliwości.</p>

<p>Po drugie pamiętaj o złotej zasadzie &ndash; czego user nie dotknie, tego sercu nie żal. Przykład-anegdota: swego czasu aplikacje na urządzenia Apple były podawane jako wzór szybko uruchamiających się programów. Aplikacja, która na innych systemach uruchamiała się w kilka sekund, na iPhone była gotowa w ułamku tego czasu. Na czym polegał sekret? Otóż w rzeczywistości to, co widział użytkownik, było w rzeczywistości zrzutem ekranu z działającej aplikacji, bez jakichkolwiek możliwości interakcji. Dzięki temu użytkownik miał wrażenie, że aplikacja uruchamia się niemal natychmiast. W rzeczywistości, zanim wykonał on jakąkolwiek akcję w UI, mijało parę sekund, w trakcie których program miał czas, aby się załadować i podstawić pod &ldquo;zaślepkę&rdquo; faktyczny interfejs użytkownika.</p>

<p>Liczę na to, że lektura ta okazała się ciekawa i być może uda mi się w przyszłości opisać dalsze koncepty i przemyślenia.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Czego programiści .NET mogliby nauczyć się od Rubystów?]]></title>
    <link href="http://Horusiath.github.io/blog/2013/06/16/czego-programisci-net-mogliby-nauczyc/"/>
    <updated>2013-06-16T12:28:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2013/06/16/czego-programisci-net-mogliby-nauczyc</id>
    <content type="html"><![CDATA[<p>.NET był wybraną przeze mnie technologią niemal od początku mojej przygody z programowaniem. Uważam jednak, że programista nie powinien się zamykać w jednej szyfladce i poznawać szerokie spectrum technologii. Porównywać je i znać wady oraz zalety każdej z nich. Ostatecznie zaś umieć dobrać właściwą technologię do rozwiązania napotykanych problemów &ndash; nie odwrotnie ;)</p>

<p>Stąd też pytanie w temacie. Czy faktycznie programiści .NET mogą nauczyć się czegoś ze środowiska Ruby, języka, który ostatnimi czasy zbiera niemało batów (głównie związanych z wydajnością oraz bezpieczeństwem jego najpopularniejszej platformy, RoRa)? Otóż jak się okazuje całkiem sporo, nawet pomimo już istniejącego trendu absorbowania do platformy .NET sporej ilości rozwiązań napotykanych w konkurencyjnych gałęziach. Poniżej postaram się wymienić te, które moim zdaniem są warte odnotowania.</p>

<h2>1. Przestań polegać na swoim IDE</h2>

<p>Nie da się tego ukryć &ndash; Visual Studio jest jednym z najlepszych, o ile nie najlepszym IDE, z jakim programista może mieć obecnie przyjemność pracować. Ma to jednak pewną cenę. W pewnym momencie zaczynamy polegać na swoim IDE w stopniu większym, niż na własnych umiejętnościach. Co gorsza przenosi się to bezpośrednio na tworzone biblioteki (przykład&hellip; Entity Framework &ndash; czy ktoś próbował kiedyś stworzyć model edmx bez pomocy wizarda wbudowanego w Visual Studio?). Jeżeli nie możesz sprawnie korzystać z biblioteki bez wsparcia swojego IDE, oznacza to, że jest ona zbyt skomplikowana i najzwyczajniej w świecie zepsuta.</p>

<p>W przypadku Ruby&#8217;ego, narzędzie pracy jest kwestią gustu. Jednakże kiedy pierwszy raz przyszło mi pracować z teamem RoR każde z nich w porównaniu do Visual Studio wygląda jak notatnik z kolorowaniem składni. Żadnego zaawansowanego refactoringu, intellisense, nawigacji między plikami w projekcie, generowania buildów. Co było w tym najzabawniejsze? Po 2 tygodniach wcale mi tego nie brakowało. Przysłowiowy notatnik + konsola całkowicie wystarczały do pracy, zaś narzędzia są skonstruowane tak, aby programista był sobie w stanie poradzić ze wszystkim zaraz po zainstalowaniu interpretera.</p>

<h2>2. Debuger jest opcją, nie obowiązkiem</h2>

<p>W świecie .NET jest to dziwna opinia. Wielu programistów wykorzystuje go jako normalne narzędzie pracy służące sprawdzeniu, czy aplikacja działa poprawnie. Dodatkowo sam Visual Studio ułatwia takie podejście. Jako programista Ruby nigdy nie musiałem skorzystać z debuggera &ndash; prawdę mówiąc, nigdy go nie zainstalowałem. Nie oznacza to oczywiście, że kod napisany w Rubym jest zawsze właściwy. Wynika to z innego podejścia. W tym środowisku standardem jest pisanie unit testów do weryfikacji każdej bardziej złożonej części systemu. Dzięki temu testy w Rubym są domyślnym <strong>must have</strong> przy każdym projekcie.</p>

<h2>3. Nie bój się eksperymentować</h2>

<p>To co najbardziej spodobało mi się we współpracy z programistami Ruby, to otwartość na nowinki, chęć wypróbowania innych podejść. Wiąże się z tym pewne ryzyko, ale również określony zysk. Tutaj powstaje pewien problem &ndash; ryzyko w skostniałym świecie aplikacji biznesowych z reguły jest czymś nie do przyjęcia. Dodatkowym hamulcem jest tutaj fakt, że wielu starszych programistów ze środowiska .NET nieprzychylnie patrzy na rozwiązania open source (w końcu kogo wtedy pociągnąć do odpowiedzialności?) oraz ogólnie technologiom spoza kółka Microsoftu.</p>

<p>Nie należy bać się zmian. Nawet jeżeli ryzyko jest nieakceptowalne w aplikacjach dla klientów zewnętrznych, wciąż możemy wprowadzać drobne zmiany dla systemów używanych wewnątrz firmy oraz wypróbowywać tam nowe podejścia. Z jednej strony może to przełożyć się na zysk w przyszłości, z drugiej działa to jak magnes na programistów-pasjonatów, a takich nigdy nie ma za wielu, prawda? ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell okiem programisty .NET]]></title>
    <link href="http://Horusiath.github.io/blog/2013/05/17/powershell-okiem-programisty-net/"/>
    <updated>2013-05-17T21:20:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2013/05/17/powershell-okiem-programisty-net</id>
    <content type="html"><![CDATA[<p>Artykuł ten tworzę z dość prostego powodu. Wraz z mijającym czasem w każdym programiście rośnie opór oraz lenistwo wobec powtarzalnych czynności wykonywanych codziennie w pracy. Stąd też szukamy sposobów na zautomatyzowanie choć części z tych zadań. PowerShell może być jednym ze sposobów na osiągnięcie tego celu. Z tego powodu warto lepiej się z nim zapoznać.</p>

<p>Zanim zacznę, chcę zaznaczyć, że nie jestem mistrzem PS. Postanowiłem jednak podzielić się swoimi doświadczeniami z punktu widzenia typowego programisty .NET i w miarę zwięźle pokazać, w jaki sposób przenieść niektóre z najpopularniejszych operacji występujących w tym świecie na ich odpowiedniki w PowerShellu. Zaczynajmy.</p>

<p>Rzecz, którą nieraz warto zrobić przed rozpoczęciem właściwej pracy, to uruchomienie PowerShella w trybie administratora. Możemy to zrobić bezpośrednio z poziomu <strong>cmd.exe</strong> za pomocą komendy:<code>powershell &ldquo;Start-Process powershell -Verb runAs&rdquo;</code>.</p>

<h3>Wypisanie textu na konsolę</h3>

<p>C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Hello world!&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Write-Host</span> <span class="s2">&quot;Hello world!&quot;</span>
</span><span class='line'><span class="c"># lub krócej</span>
</span><span class='line'><span class="s2">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Zmienne</h3>

<p>C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">b</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">a</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="kt">var</span> <span class="n">b</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$a</span> <span class="p">=</span> <span class="n">1</span>
</span><span class='line'><span class="nv">$b</span> <span class="p">=</span> <span class="n">2</span>
</span><span class='line'><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span> <span class="p">=</span> <span class="n">1</span><span class="p">,</span> <span class="n">2</span>    <span class="c"># Python-like</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tablice</h3>

<p>C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">array</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">[]</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="s">&quot;text&quot;</span><span class="p">,</span> <span class="m">3.14</span> <span class="p">};</span>
</span><span class='line'><span class="kt">var</span> <span class="n">a</span> <span class="p">=</span> <span class="n">array</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'><span class="kt">var</span> <span class="n">iter</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$array</span> <span class="p">=</span> <span class="n">1</span><span class="p">,</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span> <span class="n">3</span><span class="p">.</span><span class="n">14</span>
</span><span class='line'><span class="nv">$array</span> <span class="p">=</span> <span class="err">@</span><span class="p">(</span><span class="n">1</span><span class="p">,</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span> <span class="n">3</span><span class="p">.</span><span class="n">14</span><span class="p">)</span> <span class="c"># jawny zapis</span>
</span><span class='line'><span class="nv">$a</span> <span class="p">=</span> <span class="nv">$array</span><span class="p">[</span><span class="n">0</span><span class="p">]</span>
</span><span class='line'><span class="nv">$iter</span> <span class="p">=</span> <span class="p">(</span><span class="n">1</span><span class="p">..</span><span class="n">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Słowniki</h3>

<p>C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">dictionary</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span><span class="kt">string</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">{</span><span class="s">&quot;key 1&quot;</span><span class="p">,</span> <span class="s">&quot;value 1&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="s">&quot;key 2&quot;</span><span class="p">,</span> <span class="s">&quot;value 2&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">dictionary</span><span class="p">[</span><span class="s">&quot;key 1&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$dictionary</span> <span class="p">=</span> <span class="err">@</span><span class="p">{</span><span class="s2">&quot;key 1&quot;</span> <span class="p">=</span> <span class="s2">&quot;value 1&quot;</span><span class="err">;</span> <span class="s2">&quot;key 2&quot;</span> <span class="p">=</span> <span class="s2">&quot;value 2&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">$dictionary</span><span class="p">[</span><span class="s2">&quot;key 1&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Operatory logiczne, warunkowe i binarne</h3>

<p>C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">true</span> <span class="p">==</span> <span class="k">true</span>    <span class="c1">// równy</span>
</span><span class='line'><span class="k">true</span> <span class="p">!=</span> <span class="k">false</span>   <span class="c1">// różny</span>
</span><span class='line'><span class="m">1</span> <span class="p">&gt;</span> <span class="m">0</span>           <span class="c1">// większy</span>
</span><span class='line'><span class="m">0</span> <span class="p">&lt;</span> <span class="m">1</span>           <span class="c1">// mniejszy</span>
</span><span class='line'><span class="m">1</span> <span class="p">&gt;=</span> <span class="m">0</span>          <span class="c1">// większy lub równy</span>
</span><span class='line'><span class="m">0</span> <span class="p">&lt;=</span> <span class="m">1</span>          <span class="c1">// mniejszy lub równy</span>
</span><span class='line'><span class="p">!</span><span class="k">true</span>           <span class="c1">// negacja</span>
</span><span class='line'><span class="k">true</span> <span class="p">&amp;&amp;</span> <span class="k">true</span>    <span class="c1">// koniunkcja (logiczny)</span>
</span><span class='line'><span class="k">true</span> <span class="p">||</span> <span class="k">false</span>   <span class="c1">// alternatywa (logiczny)</span>
</span><span class='line'><span class="m">1</span> <span class="p">^</span> <span class="m">1</span>           <span class="c1">// alternatywa wykluczająca </span>
</span><span class='line'><span class="m">1</span> <span class="p">|</span> <span class="m">1</span>           <span class="c1">// alternatywa (binarny)</span>
</span><span class='line'><span class="m">1</span> <span class="p">&amp;</span> <span class="m">1</span>           <span class="c1">// koniunkcja (binarny)</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$True</span> <span class="o">-eq</span> <span class="nv">$True</span>    <span class="c"># równy</span>
</span><span class='line'><span class="nv">$True</span> <span class="o">-ne</span> <span class="nv">$False</span>   <span class="c"># różny</span>
</span><span class='line'><span class="n">1</span> <span class="o">-gt</span> <span class="n">0</span>            <span class="c"># większy</span>
</span><span class='line'><span class="n">0</span> <span class="o">-lt</span> <span class="n">1</span>            <span class="c"># mniejszy </span>
</span><span class='line'><span class="n">1</span> <span class="o">-ge</span> <span class="n">0</span>            <span class="c"># większy lub równy</span>
</span><span class='line'><span class="n">0</span> <span class="o">-le</span> <span class="n">1</span>            <span class="c"># mniejszy lub równy</span>
</span><span class='line'><span class="o">-not</span> <span class="nv">$True</span>         <span class="c"># negacja</span>
</span><span class='line'><span class="nv">$True</span> <span class="o">-and</span> <span class="nv">$True</span>   <span class="c"># koniunkcja (logiczny)</span>
</span><span class='line'><span class="nv">$True</span> <span class="o">-or</span> <span class="nv">$False</span>   <span class="c"># alternatywa (logiczny)</span>
</span><span class='line'><span class="nv">$True</span> <span class="n">-xor</span> <span class="nv">$False</span>  <span class="c"># alternatywa wykluczająca (logiczny)</span>
</span><span class='line'><span class="n">1</span> <span class="o">-bxor</span> <span class="n">2</span>          <span class="c"># alternatywa wykluczająca (binarny)</span>
</span><span class='line'><span class="n">1</span> <span class="o">-bor</span> <span class="n">1</span>           <span class="c"># alternatywa (binarny)</span>
</span><span class='line'><span class="n">1</span> <span class="o">-band</span> <span class="n">1</span>          <span class="c"># koniunkcja (binarny)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Instrukcje warunkowe</h3>

<p>C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">if</span><span class="p">(</span><span class="err">$</span><span class="n">a</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Statement 1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="err">$</span><span class="n">b</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Statement 2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Statement 3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">If</span><span class="p">(</span><span class="nv">$a</span> <span class="o">-eq</span> <span class="nv">$True</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;Statement 1&quot;</span>
</span><span class='line'><span class="p">}</span> <span class="k">ElseIf</span><span class="p">(</span><span class="nv">$b</span> <span class="o">-eq</span> <span class="nv">$True</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;Statement 2&quot;</span>
</span><span class='line'><span class="p">}</span> <span class="k">Else</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;Statement 3&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pętle</h3>

<p>C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">=</span><span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">element</span> <span class="k">in</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">)</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">i</span><span class="p">++);</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">i</span><span class="p">++);</span>
</span><span class='line'><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="p">=</span><span class="n">1</span><span class="err">;</span> <span class="nv">$i</span> <span class="o">-lt</span> <span class="n">10</span><span class="err">;</span> <span class="nv">$i</span><span class="p">++)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">Write-Host</span> <span class="nv">$i</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$i</span> <span class="k">in</span> <span class="p">(</span><span class="n">1</span><span class="p">..</span><span class="n">10</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">Write-Host</span> <span class="nv">$i</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="nv">$i</span> <span class="o">-lt</span> <span class="n">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">Write-Host</span> <span class="nv">$i</span>
</span><span class='line'>  <span class="nv">$i</span><span class="p">++</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">Write-Host</span> <span class="nv">$i</span>
</span><span class='line'>  <span class="nv">$i</span><span class="p">++</span>
</span><span class='line'><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="nv">$i</span> <span class="o">-lt</span> <span class="n">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">Write-Host</span> <span class="nv">$i</span>
</span><span class='line'>  <span class="nv">$i</span><span class="p">++</span>
</span><span class='line'><span class="p">}</span> <span class="k">until</span><span class="p">(</span><span class="nv">$i</span> <span class="o">-eq</span> <span class="n">10</span><span class="p">)</span>   <span class="c"># odpowiednik: do {} while(-not ($i -ne 10))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Definicje własnych metod/funkcji</h3>

<p>C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="c1">// C# wymaga &quot;opakowania funkcji&quot; w klasę</span>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Fib</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="p">=</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="p">&lt;</span> <span class="m">2</span><span class="p">)</span> <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">Fib</span><span class="p">(</span><span class="n">n</span> <span class="p">-</span> <span class="m">2</span><span class="p">)</span> <span class="p">+</span> <span class="n">Fib</span><span class="p">(</span><span class="n">n</span> <span class="p">-</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">(</span><span class="k">new</span> <span class="n">A</span><span class="p">()).</span><span class="n">Fib</span><span class="p">(</span><span class="m">10</span><span class="p">);</span>    <span class="c1">// wynik: 55</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Function</span> <span class="n">Fib</span><span class="p">(</span><span class="nv">$n</span> <span class="p">=</span> <span class="n">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$n</span> <span class="o">-lt</span> <span class="n">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$n</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="n">Fib</span><span class="p">(</span><span class="nv">$n</span> <span class="p">-</span> <span class="n">2</span><span class="p">))</span> <span class="p">+</span> <span class="p">(</span><span class="n">Fib</span><span class="p">(</span><span class="nv">$n</span> <span class="p">-</span> <span class="n">1</span><span class="p">)))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Fib</span><span class="p">(</span><span class="n">10</span><span class="p">)</span>    <span class="c"># wynik: 55</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Wywołania statycznych klas .NET</h3>

<p>C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">System</span><span class="p">.</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="s">&quot;10-01-2012&quot;</span><span class="p">);</span>    <span class="c1">// 1 Października 2012</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="no">[System.DateTime]</span><span class="err">::</span><span class="n">Parse</span><span class="p">(</span><span class="s2">&quot;10-01-2012&quot;</span><span class="p">)</span><span class="err">;</span>   <span class="c"># 1 Października 2012</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tworzenie nowych obiektów za pomocą konstruktorów</h3>

<p>C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">date</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">2012</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>    <span class="c1">// 1 Października 2012</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell (przestrzeń nazw System jest domyślnie zaimportowana):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$date</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">DateTime</span><span class="p">(</span><span class="n">2012</span><span class="p">,</span> <span class="n">10</span><span class="p">,</span> <span class="n">1</span><span class="p">)</span>   <span class="c"># 1 Października 2012</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kilka przydatnych cmdletów</h3>

<p>Na koniec chciałbym pokazać kilka cmdletów, które nieraz ułatwiają pracę. Warto zauważyć, że nieraz cmdlet dostępny jest również poprzez alias (przeważnie więcej niż jeden). Niektóre z nich zostały tutaj przedstawione.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="s2">&quot;A = {0} hours {1} minutes&quot;</span> <span class="o">-f</span> <span class="n">10</span><span class="p">,</span> <span class="n">20</span>  <span class="c"># odpowiednik string.Format</span>
</span><span class='line'>
</span><span class='line'><span class="c">#tworzenie nowego pliku/katalogu</span>
</span><span class='line'><span class="nb">New-Item</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\</span><span class="n">new_file</span><span class="p">.</span><span class="n">txt</span> <span class="n">-Type</span> <span class="n">File</span>
</span><span class='line'><span class="nb">New-Item</span> <span class="s2">&quot;c:\directories&quot;</span> <span class="n">-Type</span> <span class="n">Directory</span>
</span><span class='line'><span class="n">ni</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\</span><span class="n">new</span><span class="p">.</span><span class="n">txt</span> <span class="n">-type</span> <span class="n">file</span> <span class="c"># skrótowy zapis</span>
</span><span class='line'>
</span><span class='line'><span class="c"># kopiujemy wszystkie pliki z c:\files do c:\directories</span>
</span><span class='line'><span class="nb">Copy-Item</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\*</span> <span class="n">c</span><span class="p">\</span><span class="n">directories</span>
</span><span class='line'><span class="n">copy</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\*</span> <span class="n">c</span><span class="p">\</span><span class="n">directories</span>    <span class="c"># skrótowy zapis</span>
</span><span class='line'><span class="n">cp</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\*</span> <span class="n">c</span><span class="p">\</span><span class="n">directories</span>      <span class="c"># skrótowy zapis</span>
</span><span class='line'>
</span><span class='line'><span class="c"># usunięcie pliku lub katalogu</span>
</span><span class='line'><span class="nb">Remove-Item</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\</span><span class="n">new</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">rm</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\</span><span class="n">new</span><span class="p">.</span><span class="n">txt</span>    <span class="c"># alternatywa</span>
</span><span class='line'>
</span><span class='line'><span class="c"># przenoszenie plików lub folderów</span>
</span><span class='line'><span class="nb">Move-Item</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\</span><span class="n">old</span><span class="p">.</span><span class="n">txt</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files2</span><span class="p">\</span>
</span><span class='line'><span class="n">move</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\</span><span class="n">old</span><span class="p">.</span><span class="n">txt</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files2</span><span class="p">\</span>    <span class="c"># skrótowy zapis</span>
</span><span class='line'><span class="n">mv</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\</span><span class="n">old</span><span class="p">.</span><span class="n">txt</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files2</span><span class="p">\</span>      <span class="c"># skrótowy zapis</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pobranie zawartości pliku</span>
</span><span class='line'><span class="nb">Get-Content</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\</span><span class="n">file</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'>
</span><span class='line'><span class="c"># wpisanie tekstu do pliku</span>
</span><span class='line'><span class="nb">Set-Content</span> <span class="n">file</span><span class="p">.</span><span class="n">txt</span> <span class="s2">&quot;file content&quot;</span>
</span><span class='line'><span class="s2">&quot;file content&quot;</span> <span class="p">|</span> <span class="nb">Out-File</span> <span class="n">file</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'>
</span><span class='line'><span class="c"># sprawdzenie istnienia pliku lub folderu pasującego do podanego wzorca</span>
</span><span class='line'><span class="nb">Test-Path</span> <span class="n">c</span><span class="err">:</span><span class="p">\</span><span class="n">files</span><span class="p">\*.</span><span class="n">txt</span>
</span><span class='line'>
</span><span class='line'><span class="c"># wyszukanie linijki z pliku źródłowego, zawierającego szukaną frazę</span>
</span><span class='line'><span class="nb">Get-Content</span> <span class="n">file</span><span class="p">.</span><span class="n">txt</span> <span class="p">|</span> <span class="nb">Select-String</span> <span class="s2">&quot;fraza&quot;</span>
</span><span class='line'><span class="c"># zwaraca True, jeżeli znaleziono dopasowanie</span>
</span><span class='line'><span class="nb">Get-Content</span> <span class="n">file</span><span class="p">.</span><span class="n">txt</span> <span class="p">|</span> <span class="nb">Select-String</span> <span class="s2">&quot;fraza&quot;</span> <span class="n">-quiet</span>
</span><span class='line'><span class="c"># rozróżnienie wielkości liter</span>
</span><span class='line'><span class="nb">Get-Content</span> <span class="n">file</span><span class="p">.</span><span class="n">txt</span> <span class="p">|</span> <span class="nb">Select-String</span> <span class="s2">&quot;fraza&quot;</span> <span class="o">-casesensitive</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Get-Date</span>    <span class="c"># pobieramy bierzącą datę z zegara systemowego: DateTime.Now</span>
</span><span class='line'><span class="nb">Get-Date</span> <span class="n">-displayhint</span> <span class="n">date</span>   <span class="c"># jak powyżej, ale pobieramy samą datę: DateTime.Today</span>
</span><span class='line'><span class="nb">Get-Date</span> <span class="n">-displayhist</span> <span class="n">time</span>   <span class="c"># analogicznie dla czasu</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ustawia zegar systemowy na hh:mm:ss do przodu (w przykładzie 1h10m)</span>
</span><span class='line'><span class="nb">Set-Date</span> <span class="n">-adjust</span> <span class="n">1</span><span class="err">:</span><span class="n">10</span><span class="err">:</span><span class="n">00</span>
</span><span class='line'>
</span><span class='line'><span class="c"># informacje o procesie</span>
</span><span class='line'><span class="nb">Get-Process</span> <span class="n">process1</span><span class="p">,</span> <span class="n">process2</span>    <span class="c"># jawne wyliczenie szukanych nazw</span>
</span><span class='line'><span class="nb">Get-Process</span> <span class="n">proc</span><span class="p">*</span>                 <span class="c"># szukanie wg. wzorca</span>
</span><span class='line'><span class="n">ps</span> <span class="n">proc</span><span class="p">*</span>                          <span class="c"># skrótowy zapis</span>
</span><span class='line'><span class="n">ps</span> <span class="n">proc</span><span class="p">*</span>
</span><span class='line'>
</span><span class='line'><span class="c"># zakończ process(-y)</span>
</span><span class='line'><span class="nb">Stop-Process</span> <span class="n">-processname</span> <span class="k">process</span><span class="p">*</span>   <span class="c"># zakończ procesy o nazwie zgodnej z wzorcem</span>
</span><span class='line'><span class="n">kill</span> <span class="n">3888</span>          <span class="c"># skrótowy zapis, zakończ process o Id równym 3888</span>
</span></code></pre></td></tr></table></div></figure>


<p>PS: W niektórych z powyższych komend wykorzystałem jeden z feature&#8217;ów PowerShella, którego wcześniej nie opisałem &ndash; <strong>pipeline operator</strong>. Jest on reprezentowany przez symbol <code>|</code> i służy do przekazywania wyniku jednej funkcji/polecenia jako wejścia do następnej.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zapowiedź Ruby 2.1 - generational heap]]></title>
    <link href="http://Horusiath.github.io/blog/2013/05/14/zapowiedz-ruby-21-generational-heap/"/>
    <updated>2013-05-14T20:02:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2013/05/14/zapowiedz-ruby-21-generational-heap</id>
    <content type="html"><![CDATA[<p>Nie minęło wiele czasu od wydania Ruby&#8217;ego w wersji 2.0, a już pojawiła się ciekawa nowinka &ndash; od wersji 2.1 MRI ma wspierać generacje na zarządzanej stercie. Była to dla mnie wiadomość o tyle ciekawsza, że do tej pory sądziłem, że nie jest to możliwe bez zerwania kompatybilności z niskopoziomowymi rozszerzeniami języka C, które znajdują się w niektórych bibliotekach &ndash; tymczasem zapewniono, że żadna tego typu sytuacja nie będzie mieć miejsca.</p>

<h2>Generacje w Rubym (MRI)</h2>

<p>Jak więc ma wyglądać nowy mechanizm GC? Do tej pory wiadomo niewiele, dlatego postaram się podzielić szczegółami, które udało mi się zebrać. Nowy garbage collector nosi nazwę <strong>RGenGC</strong> i domyślnie będzie dzielił stertę na dwie generacje &ndash; często odśmiecana przestrzeń niewielkiego rozmiaru dla obiektów krótkotrwałych (obiekty tworzone w zakresach lokalnych metod często kończą tu swój żywot) oraz przestrzeń obiektów długotrwałych, awansowanych z pierwszej generacji.</p>

<p>Dotychczasowym problemem była konieczność zmiany adresów obiektów, związana z przenoszeniem obiektu pomiędzy generacjami. O ile MRI mogłoby śledzić takie &ldquo;ruchome&rdquo; instancje, o tyle rozszerzenia napisane w języku C nie są w stanie tego zrobić (wewnętrznie referencje na obiekty w Rubym są po prostu zwykłymi wskaźnikami). Jak rozwiązano ten problem? Postanowiono podzielić referencje na obiekty na dwie klasy:</p>

<ul>
<li>Lśniące (<em>shiny</em>) &ndash; obiekty z takimi referencjami mogą być swobodnie śledzone i przenoszone pomiędzy generacjami zarządzanej sterty.</li>
<li>Ciemne (<em>shady</em>) &ndash; w momencie, kiedy jakiś obiekt zostanie wykorzystany z poziomu C, zostaje on przypisany do tej klasy. Obiekty tego typu nie mogą być przenoszone ani zebrane przez kolektor, dopóki są wykorzystywane przez kod niezarządzany.</li>
</ul>


<p>Przypomina to znane z innych środowisk mechanizmy współpracy pomiędzy kodem wysoko- i niskopoziomowym (w .NET takie &ldquo;nieprzenaszalne&rdquo; obiekty noszą nazwę <em>pinned objects</em>).</p>

<p>Jaki ma to wpływ na wydajność? Dotychczas nie stworzono oficjalnych benchmarków, nieoficjalnie mówi się o kilku procentowej poprawie względem poprzedniego rozwiązania. Należy jednak pamiętać, że prace wciąż trwają i wiele może się jeszcze zmienić.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O redundancji w wyrażeniach LINQ]]></title>
    <link href="http://Horusiath.github.io/blog/2013/04/23/o-redundancji-w-wyrazeniach-linq/"/>
    <updated>2013-04-23T21:35:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2013/04/23/o-redundancji-w-wyrazeniach-linq</id>
    <content type="html"><![CDATA[<p>O tym, czym jest redundacja wie chyba każdy programista. Każdy z nas wie również, że jest to zjawisko nieporządane i w większości wypadków lepiej mu zapobiegać. Ten post przeznaczę na opis przykładowego zjawiska powtórzeń w zapytaniach LINQ spotykanego w sytuacjach codziennych oraz prostym i czytelnym ich rozwiązaniu, o którym nieraz zapominamy.</p>

<h2>Przykład</h2>

<p>Weźmy pod uwagę następujący przykład &ndash; otrzymaliśmy dokumentację, w której opisana jest pewna encja. Może ona mieć następującą postać:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Document</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreateDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Type</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// .. reszta implementacji</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>W ramach logiki biznesowej wykonywanej na encjach tej klasy stworzone zostało pojęcie przeterminowania &ndash; z dalszej części dokumentacji dowiadujemy się, że za przeterminowane uznajemy te encje, w których data utworzenia jest starsza niż X dni (X może być dowolne np. ustawione w konfiguracji systemu) zaś typ przybiera konkretną wartość. Bez trudu zawężamy więc wyniki za pomocą zapytania:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">x</span> <span class="p">=</span> <span class="p">..</span> <span class="n">pobieramy</span> <span class="n">X</span>
</span><span class='line'><span class="kt">var</span> <span class="n">documents</span> <span class="p">=</span> <span class="n">DataContext</span><span class="p">.</span><span class="n">Documents</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">CreateDate</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">&lt;</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">&amp;&amp;</span> <span class="n">x</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="s">&quot;M1&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Niestety w późniejszym czasie słowo &ldquo;przeterminowany&rdquo; pojawia się w tym kontekscie jeszcze kilka razy w różnych miejsach aplikacji. Co robimy? W większości spotkanych przeze mnie przypadków piszemy klauzulę <code>Where(&hellip;)</code> ponownie. Ale czy na pewno?</p>

<h2>Inne podejście</h2>

<p>Rozwiązaniem powyżej sytuacji może być stary dobry <em>monkey patching</em>, reprezentowany w C# przez mechanizm extension methods. Z jego użyciem moglibyśmy rozwiązać ten problem w następujący sposób:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">X</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{...}</span> <span class="p">}</span>
</span><span class='line'><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// Słowo komentarza od ojca dyrektora.</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Document</span><span class="p">&gt;</span> <span class="n">Expired</span><span class="p">(</span><span class="k">this</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Document</span><span class="p">&gt;</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">x</span> <span class="p">=</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">CreateDate</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">&lt;</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">&amp;&amp;</span> <span class="n">x</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="s">&quot;M1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Przykład wykorzystania:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">expiredDocuments</span> <span class="p">=</span> <span class="n">DataContext</span><span class="p">.</span><span class="n">Documents</span><span class="p">.</span><span class="n">Expired</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>W ten sposób stworzyliśmy stereotyp, który możemy wykorzystywać zawsze w sytuacji kiedy mamy do czynienia z tym konkretnym zachowaniem. Jakie są zalety tego podejścia? Po pierwsze trzymamy się zasady DRY (Don&rsquo;t Repeat Yourself). Po drugie sądzę, że taki zapis jest o wiele bardziej czytelny i ułatwia późniejsze zrozumienie kontekstu, w jakim wykonywane są zapytania.</p>

<p>Innym sposobem na rozwiązanie powyższego problemu jest naturalnie przeniesienie filtru bezpośrednio do kontekstu danych:<code>var data = DataContext.GetExpiredDocuments();</code>. Na czym jednak polega przewaga monkey patchingu? Po pierwsze nie jesteśmy twardo związani ze źródłem danych &ndash; napisany wcześniej stereotyp może być zastosowany dla dowolnej kolekcji, nawet takiej która powstała w wyniku deserializacji żądania HTTP. Po drugie rozwinięcie to można wstawić w dowolnym momencie tworzonego zapytania, z dowolnej encji posiadające odpowiednią relację.</p>

<p>W rezultacie otrzymujemy rozwiązanie bardziej uniwersalne i podatne na zmiany.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parę słów o HTMLu i CSSie]]></title>
    <link href="http://Horusiath.github.io/blog/2013/04/21/pare-sow-o-htmlu-i-cssie/"/>
    <updated>2013-04-21T08:45:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2013/04/21/pare-sow-o-htmlu-i-cssie</id>
    <content type="html"><![CDATA[<p>W tym poście postanowiłem zebrać kilka technologii usprawniających zabawę stylami i HTMLem, wykorzystując Visual Studio 2012 jako narzędzie codziennej pracy. Część z nich cieszy się już sporą popularnością w świecie web developerów innych środowisk, zaś w świecie .NET stawiają swoje pierwsze kroki.</p>

<p>Zanim zacznę właściwą część postu, chcę wszystkim przypomnieć o <a href="http://visualstudiogallery.msdn.microsoft.com/6ed4c78f-a23e-49ad-b5fd-369af0c2107f">Web Essentials</a>. Jest to absolutny <em>must have</em> jeżeli chodzi o web development w VS2012. Wiele z feature&#8217;ów opisywanych przeze mnie dalej jest już wbudowanych w to rozszerzenie.</p>

<h2>Zen Coding</h2>

<p>Jeżeli chodzi o kwestie tworzenia szablonów dynamicznych stron HTML, możemy podzielić programistów na dwie grupy. Pierwsza z nich to szczęściarze, mogący budować szablonych za pomocą czytelnych, przejżystych notacji (np. <a href="http://haml.info/">HAML</a> lub <a href="http://jade-lang.com/">Jade</a>). Druga (czyli reszta ;) ) to osoby zmuszane do osadzania dynamicznego kodu w otoczce pseudo-HTML. Z myślą o tej drugiej grupie powstał standard znany powszechnie jako Zen Coding. O co w nim chodzi? Załóżmy, że chcielibyśmy stworzyć kod HTML w następującej postaci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Menu<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nie jestem chyba jedyną osobą, która uważa, że pisanie czegoś takiego z palca to strata czasu? Z pomocą ZenCoding możemy to uprościć do następującej postaci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>#container&gt;p{Menu}+ul.menu&gt;(li&gt;a)*5
</span></code></pre></td></tr></table></div></figure>


<p>W przypadku Web Essentials dla VS2012 jedyne co musimy zrobić, to umieścić takie wyrażenie w nowej linii oraz nacisnąć Tab (natychmiast po końcu wyrażenia bez spacji), aby wygenerować wynikowy HTML.</p>

<h2>Prekompilowany CSS</h2>

<p>Do niedawna była to jeszcze nowinka. Jednakże zalety notacji takich jak <a href="http://lesscss.org/">LESS</a> czy <a href="http://sass-lang.com/">SASS</a> szybko zapewniły im właściwe miejsce. Zastanówmy się, dlaczego warto z nich korzystać?</p>

<ul>
<li>Przyswajalność &ndash; że nauka nowej notacji zajmuje kilka godzin/dni.</li>
<li>Usunięcie powtarzalności kodu &ndash; stosując zmienne, wartości wyliczane oraz zagłębione style, mozemy osiągnąć nasz cel szybciej oraz bez konieczności kopiowania tych samych linijek. W dodatku powstały w ten sposób kod jest bardziej podatny na zmiany niż jego statyczny odpowiednik.</li>
<li>Hierarchizacja &ndash; stosowanie importów jest kolejnym krokiem usuwajacym powtarzalny kod, jak również umożliwia podział kodu CSS na konkretne jednostki odpowiedzialności. Pozwala również w pewnym stopniu usunąć konieczność łączenia plików CSS za pomocą bundlerów.</li>
<li>Rozmiar &ndash; narzędzia takie jak Web Essentials automatycznie kompilują pliki .less do kodu CSS podczas zapisu zmian w pliku. Dodatkowo są w stanie skompilować je osobno do postaci z wcięciami (czytelnej dla developera) oraz zminimalizowanej (pozbawionej białych znaków) &ndash; doskonałej do zastosowania w środowisku produkcyjnym.</li>
</ul>


<p>W skrócie pozwala nam wprowadzić odrobinę porządku i organizacji w dziedzinę, która do tej pory jest powszechnie uważana za żmudną, powtarzalną i chaotyczną.</p>

<h2>Palety barw</h2>

<p>Nie ma co ukrywać. Programista nie jest artystą-grafikiem i nie powinno się oczekiwać od niego estetyki i twórczości na poziomie zawodowego designera. Czasem jednak okazuje się, że gotowy layout wykorzystywany na naszej stronie jest niewystarczający i musimy skombinować na szybko &ldquo;coś własnego&rdquo;, czy to w formie dodatkowego stylu czy motywu do odznaczenia części strony.</p>

<p>W takim wypadku z pomocą przychodzi <a href="https://kuler.adobe.com/">Adobe Kuler</a>. Umożliwia on dostosowanie istniejącego lub zdefiniowanie własnego motywu kolorystycznego do wykorzystania na stronie zgodnie z powszechnymi regułami rządzącymi zasadami kompozycji barw.</p>

<h2>CSS &ndash; czy wiesz z czego korzystasz?</h2>

<p>Czy tworząc plik CSS zastanawialiście się, jak duża część opisanych przez was reguł faktycznie jest wykorzystywana na stronie? Chrome umożliwia sprawdzenie tego w dość prosty sposób. Wystarczy z poziomu Developer Tools uruchomić Audyt na zakładce o tej samej nazwie. Po kilku sekundach jesteśmy w stanie zauważyć coś w ten deseń:</p>

<div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-eBhklZN4A_g/UXL2pqSMowI/AAAAAAAAAHQ/ztKUIviVimU/s1600/chrome-devtool.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="150" src="http://4.bp.blogspot.com/-eBhklZN4A_g/UXL2pqSMowI/AAAAAAAAAHQ/ztKUIviVimU/s320/chrome-devtool.jpg" width="320" /></a></div>


<p>Jaki wynik osiągacie na swojej stronie? ;) Powiem szczerze, że wykorzystywanie około 40% dołączonych reguł można uznać za wysoki wynik.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Niska wydajność Ruby'ego - studium porównawcze]]></title>
    <link href="http://Horusiath.github.io/blog/2013/03/20/niska-wydajnosc-rubyego-studium/"/>
    <updated>2013-03-20T23:42:00+01:00</updated>
    <id>http://Horusiath.github.io/blog/2013/03/20/niska-wydajnosc-rubyego-studium</id>
    <content type="html"><![CDATA[<p>We współczesnym świecie aplikacji webowych Ruby oraz jego główna (często utożsamiana z nim) platforma, Ruby on Rails, są przykładem świetnego dopasowania języka do zbioru metodyk i stosu technologicznego nastawionego na maksymalizację wydajności pracy programisty. Stanowią one &ldquo;wylęgarnię&rdquo; nowatorskich praktyk, które nieraz przenikają dalej i zostają zaadaptowane przez inne środowiska. Wystarczy podać kilka przykładów ze środowiska .NET: migracje w najnowszym EF4.3+, kierunek w jakim zmierza cały ASP.NET MVC czy dynamizacja języka C# &ndash; myśleliście, że idea stojąca za LINQ to nowatorski pomysł? ;) .</p>

<p>Niestety za każym razem, kiedy mowa o Rubym, powracają kwestie jego wydajności. Jest to pięta achillesowa tego języka, powtarzana jak mantra w kolejnych dyskusjach programistów. Na czym jednak polegają te problemy? W tym postcie postaram się je opisać (w odniesieniu do najpopularniejszego kompilatora Ruby&#8217;ego &ndash; MRI) oraz opowiedzieć o rozwiązaniach, jakie zostały zaadaptowane w innych językach. Ponieważ moje obserwacje będę porównywał do innych implementacji, w tym Javy, C#, Pythona i różnych wirtualnych maszyn JavaScriptu, liczę że każdy będzie mógł wynieść z tego jakąś przydatną wiedzę.</p>

<h2>Garbage Collector</h2>

<p>Ten wątek musiał się tu pojawić, dlatego też postanowiłem zacząć właśnie od niego. Rozdział ten będzie dość trudny do przełknięcia dla osób, które z teorią stojącą za językami programowania nigdy nie miały do czynienia. Zanim przejdą one dalej, proponuję zaznajomić się z <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science">tym wpisem</a>) na Wikipedii.</p>

<p>W dużym skrócie, Garbage collector w MRI wykorzystuje (podobnie jak wszystkie najpopularniejsze współcześnie maszyny wirtualne) algorytm <em>mark and sweep</em>. Jest to jednak pojęcie bardzo szerokie. Zagłębiając się w detale, dochodzimy do pewnych różnic.</p>

<h3>Podział zarządzanego stosu</h3>

<p>Większość programistów Javy i .NET zapewne kojarzy, że zarządzana sterta występująca w tych językach nie jest strukturą jednolitą, lecz jest podzielona na wiele przestrzeni (mowa tu o generacjach, ale nie tylko). I tak w przypadku .NET &ndash; na przykładzie SGena używanego w Mono, a świetnie opisanego <a href="http://www.mono-project.com/Generational_GC">tutaj</a> mamy do czynienia z podziałem sterty na kilka zbiorów:</p>

<ul>
<li><strong>Generacje</strong> &ndash; Zazwyczaj istnieją dwie lub więcej. Pierwszą jest <strong>żłobek</strong> (<em>nursery</em>). Ten zbiór jest relatywnie mały (domyślnie 4MB dla SGena, &frac12; pamięci cache L2 dla Pythona made by PyPy) i często czyszczony. Jest sprawny głównie ze względu na fakt, że większość obiektów przechowywanych na stercie ma stosunkowo krótki czas istnienia (np. zmienne lokalne funkcji/metod, które są niepotrzebne poza zakresem danej metody). Obiekty bardziej długowieczne przenoszone są na sterty kolejnych generacji. W rezultacie pamięć jest czyszczona częściej, jednak liczy się tutaj rozmiar przeszukiwanej pamięci (żłobek jest mały, przez co jego znakowanie i czyszczenie trwa bardzo krótko).</li>
<li><strong>Przestrzeń dużych obiektów</strong> &ndash; ponieważ naprawdę duże obiekty są dość ciężkie do alokacji (znalezienie na stercie jednolitego bloku pamięci nie zajętego przez inne obiekty może być wyzwaniem), są one rozpatrywane osobno, zarówno na wirtualnych maszynach Javy jak i .NETu (tak w przypadku Mono jak i M$).</li>
<li><strong>Łańcuchy znaków (string)</strong> &ndash; tekst jest również traktowany w specjalny sposób. Przykładowo wpisując w dwóch różnych miejscach w kodzie <em>&ldquo;ala ma kota&rdquo;</em> w praktyce definiujemy ten łańcuch znaków tylko raz, tworząc do niego dwie referencje. Ta zasada dotyczy zarówno Javy, .NETu, Pythona oraz najnowszych silników JavaScriptu. Ruby nie implementuje tej funkcjonalności &ndash; moim zdaniem na przeszkodzie stoi tutaj natura stringów w tym języku, które zgodnie ze specyfikacją mogą być mutowalne.</li>
</ul>


<p>Niestety w Rubym brakuje podziału sterty na generacje, przez co jest ona błyskawicznie zapychana obiektami o krótkim czasie życia, zaś &ldquo;sprzątnięcie&rdquo; całej sterty zajmuje sporo czasu. W chwili obecnej nie jest to możliwe, ponieważ GC w MRI nie implementuje przenoszenia obiektów wewnątrz sterty (dlaczego tak jest opowiem dalej).</p>

<h3>Co znajduje się na stosie</h3>

<p>W przypadku <strong>Javy</strong> sprawa podziału alokacji pomiędzy stos i stertę wygląda stosunkowo prosto: typy natywne i referencje na obiekty lądują na stosie, a reszta (obiekty klas) na stertę. W przypadku <strong>C#</strong> jest to trochę bardziej skomplikowane, ponieważ na stosie mogą wylądować również obiekty-struktury (<em>struct</em>) oraz obiekty utworzone za pomocą słowa kluczowego <strong>stackallock</strong>.</p>

<p>Pomiędzy GC Javy (oraz javascriptowym V8) a Mono istnieje dodatkowa różnica: dwa pierwsze stosują tzw. precyzyjne wskaźniki, tzn. podczas przechodzenia po stosie przez marker (uruchamiany przez GC w pierwszej fazie pracy i służący oznaczeniu obiektów, które trzeba sprzątnąć) natrafiając na wartości od razu wie, czy są one wartościami czy referencjami na obiekty znajdujące się na stercie. Przykładowo maszyna wirtualna JavaScriptu z Chroma używa do tego specjalnego bitu określającego czy dana wartość jest referencją (stąd na V8 w wersji 32-bitowej liczby całkowite są wewnętrznie składowane jako wartości <em>31-bitowe</em>). Niestety SGen Mono musi za każdym razem sprawdzić (a w razie wątpliwości założyć z góry), czy taka wartość wskazuje adres na stercie.</p>

<p>W przypadku Ruby&#8217;ego sprawa wygląda częściowo prościej: w tym języku nie istnieją typy wartościowe, zatem wszystkie wartości (w tym liczby oraz flagi logiczne) są reprezentowane przez obiekty składowane na zarządzanej stercie. To sprawia, że czas dostępu do nich jest dłuższy.</p>

<p>Inna niespodzianka, jaką szykuje nam Ruby, sięga jeszcze dalej. Interpreter MRI (do nadejścia wersji 1.9) konstruował kod Ruby&#8217;ego przez pośrednią translację do <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">drzewa AST</a>. Jednakże chcąc zapewnić programistom &ldquo;pełnię władzy&rdquo; nad kodem, tak stworzone drzewo było składowane w postaci struktur Ruby&#8217;ego na jego zarządzanej stercie! Oznacza to, że cały aktualnie wykonywany kod jest reprezentowany przez faktycznie istniejące drzewo obiektów, zajmujące ogromną ilość pamięci.</p>

<h3>Jak zarządzana jest sterta: .NET Mono</h3>

<p>Kolejne zestawienie z Mono. Mówiąc dość ogólnie sterta jest podzielona na tak zwane bloki, one z kolei na sloty. Podczas oznaczania obiektów na stercie dzielimy je na 3 typy:</p>

<ul>
<li><strong>Root objects</strong> &ndash; są to obiekty, do których znaleziono referencje na stosie i które nie powinny zostać usunięte.</li>
<li><strong>Garbage </strong>&ndash; a zatem obiekty-śmieci oraz puste przestrzenie, które mogą zostać realokowane pod nowe obiekty.</li>
<li><strong>Pinned objects</strong> &ndash; specjalny rodzaj tzw. przypiętych obiektów. Są to obszary pamięci wyjęte spoza kontroli zarządzanej sterty, a więc np. struktury z języka C, na które mamy referencje z poziomu P/Invoke oraz obiekty przypięte ręcznie w zakresach <strong>unsafe</strong> (za pomocą słowa kluczowego <strong>fixed</strong>). W Mono do tej listy dochodzą również te adresy, które zostały znalezione na stosie, ale nie koniecznie wskazują na obiekty. Ze względów bezpieczeństwa takich obiektów nie można odśmiecać.</li>
</ul>


<p>Z punktu widzenia Garbage Collectora najbardziej upierdliwe są pinned objects. Dlaczego? Otóż w trakcie odśmiecania pamięci GC zostawia &ldquo;dziury&rdquo; pustych przestrzeni, które mogą posłużyć w przyszłości do zaalokowania nowych obiektów. Niestety te dziury powodują fragmentację pamięci. Co z tego, że mamy 10 luk po 100 bajtów, jeżeli potrzebujemy stworzyć obiekt rozmiaru 200B? Dlatego też GC w Mono został wyposażony w opcję realokacji obiektów &ndash; umożliwia to przesunięcie położenia obiektów w pamięci tak, aby złączyć luki powstałe po odśmiecaniu w 1 ciągły blok w pamięci.</p>

<h3>Jak zarządzana jest sterta: Ruby</h3>

<p>Z punktu widzenia MRI sterta również jest podzielona na komórki, które są reprezentowane w pamięci jako zwykłe struktury C (dokładna nazwa to <em>struct VALUE</em>).</p>

<p>Ciekawostką jest sposób znajdowania pustych fragmentów na stercie służących pod przyszłe alokacje obiektów. Do wersji 2.0 (a więc we wszystkich obecnie używanych) mamy do czynienia ze strukturą przyjmującą postać linked listy. Szukając nieużywanych komórek musieliśmy przeglądać kolejne węzły z listy i sprawdzać ich zajętość &ndash; przeskakiwanie po pamięci oraz znalezienie odpowiednio dużego ciągłego bloku może być czasochłonne, sama lista również ma swój rozmiar. Od wersji 2.0 zamieniono ją inną strukturą &ndash; bitmapą. Od teraz za każdym razem, kiedy tworzona jest zarządzana sterta, część pamięci na jej początku zostaje zarezerwowana na potrzeby bitmapy. Określa ona w prosty sposób (ustawiając lub zerując kolejne bity w pamięci) zajętość kolejnych komórek VALUE. Przeszukiwanie takiej struktury jest o wiele szybsze, zajmuje ona też mniej miejsca w pamięci &ndash; ponieważ bloki RValue mają po 40 bajtów i wymagają 1 bitu do sygnalizacji łatwo wyliczyć, że ostateczna bitmapa zajmuje około 1/(40*8) = 1/320 rozmiaru całej sterty.</p>

<p>Do czego sprowadza się największy (moim zdaniem) problem Ruby&#8217;ego? Otóż GC w MRI nie dysponuje opcją przenoszenia obiektów. Porównując do Mono wszystkie obiekty w Rubym traktowane są jako pinned object. Niesie to szereg następstw m.in. w przypadku konieczności alokacji dużego obiektu na stercie o mocno sfragmentowanej strukturze, może istnieć potrzeba rozszerzenia rozmiaru sterty (a zatem zwiększenia zużycia RAMu w całym programie) pomimo, że istnieje dostateczna ilość miejsca, aby taki obiekt zaalokować.</p>

<p>Czy można zmienić GC w Rubym na taki, który zdolny jest przesuwać obiekty? Nie. Na drodze stoją tu referencje na obiekty, które wewnątrz są w rzeczywistości zwykłymi wskaźnikami na bloki pamięci bezpośrednio na stercie. Przesunięcie obiektu na stercie wiąże się ze zmianą jego adresu, ponieważ jednak nie wiemy ile referencji (których w algorytmie <em>mark&amp;sweep</em> nie zliczamy) należy powiadomić o nowej lokacji obiektu, taka operacja nie jest możliwa. Naturalnie można to zmienić (np. wprowadzić wskaźniki pośrednie), jednakże spowoduje to dysonans między dotychczasowymi implementacjami wtyczek z języka C montowanych do Ruby&#8217;ego i zniszczy jego kompatybilność wstecz. Niestety sądzę, że prędzej czy później ta decyzja musi zostać podjęta.</p>

<h2>Klątwa języków dynamicznych</span></h2>

<p>Kolejnym krokiem w zrozumieniu problemu niskiej wydajności jest poznanie natury &ndash; i ceny &ndash; towarzyszącej językom dynamicznym. Weźmy pod uwagę następujący przykład: załóżmy, że stworzyliśmy klasę w dowolnym języku statycznie typowanym (np. Java lub C#). Jej postać jest następująca:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Point</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nie zagłębiając się zanadto w szczegóły jesteśmy w stanie stwierdzić, że wywołanie konstruktora powinno zaowocować stworzeniem w pamięci obiektu zajmującego 8 bajtów (2*sizeof(int)). Jak to wygląda w językach dynamicznie typowanych? Otóż w Rubym MRI, Pythonie oraz JavaScriptcie (w niektórych przypadkach) tworzony obiekt jest de facto nie zwykłym blokiem pamięci lecz strukturą budową bardziej przypominającą hash mapę/słownik, w którym każde pola reprezentowane jest przez string (js), hash (py) lub symbol reprezentowany w globalnej tablicy symboli (rb). Dotyczy to każdego pojedynczego obiektu. Wynika to w naturalny sposób z faktu, że tworząc obiekt danego typu, możemy go w dowolnej chwili rozszerzyć o nowe pola bez zmiany struktury obiektów o tej samej klasie. Czas dostępu do pól w takich obiektach jest bardzo duży, zaś same struktury są o wiele większe niż ich odpowiedniki w językach statycznie typowanych.</p>

<p>Czy da się to ominąć? Tak, rozwiązanie zostało już wynalezione i zaimplementowane w JavaScriptcie na silnikach V8 (Chrome) oraz najnowszym SquirrelFish (Safari). Oba te silniki definiują tzw. <em>hidden classes</em>. Idea która za nimi stoi wynika z prostej przesłanki. Otóż zauważono, że nawet w językach dynamicznych wewnętrzna struktura obiektów przez znaczną większość czasu pozostaje taka sama. Z tego powodu możemy reprezentować obiekty o tej samej budowie przez ukrytą klasę &ndash; jej struktura pamięci jest identyczna z tą w językach statycznie typowanych. W momencie kiedy rozszerzamy dany obiekt o kolejne pola, tworzymy dla niego kolejną ukrytą klasę, o nowej, rozrośniętej budowie, a następnie realokujemy do nowej postaci. Z punktu widzenia wykonywanego programu jest to dość rzadkie zjawisko, natomiast korzyści płynące z tego podejścia są ogromne.</p>

<h2>JIT, Interpreter oraz Tracing</h2>

<p>Ostatnia różnica, na której chcę się skupić dotyczy różnic wynikających z kompilatorów JIT (używanych obecnie niemal we wszystkich najpopularniejszych językach: Javie, C# czy Pythonie na silniku PyPy) w stosunku do tradycyjnych interpreterów (Ruby MRI) oraz możliwości jakich dostarczają.</p>

<p>Podstawowa różnica między tymi dwoma typami polega na tym, że tradycyjny interpreter przetwarza i generuje kod maszynowy na bieżąco w czasie rzeczywistym, interpretując skrypt linijka po linijce. JIT w tym czasie wykonuje małe wyprzedzenie, przetwarzając cały dostępny kod jeszcze przed punktem jego wykonania.</p>

<p>Dodatkową korzyścią płynącą z podejścia kompilacji JIT jest możliwość dynamicznej optymalizacji kodu w trakcie jego działania. Takie podejście stosowane jest przez wszystkie najnowsze maszyny wirtualne. Jedna z takich technik znana jest jako <strong>trace trees</strong> i została opisana <a href="http://www.ics.uci.edu/~franz/Site/pubs-pdf/ICS-TR-06-16.pdf">tutaj</a>. W dużym skrócie ideą tego podejścia jest wyłapanie w aplikacji powtarzających się fragmentów kodu oraz zoptymalizowanie ich w taki sposób, aby wykonywały one jak najmniej instrukcji procesora. W jaki sposób jest to osiągane?</p>

<ul>
<li><strong>Inlining </strong>&ndash; a więc ograniczenie liczby instrukcji call do zewnętrznych funkcji poprzez skopiowanie ich zawartości do wnętrza pętli.</li>
<li><strong>Wnioskowanie typów</strong> &ndash; przykład: jeżeli w języku dynamicznym dodajemy do siebie w pętli dwie&nbsp;wartości typu int&nbsp;1000 razy, mamy przesłanki aby twierdzić, że operacje wykonane na tej zmiennej zawsze będą dotyczyć obiektu tego samego typu (gdyby nie to, musielibyśmy za każym razem sprawdzać czy operator dodawania nie został np. użyty raz dla <strong>int</strong>ów a inny raz dla <strong>string</strong>ów). Takie wnioski umożliwią nam wygenerowanie kodu maszynowego zoptymalizowanego do tego konkretnego typu &ndash; jest to bardzo przydatne z punktu widzenia Ruby&#8217;ego. Za przykład niech posłuży metoda dodawania 2 liczb całkowitych &ndash; teoretycznie możliwa do wykonania w 1 instrukcji maszynowej, w Rubym jest opakowana w metodę wirtualną, która dodatkowo definiuje sprawdzanie zakresu dla wynikowej liczby i w zależności od wyniku zwraca jedną z dwóch wewnętrznie różnych implementacji obiektu opakowującego dany wynik</li>
<li><strong>Rekonstrukcja do postaci kodu maszynowego wykonywalnego na GPU</strong> &ndash; wykonywalne, o ile kompilator jest w stanie rozpoznać stosowny kod na podstawie określonych wzorców (z tego co wiem, maszyna wirtualna na FireFoxie potrafi coś takiego).</li>
</ul>


<p>Rozwiązania zostały już wykorzystane na najnowszych VMach JavaScriptu. Niestety Ruby i Python wciąż czekają na swoją kolej.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ustrukturyzowane repozytorium - Git Flow]]></title>
    <link href="http://Horusiath.github.io/blog/2013/03/16/ustrukturyzowane-repozytorium-git-flow/"/>
    <updated>2013-03-16T08:29:00+01:00</updated>
    <id>http://Horusiath.github.io/blog/2013/03/16/ustrukturyzowane-repozytorium-git-flow</id>
    <content type="html"><![CDATA[<p>O tym czym jest Git, wie chyba każdy programista. O konwencjach i wzorcach stosowanych podczas produkcji do rozwoju repozytorium słyszało jednak zdecydowanie mniej osób, zaś jeszcze mniej stosowało je w praktyce. W tym poście postaram się poruszyć ten temat w kontekście <strong>git flow</strong> &ndash; narzędzia do integracji systemu kontroli wersji ze strategią procesu tworzenia oprogramowania.</p>

<p>Jakiś czas temu Maciej Aniserowicz <a href="http://www.maciejaniserowicz.com/2012/12/10/sztuka-commitowania-pracy/">opisał na swoim blogu</a> kilka własnych przemyśleń na temat konwencji stosowanych w celu poprawy pracy z systemem kontroli wersji. Mniej więcej wtedy zaczął mi świtać pomysł podzielenia się swoimi spostrzeżeniami na temat git flow &ndash; narzędzia, które miałem okazję poznać wcześniej podczas moich przygód jako programisty RoR. Teraz po długich miesiącach nareszcie zebrałem się w sobie aby podzielić się swoimi doświadczeniami.</p>

<h2>Czym jest git flow?</h2>

<p>W skrócie jest to nakładka do gita rozszerzająca go o zbiór nowych komend umożliwiających nadanie temu systemowi kontroli wersji struktury zgodniej z workflowem wytwarzania oprogramowania. Pytanie: tylko jak wygląda ten workflow? Jego głównym założeniem jest podział repozytorium na kilka ściśle powiązanych ze sobą płaszczyzn-gałęzi:</p>

<ul>
<li>gałąź developerska (domyślnie: <em>develop</em>) &ndash; na niej nanoszone są bieżące zmiany commitowane przez programistów pomiędzy wypuszczaniem kolejnych wersji programu.</li>
<li>gałąź produkcyjna (domyślnie: <em>master</em>) &ndash; zawiera bieżącą, najnowszą wersję programu.</li>
<li>gałęzie z wersjami (domyślnie: <em>release-&lt;numer_wersji></em>) &ndash; po jednej na każdą wydaną wersję programu. Zmiany stąd trafiają później bezpośrednio na gałąź produkcyjną.</li>
<li>gałęzie z nowymi funkcjonalnościami (domyślnie: <em>feature-<nazwa></em>) &ndash; za każdym razem kiedy tworzymy nowy moduł/funkcjonalność do projektu, tworzymy dla niego automatycznie jego własną gałąź. Po zakończeniu prac jest ona mergowana z branchem developerskim.</li>
<li>gałęzie z poprawkami (domyślnie: <em>hotfix-<nazwa></em>) &ndash; poprawki mogą być wykonywane zarówno z gałęzi produkcyjnej jak i developerskiej i tworzone są dla nich własne odnogi. Po zacommitowaniu poprawki trafia ona do obu branchów (<em>master </em>oraz <em>develop</em>).</li>
<li>gałęzie wsparcia (domyślnie: <em>support-&lt;numer_wersji></em>) &ndash; wprowadzona niedawno. Tutaj wykonywane są poprawki i zmiany na potrzeby klientów wykorzystujących starsze wersje programu.</li>
</ul>


<p>Całość została dokładniej &ndash; wraz z przykładami &ndash; przedstawiona <a href="http://vimeo.com/16018419">tutaj</a>. Na oficjalnym wiki projektu na githubie można z kolei znaleźć <a href="https://github.com/nvie/gitflow/wiki/Command-Line-Arguments">pełną listę nowych komend</a>. Pozwalają one zautomatyzować proces zarządzania commitami/zadaniami na każdej z gałęzi.</p>

<h2>Jak zainstalować git flow na Windows?</h2>

<p>Jest to w sumie dobre pytanie, ponieważ domyślnie narzędzie to było tworzone na potrzeby społeczności Linuxa. Instalacja na systemie Windows jest odrobinę bardziej skomplikowana, jednak w Internecie dostępne są poradniki poruszające to zagadnienie &ndash; ja korzystałem z <a href="http://xinyustudio.wordpress.com/2012/03/26/installing-git-flow-in-windows/">tego</a> (z niewielkimi zmianami). Poniżej opiszę listę kroków jaką wykonałem, aby rozruszać git flow u siebie.</p>

<p>Zakładając, że mamy już zainstalowanego Gita i znamy ścieżkę do niego, należy:</p>

<ul>
<li>Pobrać <em>util-linux-ng</em> dla Windowsa. Można to zrobić z <a href="http://gnuwin32.sourceforge.net/packages/util-linux-ng.htm">tej strony</a>. Wystarczy jednak, że z działu Downloads pobierzemy tylko foldery <strong>Bin </strong>oraz <strong>Dependencies</strong>.</li>
<li>Skopiować zawartość paczki <strong>Bin/bin</strong><strong> </strong>oraz <strong>Dependecies/bin/libintl3.dll</strong> do katalogu bin w ścieżce, w której mamy zainstalowanego Gita.</li>
<li>Klonujemy repozytorium git flowa: <code>git clone –-recursive git://github.com/nvie/gitflow.git</code></li>
<li>Na koniec musimy w zwykłej systemowej konsoli wejść do nowo sklonowanego folderu <strong>gitflow/contrib</strong> i wywołać komendę: <code>msysgit-install.cmd &ldquo;&lt;ścieżka do Gita>&rdquo;</code></li>
</ul>


<p>Po wykonaniu tych kroków wszystkie komendy git flowa powinny być dostępne.</p>

<h2>Bonus dla ciekawskich</h2>

<p>Dla części z czytelników może być to nowość, ale git umożliwia nam definiowanie własnych komend. Aby to wykonać, należy utworzyć własny plik .exe, który będzie definiował naszą komendę. Nazwa pliku jednocześnie określa jego sposób wywołania, przkładowo plik <em>git-&lt;moja_komenda>.exe</em> będzie można wywołać za pomocą polecenia <code>git &lt;moja_komenda></code>. Zgodnie z przyjętą zasadą konstrukcji skryptów bashowych pierwsza linijka pliku powinna zawierać polecenie <code>#!/bin/sh</code>. Kolejne linie definiują polecenia, które chcemy zawrzeć. Na koniec, aby plik był widziany z poziomu konsoli gita, należy go umieścić w ścieżce <em>&lt;katalog_git>/libexec/git-core</em> &ndash; tam też możemy zobaczyć definicje wszystkich dotychczas dostępnych komend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knockout.js - spostrzeżenia]]></title>
    <link href="http://Horusiath.github.io/blog/2013/03/09/knockoutjs-spostrzezenia/"/>
    <updated>2013-03-09T12:25:00+01:00</updated>
    <id>http://Horusiath.github.io/blog/2013/03/09/knockoutjs-spostrzezenia</id>
    <content type="html"><![CDATA[<p>Ponieważ z <a href="http://knockoutjs.com/">knockout.js</a> mam do czynienia od dłuższego czasu (dokładnie od wersji 1.0 ;) ), postanowiłem podzielić się moimi spostrzeżeniami ze tymi, którzy chcą wykorzystać ten framework w swojej pracy, jak również osobami które już go stosują oraz generalnie wszystkim zainteresowanym w pisaniu ustrukturyzowanych skryptów JS. Ale zacznijmy od początku.</p>

<h2>Czym jest Knockout.js?</h2>

<p>Jest to rozbudowany, javascriptowy framework MVVM umożliwiający tworzenie bogatych aplikacji internetowych. W przeciwieństwie do tradycyjnego podejścia tzn. bindowania ASP&#8217;owych modeli &ndash; po stronie serwera &ndash; za pośrednictwem tagów <code><input></code> osadzonych w formularzach HTML, umożliwia on nam odwzorowanie na identyczny obiekt JSON po stronie klienta. Pozwala też na dual-binding tego modelu z fragmentami strony wyświetlanej użytkownikowi. Oznacza to, że każda zmiana wykonana na zbindowanym tagu htmlowym spowoduje natychmiastowe zaktualizowanie modelu zachowanego w przeglądarce i vice versa &ndash; każda zmiana pola należącego do obiektu spowoduje update na powiązanych fragmentach strony. Wszystko to w czasie rzeczywistym, w deklaratywny sposób.</p>

<p>Tyle w kwestii definicji dla ludzi nie zaznajomionych z tym podejściem. Osoby lepiej zorientowane w zagadnieniach frontendowych aplikacji WWW zapewne znają już tą bibliotekę podobnie jak alternatywy wykorzystywane w tym środowisku. Poniżej postaram się przedstawić parę własnych przemyśleń na temat tej biblioteki, zaczynając od tych związanych z sytuacjami, w których warto jej użyć, a kiedy lepiej sobie darować.</p>

<p>Przypadki, kiedy powinniśmy się wstrzymać z użyciem Knockout.js:</p>

<ul>
<li>Single Page Applications &ndash; wiem, że Microsoft promuje tą bibliotekę jako własnego kandydata do roli frameworka SPA. Prawda jest jednak bolesna &ndash; Knockout nie posiada wbudowanych mechanizmów niezbędnych do tego typu zadań. Mowa tu przede wszystkim o mechanizmie routingu/nawigacji pomiędzy widokami oraz komunikacji z serwerem/metodach do zapisywania i synchronizacji danych. Nie znaczy to oczywiście, że budowa takich rozwiązań jest niemożliwa. Uważam po prostu, że w takich przypadkach lepiej skorzystać z innych bibliotek, lepiej przystosowanych do takich zadań np. <a href="http://angularjs.org/">AngularJS</a>.</li>
<li>Standardowe widoki CRUD &ndash; jeżeli planujesz budowę standardowych ekranów, które nie muszą zachowywać skomplikowanych zależności pomiędzy obiektami-modelami, lub twoje widoki mapują się z tabelami w bazie w relacjach 1 do 1, wtedy powiedzmy sobie jasno &ndash; Knockout jest tobie nie potrzebny. Nie wytaczaj działa na komara.</li>
<li>Szablony po stronie klienta &ndash; o ile mechanizm deklaratywnych zależności umożliwia wykorzystanie Knockouta do takich zastosowań, to w praktyce dodatkowy narzut związany z jego użyciem jest niewspółmierny do korzyści. Jeżeli nie potrzebujesz niczego ponad mechanizm szablonowania, proponuję zajrzeć na <a href="http://garann.github.com/template-chooser/">http://garann.github.com/template-chooser/</a>&ndash; ta strona pomoże ci ustalić bibliotekę właściwą do twoich potrzeb.</li>
</ul>


<p>Kiedy Knockout może ci się przydać:</p>

<ul>
<li>Prezentacja danych w modelu <a href="http://martinfowler.com/bliki/CQRS.html">CQRS</a> &ndash; a więc kiedy wymagania sprawiają, że prosty CRUD z jQuery do ustawiania widoczności elementów to za mało. Jeżeli musisz na jednej stronie przedstawić skomplikowane relacje pomiędzy obiektami-modelami, o wiele łatwiej będzie, jeżeli zachowasz te zależności po stronie klienta.</li>
<li>Semi-SPA &ndash; czasami zdarza się, że aplikacja składa się z wielu prostych ekranów konfiguracyjnych, umożliwiających definiowanie różnych ustawień, oraz pojedynczych bogatych stron, które zawierają skomplikowane mechanizmy wyświetlania i manipulowania danymi. W takich przypadkach Knockout sprawdza się doskonale, ponieważ upraszcza sterowanie logiką takich widoków, zaś one same nie wymagają stosowania mechanizmów, których ta biblioteka nie zapewnia (a których część opisałem wyżej).</li>
</ul>


<p>Mam przyjemność wykorzystywać ten framework również na codzień w pracy od dłuższego czasu. Dzięki temu udało mi się wykonać kilka mniej lub bardziej oczywistych spostrzeżeń na temat błędów popełnianych przez programistów (w tym mnie ;) ) pracujących z Knockoutem oraz wzrocem MV* w przeglądarce, jak również rad których mógłbym udzielić osobom które zaczynają z nim swoją zabawę. Oto niektóre z nich.</p>

<h2>Myśl kategoriami aplikacji</h2>

<p>Jest to chyba najtrudniejsza lekcja. Nieraz logika wykonywana po stronie klienta sięga setek &ndash; czasami tysięcy &ndash; linii kodu, który dodatkowo może zachowywać się różnie w zależności od tego, na jakiej przeglądarce go odpalimy. Utrzymanie całości jest trudne (nieodzowne jest tu credo: <em>it&rsquo;s fucking javascript</em>;) ), stąd też musisz nauczyć się nadawać takim skryptom odpowiednią strukturę. Bardzo przydaje się tutaj wiedza z zakresu budowy aplikacji desktopowych opartych o MVVM &ndash; Knockout ma z tym podejściem wiele wspólnego.</p>

<p>Podobnie jak w przypadku Single Page Applications oraz innych aplikacji opartych o MVVM powinieneś z góry zastanowić się nad rozwiązaniem kilku kwestii. Na &ldquo;lżejszych&rdquo; stronach mogą one pozostać dość rozmyte, lecz wraz ze wzrostem bazy twojego kodu powinny one ulegać coraz wyraźniejszej separacji i wyspecjalizowaniu.</p>

<h2>Sposób komunikacji z serwerem</h2>

<p>Musisz określić, w jaki sposób twoja aplikacja będzie się komunikować z serwerem. Czy będzie to standardowy jQuery ajax, może coś bardziej zaawansowanego (np. <a href="http://amplifyjs.com/">Amplify.js</a>), a może warunki pozwalają na organizację połączenia po WebSockets. Niezależnie od tego co wybierzesz, warto zastosować kilka dobrych praktyk.</p>

<p>Po pierwsze nie zaszywaj kodu wywołań do serwera w sposób nierozerwalny. Przekaż obiekt służący do komunikacji z serwerem jako parametr do konstruktora ViewModelu, który takiej komunikacji wymaga. Nawet prosta konstrukcja typu</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ViewModel</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ajax</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ajaxHandler</span> <span class="o">=</span> <span class="nx">ajax</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ViewModel</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>sprawia, że w razie potrzeby będziesz mógł mniej boleśnie wymienić ten obiekt na inny.</p>

<p>Kolejnym krokiem jest opakowanie używanej biblioteki w obiekt-adapter &ndash; w ten sposób unikniesz trwałego wiązania aplikacji z jednym frameworkiem. Będziesz miał dowolność wyboru oraz prostego rozszerzenia używanego rozwiązania o metody/wzorce, których faktycznie potrzebujesz. Bardzo ważnym elementem tego podejścia jest również możliwość trwałego opakowania wywołań do konkretnych adresów w bardziej przejrzyste i czytelne (oraz łatwiejsze w przyszłym rozwoju) metody. Sądzę, że takie wywołanie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">resource</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">Person</span><span class="p">);</span>  <span class="c1">// 0 twardych zależności</span>
</span></code></pre></td></tr></table></div></figure>


<p>jest prostsze z punktu widzenia przyszłego rozwoju i prostoty debugowania kodu niż:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/some/url&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">model</span><span class="o">:</span><span class="nx">ko</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">Person</span><span class="p">)});</span> <span class="c1">// 2 twarde zależności: jQuery, knockout</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wraz ze wzrostem wymagań dobrą opcją jest dodanie do takiej komunikacji bardziej rozwiniętych wzorców typu Publish/Subscribe, które ułatwią pracę z kodem w przyszłości.</p>

<h2>Cykl życia strony i obiektów</h2>

<p>Jest to dobra praktyka, ponieważ mechanizm ten jest w Knockoutcie dość ubogi. Warto jest przemyśleć, jakie typy zdarzeń mogą okazać się przydatne w trakcie pracy ze stroną. Czasem możesz potrzebować podpiąć się z własnymi funkcjami w konkretnych momentach życia strony, np. tuż przed/po wywołaniu polecenia bindowania danych (<code>ko.applyBindings</code>), czy też w momencie dołączenia nowej właściwości itp. Dobrą praktyką jest też zdefiniowanie funkcji-inicjalizatora dla całego mechanizmu Knockouta oraz funkcji, w której możesz opisać całą potrzebną konfigurację w jednym miejscu.</p>

<h2>View modele &ndash; portlety i kontener aplikacji</h2>

<p>Dobrą radą na początek jest przygotowanie pojedyńczego ViewModelu, który nie służy zasadniczo samemu przechowywaniu obserwowanych właściwości, lecz pełni rolę kontenera lub głównego obiektu aplikacji. Dlaczego? Po pierwsze Knockout zasadniczo nie umożliwia generowania wielu VMów-korzeni dla pojedyńczej strony HTML. Po drugie, działa tutaj analogia do MVVM w aplikacjach desktopowych. Pojedyńczy widok &ndash; stronę prezentowaną użytkownikowi &ndash; z reguły da się podzielić na szereg niezależnych fragmentów (portletów), z których każdy jest zarządzany przez inny ViewModel. Zapewnia to właściwą separację bardziej złożonego problemu, co znacznie ułatwia ogarnięcie całej logiki znajdującej się na stronie.</p>

<p>Moja rada &ndash; nawet kiedy nie planujesz nadzwyczaj bogatej logiki na stronie, stwórz co najmniej jeden view model pełniący rolę rdzenia. W nim zdefiniuj pozostałe view modele, które będą służyły do bindowania właściwych danych. Żadna obserwowalna wartość wysyłana na serwer nie powinna być bezpośrednio powiązana z korzeniem. Nie kosztuje to wiele pracy, a w stuacji, kiedy twoja strona w przyszłości będzie ewoluować i rozrastać się o kolejne podwidoki/portlety, dodanie kolejnych VMów nie będzie stanowić problemu.</p>

<h2>Utrzymaj separację Widoków od ViewModelu</h2>

<p>Częstym błędem popełnianym na początku przez programistów zaczynających swoją przygodę z Knockoutem, jest wykonywanie operacji na drzewie DOM wewnątrz logiki ViewModeli. Jest to poważny błąd. Zastanów się: czy tworząc akcję kontrolera używasz jej do generowania HTMLa, który potem osadzasz na stronie?</p>

<p>Modele MVVM i MVC nie bez powodu zapewniają separację pomiędzy widokami, a pozostałymi elementami aplikacji. W przypadku Knockout.js rolę widoku stanowi bezpośrednio strona HTML wzbogacona o atrybuty <strong>data-bind</strong>, wewnątrz których definiujemy pożądane wiązania. Jeżeli z kolei czujesz, że dostępne bindingi nie spełniają twoich potrzeb, pamiętaj że zawsze możesz zdefiniować własne.</p>

<h2>Luźne zależności pomiędzy modułami w aplikacji</h2>

<p>Pamiętaj, że zmodularyzowane aplikacje są łatwiejsze zarówno w utrzymywaniu jak i późniejszym rozwoju. Łatwiej jest także je debugować i testować. Z punktu widzenia programisty Javascript wzorzec Dependency Injection ma jeszcze jedną zaletę. Ponieważ unikasz w ten sposób odwoływania się do funkcji globalnych umieszczonych w wyższych partiach scope chain (więcej dowiesz się <a href="http://www.slideshare.net/nzakas/speed-up-your-javascript">tutaj</a>), twoja aplikacja staje się odrobinę szybsza.</p>

<p>Unikaj wywoływania w kodzie swoich funkcji/metod różnego typu obiektów globalnych takich jak window, document, czy też obiektów-modułów do innych bibliotek np. jQuery. Zamiast tego przekazuj je jako paramtery do obiektów, które je wykorzystują.</p>

<p>Innym &ndash; na pewno wartościowym &ndash; wsparciem, które może przydać się osobom nie przywykłym do pułapek języków dynamicznie typowanych, są języki kompilowane do Javascriptu, takie jak <a href="http://www.typescriptlang.org/" title="">TypeScript</a> czy <a href="http://www.dartlang.org/">Dart</a>.</p>

<h2>Testy</h2>

<p>Testy jednostkowe są przydatne w każdej większej aplikacji i logika po stronie klienta nie stanowi tutaj wyjątku. Im dalej rozwijasz swoją aplikację i im więcej operacji wykonywanych jest w przeglądarce użytkownika, tym bardziej prawdopodobne, że trafisz na moment w którym testy jednostkowe staną się nieocenione.</p>

<p>W tym celu należy przedtem zapewnić &ldquo;testowalność&rdquo; swojego kodu. Wskazówki opisane przeze mnie powyżej (zwłaszcza te dotyczące modularyzacji i luźnych powiązań) dotyczą również tego zagadnienia. Mimo że Knockout nie zapewnia wbudowanych klas ułatwiających testowanie (AngularJS jest pomocny również pod tym względem), nie jest to dużym problemem, ponieważ Javascript jest językiem bardzo elastycznym i rozszerzalnym, zatem pisanie mocków nie stanowi tutaj problemu.</p>

<p>Co do wyboru frameworka testowego jest to kwestia własnych preferencji. Jedni wybiorą polecany przez M$ <a href="http://qunitjs.com/">QUnit</a> wspierający programowanie TDD. Dla programistów .Net jest to tradycyjna dobrze znana ścieżka. Inni (w tym ja ;) ) wolą metodykę BDD i czytelność, jaką oferują biblioteki takie jak <a href="http://pivotal.github.com/jasmine/">Jasmine</a>. Dlaczego preferuję właśnie to drugie podejście? Dlatego że łatwiej definiować testy w kategoriach konkretnych zachowań, jakich oczekujemy po działaniu naszego kodu, niż operacji, które nie zawsze muszą jasno definiować to, co faktycznie chcemy osiągnąć.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript a wzorce projektowe]]></title>
    <link href="http://Horusiath.github.io/blog/2013/02/23/javascript-wzorce-projektowe/"/>
    <updated>2013-02-23T19:01:00+01:00</updated>
    <id>http://Horusiath.github.io/blog/2013/02/23/javascript-wzorce-projektowe</id>
    <content type="html"><![CDATA[<p>Założę się, że wiele osób czytając ten tytuł puknie się w głowę. I owszem w wielu sytuacjach wzorce nie są niezbędne do tworzenia przejrzystych i dobrze rozwijalnych skryptów. Do czasu. Dokładnie do momentu gdy nasz skrypt zaczyna mieć więcej niż kilkadziesiąt linijek.</p>

<p>W zależności od języka programowania, pisany przez nas kod może mieć mniejszą lub większą przejrzystość. Niektóre języki takie jak Haskel, są z natury bardzo klarowne i skupiają się na istocie rzeczy. Inne, jak właśnie Javascript, dają programiście olbrzymie możliwość zrobienia czegoś na pierdyliard sposobów, co nie oznacza, że każdy sposób jest poprawny. Jakby tego było mało, javascriptowe JITy są wstanie przełknąć nawet bardzo niezdarny kod. Dlatego właśnie dyscyplina samego programisty oraz stosowanie wzorców jest tym bardziej istotne.</p>

<p>O tradycyjnych wzorcach &ndash; strategiach, obserwatorach etc. &ndash; napisano całą masę artykułów. Dlatego też poniżej postaram się przedstawić kilka mniej znanych, skupiając się szczególnie na tych, które są istotne z punktu widzenia JS, przez wzgląd na możliwości jakie daje oraz brakujących konstrukcji dostępnych w innych językach, których tutaj brakuje &ndash; w gruncie rzeczy czym są wzorce projektowe, jeżeli nie powszechnymi sposobami na obejście braków odpowiednich konstruktów w danym języku programowania?</p>

<h2>Funkcje natychmiastowe</h2>

<p>Mechanizm funkcji natychmiastowych (<strong>immediate functions</strong>) jest jedną z podstawowych sztuczek językowych wykorzystywanych w Javascriptcie. Ponieważ wiedza ta stanowi fundament innych wzorców, przedstawię go poniżej.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">immediateValue</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// wykonujemy jakąś operację i zwracamy wartosć</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// określamy zewnętrzne obiekty, które wywołujemy wewnątrz funkcji</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// wykonujemy jakąś operację</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">module</span><span class="p">;</span>
</span><span class='line'><span class="p">})(</span><span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jak widzimy całość polega na jednoczesnym zdefiniowaniu funkcji i jej wykonaniu. Jakie są zalety tego podejścia?:</p>

<ul>
<li>Możemy w ten sposób budować moduły &ndash; ponieważ zawartość funkcji powoduje stworzenie nowego zakresu (scope &ndash; chociaż z tym ze względów wydajnościowych nie należy przeginać), wszystkie zmienne lokalne użyte w funkcji-module nie są widoczne spoza niej, dopóki programista jawnie nie określi inaczej.</li>
<li>Przekazując parametry do takiej funkcji możemy jawnie określić zależności pomiędzy operacjami/obiektami używanymi wewnątrz funkcji ze światem zewnętrznym.</li>
</ul>


<h2>Modularyzacja</h2>

<p>Jest to dość często poruszany problem (sam nieraz o nim wspominałem), ponieważ JS jako tako sam nie umożliwia definiowania pakietów ani przestrzeni nazw. Stąd też pierwszym zaprezentowanym przeze mnie wzorcem będzie <strong>namespace</strong>. Ponieważ przykładowy kod umieściłem i opisałem w jednym z poprzednich <a href="http://horusiath.blogspot.com/2012/09/javascript-porady-i-uwagi.html">postów</a>, gwoli przypomnienia umieszczę tutaj przykładowy kod takiego rozwiązania.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">namespace</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">parent</span> <span class="o">=</span> <span class="nx">root</span> <span class="o">||</span> <span class="nb">window</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">modules</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">modules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">modules</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">parent</span><span class="p">[</span><span class="nx">module</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">parent</span><span class="p">[</span><span class="nx">module</span><span class="p">]</span> <span class="o">||</span> <span class="p">{});</span>
</span><span class='line'>      <span class="nx">parent</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">[</span><span class="nx">module</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">parent</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Cache&#8217;owanie funkcji</h2>

<p>Ze względu na silniki starszych przeglądarek i chęć ograniczenia skomplikowanych operacji wiele bibliotek oferuje mniej lub bardziej wyrafinowane mechanizmy służące cache&#8217;owaniu danych. Javascript przychodzi tutaj z pomocą, pozwalając na zastosowanie tej techniki niemal dla dowolnej funkcji. Mowa tutaj o wzorcu <strong>memoization</strong>. Wykorzystuje on dwa podstawowe fakty dotyczące tego języka:</p>

<ol>
<li>Każda funkcja jest jednocześnie pełnoprawnym obiektem.</li>
<li>Każdy obiekt może pełnić funkcje słownika &ndash; a co za tym idzie można wykorzystać go do dynamicznego przydzielania nowych właściwości i hashy.</li>
</ol>


<p>Poniższy kod przedstawia najprostszą implementację tego zachowania:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">memoizedFunction</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// parametr {value} stanowi jednocześnie klucz w naszym cache&#39;u</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// sprawdzmy, czy parametr został wcześniej zapamiętany</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">_cache</span><span class="p">[</span><span class="nx">value</span><span class="p">]){</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">_cache</span><span class="p">[</span><span class="nx">value</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="c1">// zapamiętywanie wywołania funkcji</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">doSomething</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">fn</span><span class="p">.</span><span class="nx">_cache</span><span class="p">[</span><span class="nx">value</span><span class="p">]</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fn</span><span class="p">.</span><span class="nx">_cache</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fn</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Należy zwrócić uwagę na fakt, że parametr przekazywany do funkcji w tej implementacji stanowi jednocześnie wartość cache&#8217;owanego klucza, a sam wzorzec musi implementować funkcje deteministyczne (tzn. takie które dla tego samego parametru wejściowego zwracają zawsze tą samą wartość/wykonują tę samą operacje). Stąd też dobrze, jeżeli maksymalna możliwa liczba przekazywanych parametrów jest znana &ndash; w sytuacjach skrajnych mogłoby dojść do tego, że cache zacząłby zajmować ogromną ilość pamięci. W takim wypadku trzeba dodatkowo zaimplementować dodatkowo mechanizm odśmiecania lub okresowego czyszczenia cache&#8217;u.</p>

<p>Prawidłowe działanie funkcji w dużej mierze zależy od typu przekazywanego parametru &ndash; ze względu na to, że Javascript bywa dość nieprzewidywalny, najlepiej jest trzymać się typów prostych: String, Number, Boolean. W praktyce jednak wszystko to jednak zależy od twojej znajomości tricków i pułapek tego języka.</p>

<p>Gdzie przydaje się powyższy wzorzec? Kilka przykładów:</p>

<ul>
<li>W wywołaniach do serwera np. jeżeli dla podanego adresu URL zwracana wartość jest stała, możemy użyć go w postaci klucza i zapamiętać zwracaną wartość. W ten sposób zmniejszymy czas i ilość requestów na serwer potrzebnych do skończenia danej operacji.</li>
<li>Inne funkcje o stałych kluczach, ale jednocześnie wykonujące złożone obliczenia np. w mechanizmach bindowania danych do modelu DOM przeglądarki.</li>
</ul>


<h2>Dependency Injection</h2>

<p>Pojęcie to jest ostatnio dość często używane, również ze względu na rosnącą popularność frameworków MVC. W Javascriptcie zostało ono użyte po raz pierwszy w dużej skali wraz z nadejściem <a href="http://angularjs.org/">AngularJS</a>. Jednakże, jeżeli chcielibyśmy, możemy zaimplementować kontener <strong>Inversion of Control</strong> dla własnych potrzeb.</p>

<p>W pierwszej kolejności zdefiniujmy kontener IoC.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// kontener IoC</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">DependencyResolver</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// regex użyty do wyciągania nazw zależności z konstruktora</span>
</span><span class='line'>  <span class="nx">ARG_REGEX</span> <span class="o">=</span> <span class="sr">/^function\s*[^\(]*\(\s*([^\)]*)\)/m</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">dependencies</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// funkcja rejestrująca typ w kontenerze</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">register</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">type</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">dependencies</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// zwraca instancję obiektu identyfikowanego po podanym kluczu </span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resolve</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">){</span> <span class="p">...</span> <span class="p">};</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// rozwiązujemy podane zależności podane w postaci listy kluczy</span>
</span><span class='line'>  <span class="c1">// dla dependency resolvera do postaci tablicy gotowych obiektów</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">resolveDependencies</span><span class="p">(</span><span class="nx">args</span><span class="p">){</span> <span class="p">...</span> <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Klasa&rdquo; ta udostępnia dwie metody:</p>

<ul>
<li><code>register(key, type)</code> &ndash; rejestruje podaną wartość/funkcję konstruktora pod podanym kluczem.</li>
<li><code>resolve(key)</code> &ndash; tworzy typ zgodnie z zarejestrowaną wcześniej nazwą.</li>
</ul>


<p>Niestety javascript nie przechowuje informacji na temat typów parametrów pobieranych przez funkcję. Stąd też twórcy AngularJS postanowili zbudować następującą konwencję &ndash; w momencie, gdy przy próbie utworzenia obiektu pojawiaja się problem z określeniem typu argumentów przekazywanych do konstruktora, przyjmuje się, że nazwy parametrów są kluczami dla wartosci zarejestrowanych w kontenerze IoC. Jak to wygląda w praktyce? Ilustruje to następujący kod:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// budujemy kontener</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">resolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DependencyResolver</span><span class="p">();</span>
</span><span class='line'><span class="nx">resolver</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s1">&#39;valueA&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// rejestrujemy 1 dla klucza &#39;valueA&#39;</span>
</span><span class='line'><span class="nx">resolver</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s1">&#39;valueB&#39;</span><span class="p">,</span> <span class="nx">MyClass1</span><span class="p">);</span> <span class="c1">// rejestrujemy &quot;klasę&quot; dla klucza &#39;valueB&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// tworzymy nową &quot;klasę&quot; i rejestrujemy ją jako &#39;valueC&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MyClass2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">valueA</span><span class="p">,</span> <span class="nx">valueB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// kontener wygeneruje opowiednie wartosci sugerując się nazwami parametrów</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">resolver</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s1">&#39;valueC&#39;</span><span class="p">,</span> <span class="nx">MyClass2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// tworzymy obiekt</span>
</span><span class='line'><span class="nx">resolver</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;valueC&#39;</span><span class="p">);</span> <span class="c1">// profit ;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ciało metody resolve przedstawia się w takim wypadku następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">resolve</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">dependencies</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// jeżeli zarejestrowany typ jest funkcją/konstruktorem</span>
</span><span class='line'>  <span class="c1">// musimy rozwiązać listę parametrów podanych do dokonstruktora</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">){</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// wyciągamy listę wartości przyjmowanych przez konstruktor</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">ARG_REGEX</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">type</span><span class="p">.</span><span class="nx">toString</span><span class="p">())[</span><span class="mi">1</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// zamieniamy je na właściwe obiekty</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">resolvedArgs</span> <span class="o">=</span> <span class="nx">resolveDependencies</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// tworzymy nową instancję danego typu</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">type</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">type</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">instance</span><span class="p">,</span> <span class="nx">resolvedArgs</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">instance</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// jeżeli typ jest typem prostym wystarczy go zwrócić</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Natomiast brakujące ciało metody resolveDependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">resolveDependencies</span><span class="p">(</span><span class="nx">args</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">resolvedArgs</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">dependency</span> <span class="o">=</span> <span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">trim</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">dependency</span> <span class="o">!==</span> <span class="s1">&#39;&#39;</span><span class="p">){</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">resolved</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">dependency</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">resolvedArgs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">resolved</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">resolvedArgs</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oczywiście powyższy kod nie określa kwestii czasu życia obiektu, którą kontenery IoC przeważnie rozwiązują. Jednakże jaki problem tkwi w powyższym rozwiązaniu? Otóż w momencie minimalizacji danego skryptu cała nasza wiedza o nazewnictwie parametrów funkcji znika (zostają one zastąpione krótkimi &ndash; z reguły jednoliterowymi aliasami). Niestety ale nie da się tego rozwiązać w elegancki sposób. W przypadku AngularJS zdefiniowana została specjalna właściwość $inject, którą dodajemy własnoręcznie do danej klasy, a która definiuje tablicę kluczy-parametrów, dzięki którym możliwe jest rozwiązanie zależności przez kontener. W takim wypadku w powyższej implementacji wystarczy dodać drobne usprawnienie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">resolve</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">){</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">type</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">||</span> <span class="nx">ARG_REGEX</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">type</span><span class="p">.</span><span class="nx">toString</span><span class="p">())[</span><span class="mi">1</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>, natomiast, w samej zdefiniowanej klasie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyClass</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">valueA</span><span class="p">,</span> <span class="nx">valueB</span><span class="p">){</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="nx">MyClass</span><span class="p">.</span><span class="nx">$inject</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;valueA&#39;</span><span class="p">,</span> <span class="s1">&#39;valueB&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dlaczego ten mechanizm się przydaje? Odpowiedź jest dokładnie taka sama jak w przypadku DI po stronie serwera: modularyzacja projektu, spójny sposób i kontrola nad konstrukcją obiektów. Całość jest wprost nieoceniona, kiedy po stronie klienta wykonywany jest bardziej zaawansowany wycinek logiki. A do tego te wsparcie dla testów jednostkowych.</p>

<p>P.S.: Jestem zdania, że w każdym projekcie z większą ilością Javascriptu testy jednostkowe są nieocenione. Po pierwsze w tym języku wyjątkowo łatwo o błędy i niezdarny kod, a TDD oraz BDD rozwiązują oba te problemy. Po drugie jesteśmy po stronie klienta. Chcesz sprawdzić czy logika do kontrolek User Interface i wyświetlanie strony działa prawidłowo? Gratulacje &ndash; jesteś po właściwej stronie kabla.</p>

<h2>Dziedziczenie</h2>

<p>Pomimo, że Javascript jest językiem obiektowym, nie definiuje jednak mechanizmu dziedziczenia w sposób znany nam z innych języków. Na szczęście jego możliwości pozwalają nam na wykonanie takiego mechanizmu w postaci wzorca <strong>extend</strong> (<em>powered by CoffeScript ;)</em> ).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">extend</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">childPrototype</span><span class="p">,</span> <span class="nx">superPrototype</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// dziedziczenie składowych</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">property</span> <span class="k">in</span> <span class="nx">superPrototype</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// iterujemy po wszystkich składowych rodzica</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">superPrototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">property</span><span class="p">)){</span>
</span><span class='line'>          <span class="nx">childPrototype</span><span class="p">[</span><span class="nx">property</span><span class="p">]</span> <span class="o">=</span> <span class="nx">superPrototype</span><span class="p">[</span><span class="nx">property</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// dziedziczenie konstruktora</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">ctor</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">childPrototype</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">ctor</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">superPrototype</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">childPrototype</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ctor</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// definiujemy dostęp do &quot;klasy bazowej&quot;</span>
</span><span class='line'>  <span class="nx">childPrototype</span><span class="p">.</span><span class="nx">__super__</span> <span class="o">=</span> <span class="nx">superPrototype</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">childPrototype</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Niestety, jeżeli chcemy mieć dostęp do &ldquo;wirtualizacji&rdquo; metod w klasach pochodnych, musimy to wykonywać w dość krzywy sposób. Przykład poniżej.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// klasa bazowa</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">Parent</span><span class="p">(</span><span class="nx">firstName</span><span class="p">){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// definiujemy &quot;wirtualną&quot; metodę</span>
</span><span class='line'>  <span class="nx">Parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">show</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;Base: &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Parent</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// klasa pochodna</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Child</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">BaseType</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">extend</span><span class="p">(</span><span class="nx">Child</span><span class="p">,</span> <span class="nx">BaseType</span><span class="p">);</span> <span class="c1">// określamy warunki dziedziczenia</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">function</span> <span class="nx">Child</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// wywołujemy konstruktor z klasy bazowej</span>
</span><span class='line'>      <span class="nx">Child</span><span class="p">.</span><span class="nx">__super__</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">firstName</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// &quot;nadpisujemy&quot; metodę z klasy bazowej</span>
</span><span class='line'>  <span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">show</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">// wewnątrz nadpisanej metody wywołujemy jej bazową postać</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">baseMessage</span> <span class="o">=</span> <span class="nx">Child</span><span class="p">.</span><span class="nx">__super__</span><span class="p">.</span><span class="nx">show</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;Inherited: &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">+</span> <span class="s2">&quot; with &quot;</span> <span class="o">+</span> <span class="nx">baseMessage</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Child</span><span class="p">;</span>
</span><span class='line'><span class="p">})(</span><span class="nx">Parent</span><span class="p">);</span> <span class="c1">// przekazujemy klasę bazową mechanizmem funkcji natychmiastowej</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jak widać, nie jest to technika przejrzysta, głównie ze względu na obejścia, jakie trzeba wykonać, aby uzyskać dostęp do wywołań metod nadpisywanych z klas bazowych.</p>

<p>Kiedy jest to przydatne? Szczerze umieściłem to jako ciekawostkę, ponieważ o ile o korzyściach dziedziczenia i wirtualizacji wie chyba każdy, kto miał do czynienia z programowaniem obiektowym, to forma, w jakiej jest to podane w Javascriptcie może okazać się ciężka do przełknięcia. Z tego powodu polecam tutaj języki kompilowane do Javascriptu np. CoffeeScript lub TypeScript, które rozwiązują ten problem za nas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nowe technologie - tak czy nie?]]></title>
    <link href="http://Horusiath.github.io/blog/2013/02/19/nowe-technologie-tak-czy-nie/"/>
    <updated>2013-02-19T18:54:00+01:00</updated>
    <id>http://Horusiath.github.io/blog/2013/02/19/nowe-technologie-tak-czy-nie</id>
    <content type="html"><![CDATA[<p>Jedną z ciekawszych cech web developerki jest mnogość dostępnych na tym polu rozwiązań i technologii. Dlaczego uważam, że to dobrze? Poniekąd dlatego, że w ten sposób programista może przezwyciężyć spadek motywacji i nudę związaną z wykonywaniem kolejnego <em>wielkiego projektu w młodym, dynamicznym zespole</em>. Stwarza również pole do popisu i ciągłego rozwoju, pokazuje różne sposoby na zrobienie tego samego lepiej i szybciej.</p>

<p>Niestety z punktu widzenia osób odpowiedzialnych za dostarczenie projektu klientowi nowa technologia w projekcie to nieprzewidywalna zmienna. Kierownik projektu otrzymując propozycję wykorzystania czegoś nowego musi wziąć pod uwagę wiele niewiadomych. Kilka z tych które wpadły mi do głowy to:</div><div><ul><li>Czy w ogóle tego potrzebujemy?</li><li>Czy jest to dobrze udokumentowane? O jak dojrzałym projekcie mówimy? Jak wygląda sprawa ze wsparciem ze strony społeczności, producenta etc.?</li><li>Czy twórca nie porzuci wsparcia dla bieżącej wersji zostawiając nas na lodzie?</li><li>Ile czasu zajmie teamowi przyswojenie tej technologii? A skoro już ją ma poznać, to czy będziemy mogli wykorzystać tą wiedzę w innych projektach?</li><li>Jak wykorzystanie tej technologii wpłynie na opóźnienie/przyspieszenie wykonania projektu na etapie startowym, głównym, czy końcowym?</li><li>Jak wpłynie to na wzrost/spadek końcowego kosztu projektu, koszt jego utrzymania i modernizacji?</li></ul><div>&nbsp; &nbsp; Każdy z tych czynników może pomóc w osiągnięciu końcowego efektu, stworzyć aplikację szybciej, poprawić jej wydajność, zwiększyć stopień modularności kodu, a przez to pomóc w jego późniejszym rozwoju. Z drugiej strony zastosowanie (lub nieumiejętne zastosowanie) danego frameworka może odbić się echem w każdej fazie życia projektu, tym głośniejszym im dłużej on będzie budowany, rozwijany i eksploatowany przez klienta.</p>

<p>Nie znaczy to jednak, że powinniśmy się wystrzegać nowości. Wręcz przeciwnie. Jest to swego rodzaju inwestycja, która przy pewnym wkładzie (tzw. &ldquo;próg wejścia&rdquo;) nieraz procentuje w przyszłości. W jaki sposób dobierać jednak technologie, żeby w dalszej perspektywie czasu zwróciły się one w naszym projekcie? Postanowiłem spisać swoje spostrzeżenia na ten temat.</p>

<h2>Nie za wiele na raz</h2>

<p>Podchodząc do nowego projektu nie raz chciałoby się dać ponieść entuzjazmowi i zacząć go z całym stosem nowych bibliotek, czekających na poznanie. Problem pojawia się, jeżeli rzeczywiście przegniemy. Przypomina to wtedy ruszanie samochodem bezpośrednio z 5 biegu. Mija miesiąc, dwa, trzy, a mimo wysiłków całego teamu robota stoi w miejscu. W efekcie morale pada pysk. To właśnie efekt skumulowanego okresu wdrażania się w nowe technologie.</p>

<p>Wdrażanie kolejnych nowości powinno wchodzić z rozwagą (najlepiej pojedynczo lub niewielkimi grupkami &ndash; wciąż możliwe jest dodawanie nowych rzeczy w trakcie rozwijania projektu), tak abyśmy nie stracili sprzed oczu ostatecznego celu naszej pracy. Prawda jest gorzka: u podstaw nie chodzi przecież o naszą naukę i samorozwój lecz o to, aby dostarczyć klientowi to czego potrzebuje.</p>

<h2>Kiedy warto?</h2>

<p>To dobre pytanie. Kiedy powinniśmy wprowadzać nowy framework do naszej domeny pracy? Opcji, które trzeba rozważyć jest wiele. Oprócz standardowych za i przeciw np. kwestie wydajnościowe, koszty eksploatacji czy przyspieszenie produkcji, uwzględniłbym również:</p>

<ul>
<li>&ldquo;Próg wejścia&rdquo; w nowy framework &ndash; jest to jedno z zasadniczych zagadnień do rozwiązania na samym starcie. Jeżeli próg jest mały, prawdopodobnie będziemy mogli szybko skończyć z nauką i przejść do właściwego wykorzystywania go w naszej aplikacji. Co jednak kiedy jest on duży? Tutaj warto wziąć pod uwagę kilka zmiennych:

<ul>
<li>Czas trwania projektu &ndash; jeżeli projekt będzie rozwijany latami, to nawet stosunkowo trudna w opanowaniu technologia nie wytworzy dużego długu czasowego.</li>
<li>Częstotliwość zmian w zespole &ndash; jak wiadomo, zespół nie zawsze jest kwestią stałą i nieraz może się zdarzyć, że kolejni członkowie będą przychodzić i odchodzić, zanim na dobre wdrożą się w nowe technologie. Dotyczy to również późniejszego utrzymywania projektu. W takim wypadku długi okres nauki również działa na naszą niekorzyść.</li>
<li>&ldquo;Reużywalność&rdquo; zdobytej wiedzy &ndash; czy poznana technologia będzie mogła być użyta później w innych projektach. Odpowiedź twierdząca pozwala to zredukować sprzeciw związany z argumentami zawartymi w poprzednim punkcie.</li>
</ul>
</li>
<li>&ldquo;Próg wyjścia&rdquo; z aplikacji &ndash; fakt, że z sukcesem wprowadziliśmy nową bibliotekę do projektu to nie koniec naszych zmagań. Budowa aplikacji z reguły wiąże się z faktem, że wymagania klienta zmieniają się dynamicznie w czasie. Przypomina to grę w szachy, w której nie widzimy całej szachownicy. Z tego powodu rozważenie wszystkich działań na kilka ruchów do przodu może sprawiać problem. Może się okazać, że w zaawansowanym stadium prac nad projektem klient życzy sobie nowej funkcjonalności lub zmiany istniejącej w sposób, który jest poza możliwościami naszej wspaniałej, nowo dodanej biblioteki. Z tego powodu w lepszej pozycji stoją rozwiązania kompleksowe, pozwalające programiście na dodawanie własnych pluginów, modułów oraz udostępniające otwarty kod.</li>
<li>Zaangażowanie zespołu- a więc czy ktoś w ogóle wykazuje chęci do poznania nowinek czy raczej woli trzymać się starych, znanych rozwiązań. Czy są chętni poznawać ją we własnym zakresie? Jest to głównie pytanie z kategorii: czy masz przyjemość pracować w <em>nerd teamie</em>? Trudno jest dodawać coś nowego, jeżeli będziesz jedyną osobą, która zamierza z tego korzystać.</li>
<li>Popularność &ndash; jak wiadomo im lepiej opisany w Internecie jest dany framework, tym lepiej dla potencjalnego developera. Fakt, że dużo osób korzysta z danego rozwiązania zwiększa szanse, że w razie problemów będziemy mogli znaleźć na nie odpowiedź zanim sami będziemy musieli zadać pytanie.</li>
<li>Wsparcie producenta &ndash; również support dla danej biblioteki ma tu znaczenie. W sytuacji kiedy nie znaleźliśmy rozwiązania sami, a na forach również nie ma nikogo kto do tej pory trafił na ten problem, pytanie do twórców jest ostatnią lub przed ostatnią (jeżeli mamy wgląd w kod źródłowy) rzeczą jaką możemy zrobić. Jak wiadomo w tej sytuacji najlepszy jest gwarantowany support (najczęściej płatny), niestety nawet on nie jest rzeczą pewną &ndash; przykład: swego czasu natrafiłem na błąd kontrolki DevExpressa, który mimo, że znany od 2009r. jest zgłoszony i opisany na oficjalnym forum wsparcia, do tej pory nie został rozwiązany.</li>
</ul>


<h2>Wnioski</h2>

<p>Niestety kwestia inwestowania w nowe technologie to złożony problem. Mimo, że często jest to opłacalne ryzyko, to czasem jednak niefortunny wybór może okazać się prawdziwą miną, której zarówno project manager (jako bezpośrednio odpowiedzialny za koszta i terminy), jaki i programiści (jako ci, na których spłynie całe powstałe w ten sposób gówno) w razie wybuchu wolą uniknąć.</p>

<p>Wyjściem pośrednim są tutaj oczywiście pet-projekty &ndash; aplikacje semi-testowe i takie, które nigdy nie wychodzą zasięgiem poza wewnętrzne systemy firmy, jednocześnie na tyle proste, aby służyć za pole treningowe dla programistów.</p>

<p>Myślę, że głównym rozwiązaniem jest tutaj umiejętność dostrzegania potencjalnych korzyści, szacowania ryzyka jak również wzajemnego zrozumienia każdej ze stron nawzajem. W gruncie rzeczy jest to temat otwarty i mimo, że ostateczna decyzja z reguły zostaje w rękach pojedynczych osób, powinien on być rozwiązywany poprzez otwartą wymianę poglądów (nawet w postaci 5-cio minutowej konferencji przez Skype) wszystkich osób zaangażowanych w proces wytwarzania oprogramowania.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET a wydajność]]></title>
    <link href="http://Horusiath.github.io/blog/2013/01/12/aspnet-wydajnosc/"/>
    <updated>2013-01-12T22:32:00+01:00</updated>
    <id>http://Horusiath.github.io/blog/2013/01/12/aspnet-wydajnosc</id>
    <content type="html"><![CDATA[<p>Pisząc aplikacje oparte o ASP.NET (+MVC) często korzystamy z wielu dodatkowych bibliotek/frameworków usprawniających naszą pracę. Czasem jednak zdarza się, że zatrzymujemy się zaczynamy zastanawiać, jaką cenę musimy zapłacić za wszystkie te dodatki? Poniżej postaram się przedstawić listę najczęstszych problemów oraz najlepsze biblioteki służące ich wydajnemu rozwiązaniu (uprzedzam, że wnioski mogą być dość zaskakujące ;) ).</p>

<h2>1. Object-Relational Mapping</h2>

<p>Na pierwszy ogień niech pójdą frameworki ORM. Jak nie ciężko się domyślić pod względem popularności triumfuje tutaj Entity Framework jako rozwiązanie promowane przez MS, zaś odrobinę z tyłu wydaje się być NHibernate. Jak to jednak wygląda, jeżeli wzięlibyśmy pod uwagę wydajność? Zaczynając od bardzo popularnego zestawienia <a href="http://ormeter.net/">ORM Battle</a>:</p>

<ul>
<li><a href="http://dataobjects.net/">DataObjects.NET</a> mogą poszczycić się najbardziej wydajną budową zapytań LINQ.</li>
<li><a href="http://bltoolkit.net/">Business Logic Toolkit</a> jest stawiany jako zwycięzca w kwestii ogólnej wydajności (operacje CRUD itp.).
-Pod względem zapytań LINQ wydajnosć <a href="http://nhforge.org/">NHibernate </a>jest skandaliczna &ndash; tutaj jednak należy się słowo wyjaśnienia, ponieważ framework ten posiada własny mechanizm generowania zapytań w locie (Criteria wraz z nakładką QueryOver), który oferuje znacznie lepszą wydajność oraz pozwala na więcej w stosunku do linq.</li>
</ul>


<p>Warto jednak zauważyć, że zestawienie to nie jest pełne, brakuje w nim powiem kilku ważnych bibliotek. Powołując się na kolejny benchmark wykonany przez <a href="http://servicestack.net/benchmarks/">ServiceStack</a> (ta nazwa powtórzy się tutaj jeszcze przy kilku okazjach), wysnuć można kilka innych wniosków:</p>

<ul>
<li>Narzut nakładany przez Entity Framework może wydłużyć czas wykonania zapytania nawet 13-krotnie! &ndash; (zakładam, że dla bardziej złożonych zapytań ta różnica zmniejsza się na korzyść EF) To ogromna przepaść nawet biorąc pod uwagę <a href="http://noamlewis.wordpress.com/2012/07/18/net-4-5-improves-orm-performance-across-the-chart/">usprawnienia</a> nałożone w .NET 4.5.</li>
<li>Zwycięstwo wydajności należy do <a href="http://code.google.com/p/dapper-dot-net/">Dappera</a> &ndash; jest to microframework ORM stworzony przez Stackoverflow na potrzeby wysoko wydajnego dostępu do bazy danych, wykorzystywanego w tym serwisie. Tuż za nim znalazł się z kolei <a href="https://github.com/ServiceStack/ServiceStack.OrmLite">ServiceStack.OrmLite</a> (należy jednak pamiętać, że są oni autorami tego benchmarku).</li>
</ul>


<p>Na czym więc polega sukces i droga do szybkości? Myślę, że główną rolę odgrywa tutaj prostota &ndash; zarówno EF jak i NHibernate oferują rozbudowane interfejsy do budowy zapytań (LINQ i QueryOver), własne języki pośrednie (NHibernate &ndash; HQL, Entity Framework &ndash; ESQL), mechanizmy zarządzania obiektami itp. <strong>BLT</strong>, <strong>Dapper</strong> i <strong>OrmLite </strong>stosują tutaj proste operacje z wykorzystaniem standardowych zapytań SQL, odrzucając wyższe warstwy abstrakcji i trzymając się blisko podstawowych mechanizmów komunikacji z bazą danych. Dodatkowo microframeworki obarczają programistę koniecznością ręcznego zarządzania relacjami oraz synchronizacji stanu danych pomiędzy encjami i bazą. To z kolei przenosi dług wydajnościowy na kod napisany przez programistę.</p>

<h2>2. Kontenery Inversion of Control</h2>

<p><em>Dependency Injection</em> to już standard, mimo że wciąż nie jest to mechanizm domyślny w ASP.NET. Zapewnienie luźnych wiązań określane jest jako dobra praktyka zarówno w MVC jak i MVVM (stosowanym przez liczne frameworki stosowane również w aplikacjach desktopowych oraz na urządzenia mobline). Opierając się na kilku (<a href="http://www.palmmedia.de/blog/2011/8/30/ioc-container-benchmark-performance-comparison">1</a>, <a href="http://www.iocbattle.com/">2</a>, <a href="http://servicestack.net/benchmarks/#highcharts-8">3</a>, <a href="http://philipm.at/2011/0808/">4</a>) testach można podjąć się złożenia kilku wniosków:</p>

<ol>
<li><a href="http://www.ninject.org/">NInject</a> (który notabene jest całkiem popularnym rozwiązaniem) wydajnościowo jest jednym z najsłabszych i najwolniejszych kontenerów.</li>
<li>Biblioteki promowane przez Microsoft &ndash; <a href="http://mef.codeplex.com/">MEF</a> oraz <a href="http://unity.codeplex.com/">Unity</a> &ndash; również nie prezentują porażającego poziomu. O ile Unity prezentuje się dość dobrze, to wciąż stanowi dość słabą konkurencję dla innych rozwiązań zawartych w zestawieniach.</li>
<li>Mimo tego, że powyższe benchmarki nie zawsze się uzupełniają, po odrobinie przeszukiwania sieci można w zasadzie określić, że wśród zwycięzców wydajności znajdują się: <a href="http://docs.structuremap.net/">StructureMap</a> oraz <a href="http://funq.codeplex.com/">Funq</a> (który z tego co mi wiadomo nie jest obecnie wspierany, co idzie zdecydowanie na jego niekorzyść, jednak stanowi część frameworka <em>ServiceStack</em>, jest również dostępny w postaci open source).</li>
</ol>


<h2>3. Serializacja</h2>

<p>Serializacja obiektów to dość szerokie zagadnienie, ponieważ możemy mieć na myśli różne formaty (xml, json czy dane binarne), zaś każdy z nich znajduje zastosowanie w innych sytuacjach i ma inną specyfikę. Opierając się na różnych źródłach (<a href="http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.100000-times.2010-08-17.html">1</a>, <a href="http://servicestack.net/benchmarks/#highcharts-6">2</a>), można pokusić się o kilka stwierdzeń:</p>

<ul>
<li>Jeżeli chodzi o rozmiar zajmowany przez serializowane obiekty, najwydajniejszym rozwiązaniem wydawać by się mogła serializacja binarna. Jest to prosty i dość logiczny wniosek, jednak okazuje się, że na tym polu również istnieje pewna konkurencja (m.in ze strony formatu json), zaś wbudowane w .NET formatery i serializatory wcale nie są najwydajniejszym, co platforma ta może zaoferować.</li>
<li>Palma pierwszeństwa należy się <a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a> (protokół wymyślony przez Google oraz stosowany do komunikacji pomiędzy wewnętrznymi usługami giganta z Mountain View) oraz ich .NET-owym bindingom: totalne zwycięstwo zarówno pod względem rozmiaru serializowanego obiektu, jak i czasie serializacji/deserializacji. Biblioteka ta, ma jeszcze jedną przewagę &ndash; mimo, że wyjściowym formatem jest format binarny to w przeciwieństwie do domyślnych rozwiązań .NET protokół ten nie jest powiązany z jedną platformą i może służyć do komunikacji z usługami napisanymi w innych językach programowania.</li>
<li>W kwestii serializacji JSON:

<ul>
<li>Serializery wbudowane we framework .NET należą do najwolniejszych rozwiązań dostępnych na rynku &ndash; jest to tym bardziej przykre, że stanowią one domyślną metodę serializacji zawartą w kontrolerach ASP MVC.</li>
<li><a href="http://james.newtonking.com/projects/json-net.aspx">JSON.NET</a> (najpopularniejsza alternatywa dla wbudowanych serializatorów, używana m.in. w najnowszym WebAPI) mimo, że o jest wiele lepszy standardowych rozwiązań, również nie poraża swoimi osiągami</li>
<li>Zwycięzcą pozostaje <a href="http://www.servicestack.net/docs/text-serializers/json-serializer">ServiceStack</a> (ponownie ;) ). 2-3x większa szybkość niż konkurencyjny Json.NET i jeszcze większa przewaga nad rozwiązaniami domyślnymi.</li>
</ul>
</li>
</ul>


<h2>4. Client-side MVC/MVVM</h2>

<p>W <a href="http://horusiath.blogspot.com/2012/06/krotki-przeglad-po-frameworkach-mvc-w.html">jednym z poprzednich wpisów</a> opisałem kilka popularnych frameworków javascriptowych stosowanych do prezentacji i zarządzania logiką po stronie przeglądarki. Ocena możliwości i szybkości tych platform należy do szczególnie trudnych. W internecie da się znaleźć kilka stron pozwalających na przyjżenie się bliżej i ocenieni wydajności na własne oczy (polecam <a href="http://stackoverflow.com/questions/12955337/angular-js-backbone-js-and-other-mv-patterned-js-libraries">ten wpis</a>).</p>

<ul>
<li><a href="http://backbonejs.org/">Backbone</a> jest wydajny, jednak należy tu wziąć pod uwagę fakt, że nie zapewnia żadnego typu bindingu między widokiem a modelem, w dodatku wymaga od użytkownika ręcznego manipulowania drzewem DOM &ndash; to z kolei stawia go w innej klasie problemów i w zasadzie ciężko go porównywać z frameworkami umożliwiającymi wiązania danych.</li>
<li>Generalnie rzecz biorąc <a href="http://angularjs.org/">AngularJS</a> ma lepszą wydajność do <a href="http://knockoutjs.com/">Knockouta</a>. Jednak ta tendencja zmienia się wraz ze wzrostem liczy wiązań tzn. im większa tym bardziej Knockout wysuwa się na prowadzenie. W tym wypadku jednak duży wpływ na wynik końcowy ma sama budowa kontrolerów w AngularJS (dla lepszej wydajności powinny być one małe i nie zawierać zbyt dużej ilości powiązań ani skomplikowanej logiki obliczeniowej, która powinna być wykonywana osobno przez mechanizm serwisów dostępny we frameworku).</li>
</ul>


<h2>5. Templating Engines</h2>

<p>Dużą różnicę robi również wykorzystanie silników do generowania szablonów stron WWW (od kiedy większość ze stron generowana jest w sposób dynamiczny). Tutaj jednak rozbijemy problem na 2 części:</p>

<ol>
<li>Silniki po stronie serwera &ndash; Na stackoverflow można znaleźć <a href="http://stackoverflow.com/questions/1451319/asp-net-mvc-view-engine-comparison">wątek</a>, który przedstawia krótką charakterystykę około 12 różnych silników wykorzystywanych do generowania stron po stronie serwera. Niestety, nie udało mi się znaleźć podobnego zestawienia jeżeli chodzi o kwestie wydajnościowe. Zamiast tego postaram się przedstawić kilka dobrych rad dotyczących kwestii wydajnościowych dotyczących dwóch domyślnych silników .NET, Aspx i Razor:

<ul>
<li>W większości przypadków Aspx działa lepiej niż porównywalny kod w Razorze (zwłaszcza w porównianiu z pierwszą wersją) &ndash; różnica ta wynosi przeważnie od 50% do 12% na korzyść aspx. Tutaj jednak wiele zależy od zmiany ustawień domyślnych, cacheowania elementów strony itp.</li>
<li>W przypadku kiedy nie wykorzystujesz obu tych silników, usuń ten którego nie używasz. W wielu przypadkach przyspiesza to działanie aplikacji, m.in. przez to, że w prosty sposób skraca ilość przeszukiwanych szablonów w katalogu <em>Views</em> aplikacji MVC o połowę.</li>
<li>Porada dotycząca ViewState (WebForms) &ndash; nie potrzebujesz mechanizmu ViewState na stronie? Wyłącz go. Potrzebujesz go? Zastanów się czy na pewno, zrób obejście, a potem go wyłącz. Serio. Mechanizm ten jest powszechnie uznawany za jedno z największych nieporozumień w świecie aplikacji webowych.</li>
</ul>
</li>
<li>Silniki po stronie klienta &ndash; Budowa pełnego stosu MVC po stronie klienta nie jest jedynym sposobem na budowę dobrze zorganizowanego mechanizmu zarządzania widokami. W wielu przypadkach możliwe jest wykorzystanie prostego silnika wykorzystującego szablony do generowania widoków w bezpośrednio przez przeglądarkę. Mechanizm tak stosowany jest m.in. przez LinkedIn, jak również Twittera, który udostępnił swój silnik <a href="http://twitter.github.com/hogan.js/">Hogan.js</a> jako projekt open source. Dobry test wydajności rozmaitych silników zaprezentowano na <a href="http://jsperf.com/dom-vs-innerhtml-based-templating/112">tej stronie</a>.</li>
</ol>


<p>W większości takich porównań korona wydajności należy do <a href="http://olado.github.com/doT/index.html">doT.js</a>. Jedną z przyjemnych rzeczy w tej bibliotece, jest możliwość określania, które elementy szablonu będą generowane w czasie kompilacji (po wykonaniu kompilacji generowana jest funkcja kompilatora generująca wynikowy html na podstawie modelu przekazanego jako parametr &ndash; funkcja ta może być cache&#8217;owana), a które z nich będą wykonywane w runtime.</p>

<h2>Podsumowanie</h2>

<p>Po analizie dostępnych rozwiązań to co najbardziej mnie uderzyło, to fakt jak wiele z najpopularniejszych bibliotek prezentuje się zaskakująco żenująco w testach dotyczących wydajności. Za swoje małe odkrycie mogę uznać z kolei stos zaoferowany przez ServiceStack, dla których wydajność wydaje się priorytetem w każdej kategorii, w której podjęli się konkurować. Niestety nie miałem do tej pory dużo do czynienia z tym frameworkiem, co jednak bardzo przypadło mi do gustu, to fakt że jest to rozwiązanie kompletne, oferujące możliwość kompletnego zastąpienia każdego modułu w tradycyjnym stosie ASP.NET MVC/WCF/EntityFramework swoim własnym, spójnym zbiorem bibliotek. Do tego w całości działającym pod Mono na Linuxie.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js - renderowanie layoutów z wykorzystaniem doT.js]]></title>
    <link href="http://Horusiath.github.io/blog/2012/12/30/nodejs-renderowanie-layoutow-z/"/>
    <updated>2012-12-30T10:09:00+01:00</updated>
    <id>http://Horusiath.github.io/blog/2012/12/30/nodejs-renderowanie-layoutow-z</id>
    <content type="html"><![CDATA[<p>Stało się. Po wielu podejściach skłoniłem się do <a href="http://nodejs.org/">node.js</a> i postanowiłem napisać w nim swoją pierwszą aplikację z prawdziwego zdarzenia. O moich motywach i wątpliwościach, jakie towarzyszyły wykorzystaniu javascriptu do tworzenia logiki po stronie serwera opowiem innym razem. W tym poście postaram się skupić na innym zagadnieniu.</p>

<p>Po dość długim rekonesansie związanym z technologiami używanymi w node.js zdecydowałem się, że moja aplikacja zostanie oparta o bibliotekę <a href="http://expressjs.com/">express.js</a>. Jest to chyba najpopularniejszy framework w tym środowisku (ideowo czerpiący z Sinatry znanej wśród programistów Ruby&#8217;ego), którego głównymi zaletami są niewielki narzut obliczeniowy, łatwość konfiguracji, duża ilość zewnętrznych rozszerzeń oraz spora społeczność. W tym momencie należało również dokonać kilku dość istotnych wyborów. Ten, którego dotyczy mój wpis, dotyczył wyboru silnika renderującego. Z początku myślałem o najprostszym rozwiązaniu tzn. serwowaniu statycznych stron html. Jednakże takie rozwiązanie sprawia pewne problemy, z czego najbardziej upierdliwym jest chyba brak layoutów (ponieważ duża część widoków jest współdzielona, zmiana jednego z takich fragmentów wymagała by synchronizacji we wszystkich pozostałych stronach). Stąd postawiłem kilka warunków, jakie powinien spełniać silnik dla mojej aplikacji:</p>

<ul>
<li>Musi wspierać layouty/partiale</li>
<li>Musi być szybki (ideałem byłaby prekompilacja, ale cache&#8217;owanie widoków też jest ok)</li>
<li>Powinien zapewniać przynajmniej podstawową logikę w wykorzystywanych szablonach tzn. wyrażenia warunkowe i pętle.</li>
</ul>


<p>Nie uwzględniam tutaj problemu generowania dynamicznych widoków dla każdego użytkownika, ponieważ uważam, że tak specyficzna logika powinna być renderowana po stronie klienta (klient sam zajmuje się wyświetlaniem tego, to jest właściwe tylko dla niego &ndash; brzmi logicznie, prawda?). Po długich przygodach wybór padł ostatecznie na <a href="http://olado.github.com/doT/">doT.js</a>. Jest on obecnie uważany za jeden z najszybszych istniejących silników renderujących dla node.js (co potwierdzają benchmarki).</p>

<p>Niestety dłuższe zabawy wykazały, że ciężko jest wykorzystać domyślne API doT.js do renderowania widoków w expressie. Z tego powodu postanowiłem stworzyć własne rozwiązanie. Zacząłem od wydzielenia logiki odpowiedzialnej za rendering do osobnego modułu <strong>renderer.js</strong><em> </em>umiejscowionego w głównym katalogu aplikacji. Początkowa definicja wyglądała następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">),</span> <span class="c1">// operowanie na ścieżkach systemowych</span>
</span><span class='line'><span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">),</span>     <span class="c1">// I/O na plikach</span>
</span><span class='line'><span class="nx">defaultLayout</span><span class="p">,</span>          <span class="c1">// domyślna nazwa layoutu</span>
</span><span class='line'><span class="nx">extension</span><span class="p">,</span>              <span class="c1">// domyślne rozszerzenie plików-szablonów</span>
</span><span class='line'><span class="nx">viewsPath</span><span class="p">,</span>              <span class="c1">// ścieżka, gdzie składowane są widoki</span>
</span><span class='line'><span class="nx">cacheViews</span><span class="p">,</span>             <span class="c1">// flaga, czy cache&#39;ować kompilowane widoki</span>
</span><span class='line'><span class="nx">compiledViewsCache</span><span class="p">;</span>     <span class="c1">// cache na skompilowane widoki</span>
</span></code></pre></td></tr></table></div></figure>


<p>Następnym krokiem jest funkcja inicjalizująca:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">setup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">extension</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">extension</span> <span class="o">||</span> <span class="s1">&#39;html&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">defaultLayout</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">layout</span> <span class="o">||</span> <span class="s1">&#39;layout&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">viewsPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">path</span> <span class="o">||</span> <span class="s1">&#39;views&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">cacheViews</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">cacheViews</span> <span class="o">||</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">compiledViewsCache</span> <span class="o">=</span> <span class="nx">cacheViews</span> <span class="o">?</span> <span class="p">{}</span> <span class="o">:</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Określiliśmy w niej kilka opcji, które wykorzystywane będą podczas renderowania:</p>

<ul>
<li>extension &ndash; nazwa rozszerzenia wykorzystywanego przez kompilowane szablony (domyślnie: html)</li>
<li>defaultLayout &ndash; nazwa pliku layoutu (domyślnie: layout). Należy tutaj zaznaczyć, że w moim rozwiązaniu istnieje tylko 1 plik główny, nie istnieje domyślna obsługa zagnieżdżania widoków, mimo że wciąż jest taka możliwość.</li>
<li>viewsPath &ndash; scieżka względna do katalogu z widokami (domyślnie: /views).</li>
<li>cacheViews &ndash; czy skompilowany widok powinien zostać cache&#8217;owany? (domyślnie: tak)</li>
</ul>


<p>Teraz nadchodzi magia. Tworzymy funkcję, której zadaniem będzie wyrenderowanie podanego nam widoku:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">render</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">viewname</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">layout</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">layoutPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">viewsPath</span><span class="p">,</span> <span class="p">(</span><span class="nx">layout</span> <span class="o">||</span> <span class="nx">defaultLayout</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="o">+</span> <span class="nx">extension</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">viewPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">viewsPath</span><span class="p">,</span> <span class="nx">viewname</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="o">+</span> <span class="nx">extension</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// czy dany widok został znaleziony w cache</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">cacheViews</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">typeof</span> <span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">compiledViewsCache</span><span class="p">[</span><span class="nx">viewPath</span><span class="p">])</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="nx">model</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// asynchroniczne odczytanie widoku</span>
</span><span class='line'>      <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">viewPath</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">viewData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// błąd przy pobraniu pliku z widokiem</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// asynchroniczne odczytanie layoutu</span>
</span><span class='line'>              <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">layoutPath</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">layoutData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>                      <span class="c1">// błąd przy pobraniu layoutu</span>
</span><span class='line'>                  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                      <span class="c1">// skompiluj layout z widokiem</span>
</span><span class='line'>                      <span class="kd">var</span> <span class="nx">compiled</span> <span class="o">=</span> <span class="nx">dot</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span>
</span><span class='line'>                          <span class="nx">layoutData</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span>
</span><span class='line'>                          <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>                          <span class="p">{</span> <span class="nx">content</span><span class="o">:</span> <span class="nx">viewData</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>                      <span class="p">);</span>
</span><span class='line'>                      <span class="k">if</span><span class="p">(</span><span class="nx">cacheViews</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                          <span class="c1">// dodaj widok do cache</span>
</span><span class='line'>                          <span class="nx">compiledViewsCache</span><span class="p">[</span><span class="nx">viewPath</span><span class="p">]</span> <span class="o">=</span> <span class="nx">compiled</span><span class="p">;</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                      <span class="c1">// wyświetl wyrenderowany widok</span>
</span><span class='line'>                      <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">compiled</span><span class="p">(</span><span class="nx">model</span><span class="p">));</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Funkcja ta przyjmuje 4 parametry: obiekt express.response, nazwę widoku, model, z którym widok powinien być skompilowany, oraz nazwę layoutu (jeżeli domyślny nam nie odpowiada). Dwa ostatnie parametry są opcjonalne. Wewnątrz funkcji wykonujemy następujące operacje:</p>

<ol>
<li>Jeżeli dany widok został zcache&#8217;owany, odczytujemy go z cache i kompilujemy z podanym modelem. Warto tutaj nadmienić, że cache nie służy nam do zachowywania gotowego htmla, a jedynie skompilowanej funkcji szablonu, która generuje ten html na podstawie otrzymanego modelu. W tym wypadku zyskujemy na czasie, jaki należałoby poświęcić na odczytanie i skompilowanie szablonów zawartych w plikach.</li>
<li>Jeżeli widok nie był zcache&#8217;owany, odczytujemy kolejno plik szablonu z widokiem oraz layoutem (obie operacje odczytania pliku wykonywane są asynchronicznie), następie kompilujemy sam szablon, aby na koniec na jego podstawie wygenerować wynikowy html oraz wysłać odpowiedź.</li>
</ol>


<p>Aby moduł można uznać za gotowy, wystarczy udostępnić funkcje <em>setup</em> oraz <em>render</em> (dodając te funkcje do zmiennej <em>exports</em>).</p>

<p>Konfiguracja tego modułu w aplikacji może wyglądać następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">express</span>  <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">renderer</span><span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./renderer&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">app</span>  <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">renderer</span><span class="p">.</span><span class="nx">setup</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">extension</span><span class="o">:</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">layout</span><span class="o">:</span> <span class="s1">&#39;layout&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">viewsPath</span><span class="o">:</span> <span class="s1">&#39;/views&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">cacheViews</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// dodanie do obiektu express.response funkcjonalności naszego modułu</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">show</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">viewname</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">layout</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">viewname</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span><span class="nx">layout</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Trzeba dodać, że obiekt app.response służący do rozszerzenia domyślnych funkcjonalności obiektu response, jest dostępny w express.js od wersji 3.x.</p>

<p>Przykładowy plik <strong>layout.html</strong> może wyglądać następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span> <span class="nx">lang</span><span class="o">=</span><span class="s2">&quot;pl&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span> <span class="p">{</span><span class="o">=</span><span class="nx">it</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">charset</span><span class="o">=</span><span class="s2">&quot;utf-8&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="p">{</span> <span class="p">{</span><span class="err">#</span><span class="nx">def</span><span class="p">.</span><span class="nx">content</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Zdefiniowaliśmy w nim 2 zmienne:</p>

<ul>
<li><em>def.content </em>&ndash; zmienna czasu kompilacji, w tym miejscu wstawiona zostanie zawartość pliku konkretnego widoku.</li>
<li><em>it.title</em> &ndash; zmienna właściwa dla danego modelu, zostanie. Domyślnie w doT.js <strong>it</strong> oznacza model przekazany do widoku, natomiast <em>title</em> to nazwa właściwości dostępnej w ramach modelu.</li>
</ul>


<p>Licząc, że widok zawarty jest w pliku <strong>home.html</strong> teraz wystarczy wywołać nasz widok w następujący sposób:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Strona główna&#39;</span><span class="p">};</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;home&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="p">);</span>    <span class="c1">// nasza customowa metoda</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript - porady i uwagi]]></title>
    <link href="http://Horusiath.github.io/blog/2012/09/09/javascript-porady-i-uwagi/"/>
    <updated>2012-09-09T15:16:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2012/09/09/javascript-porady-i-uwagi</id>
    <content type="html"><![CDATA[<p>Ostatnimi czasy poświęciłem kilka chwil na refleksje związane z kodem JavaScriptu, z jakim przyszło mi się spotykać w pracy i na uczelni. Zauważyłem, że wiele osób skupia się na logice serwerowej, trzymając się wielu kanonów określających jak powinno się pisać czysty i rozwijalny kod. Z drugiej strony jednocześnie traktują one skrypty JS po macoszemu, jako coś przez co trzeba jakoś przebrnąć.</p>

<p>Nie ma co ukrywać, że utrzymanie przejrzystości i rozszerzalności modułów w JavaScriptcie jest o wiele trudniejsze niż w standardowych językach wykonywanych po stronie serwera. Dlatego właśnie uważam, że tym bardziej wymagają one uwagi i wkładu w zachowanie jakości. Poniżej przedstawię kilka uwag/wskazówek dla programistów, którzy chcieliby poprawić jakość pisanego kodu.</p>

<h2>1. Zapoznaj się z <a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml">Google Style Guide</a></h2>

<p>Myślę, że to powinien być pierwszy krok dla każdego programisty frontendowego (i nie tylko). W każdym języku istnieją pewne konwencje i złote rady i JS nie jest tu żadnym wyjątkiem. Poradnik Google&#8217;a to nic innego jak zbiór powszechnie wypracowanych, przemyślanych zasad, którymi warto kierować się w trakcie pisania aplikacji WWW. Część z moich dalszych uwag będzie też rozwinięciem punktów z tego podręcznika.</p>

<h2>2. Zamykaj skrypty we własnych zakresach (scopes)</h2>

<p>Ten punkt dotyczy częstej sytuacji w której tworząc skrypty do aplikacji często definiujemy wiele zmiennych i funkcji globalnych o tymczasowym zastosowaniu. Tworzy to całą masę śmieciowego kodu, który jest dostępny w innych częściach aplikacji i w przyszłości może poskutkować zmniejszeniem czytelności, kłopotami z dalszą rozwijalnością kodu i zwiększeniem ryzyka powstawania błędów.</p>

<p>Rozwiązaniem tego problemu jest posłużenie się wzorcem funkcji natychmiastowych (wykonywanych natychmiast po ich zdefiniowaniu). Poniżej zaprezentowałem przykład obrazujący to rozwiązanie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">someVariable</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// reszta kodu</span>
</span><span class='line'><span class="p">})(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">$</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Utworzyliśmy w ten sposób odrębny zakres (<em>scope</em>), w którym wykonywane są funkcje skryptu. Oznacza to m.in., że zadeklarowana w przykładzie zmienna <em>someVariable</em> nie będzie widoczna przez inne skrypty spoza tego zakresu. Wpis <em>&lsquo;use strict&rsquo;</em> jest pomijany przez starsze przeglądarki, zaś w nowszych sprawia, że pisany kod będzie znacznie bardziej restrykcyjnie traktowany przez kompilator, przez co łatwiej można w nim wyłapać błędy i niejasności. Więcej na ten temat można przeczytać <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode?redirectlocale=en-US&amp;amp;redirectslug=JavaScript%2FStrict_mode">tutaj</a>.</p>

<p>Można się zatem zapytać, po co w argumentach funkcji umieszczone są redefinicje zmiennych <em>window </em>i<em> jQuery</em>? Odpowiedź jest prosta: przejrzystość. Podając jawnie globalne typy z innych bibliotek i zmiennych środowiskowych możemy w mgnieniu oka określić powiązania pomiędzy naszym skryptem, a zewnętrznymi modułami.</p>

<h2>3. Organizuj zmienne globalne w modułach/przestrzeniach nazw</h2>

<p>Kolejnym krokiem w stronę dobrej organizacji kodu jest wykorzystanie powszechnie stosowanej w językach <em>server-side</em> opcji cięcia kodu w moduły i przestrzenie nazw. Może się to wydawać mało zrozumiałe, ponieważ JavaScript nie definiuje jawnie takich konstrukcji językowych. Jednakże możliwości tego języka są praktycznie nieograniczone, co daje nam możliwość rozwiązania tego problemu w inny sposób.</p>

<p>Pierwsza propozycja przedstawiona jest poniżej. Osobiście nie polecam jej, jednakże w przypadku, gdy mamy niewiele modułów w naszej aplikacji, może się okazać wystarczająca.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyModule</span> <span class="o">=</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">MyModule</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MyModule</span> <span class="o">||</span> <span class="p">{});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MySubModule</span> <span class="o">=</span> <span class="p">(</span><span class="nx">MyModule</span><span class="p">.</span><span class="nx">MySubModule</span> <span class="o">=</span> <span class="nx">MyModule</span><span class="p">.</span><span class="nx">MySubModule</span> <span class="o">||</span> <span class="p">{});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jest to prosta konstrukcja językowa wydobywająca moduł (reprezentowany w praktyce przez obiekt) z tzw. korzenia (<em>root</em> &ndash; w tym wypadku zmienna <em>window</em>) lub tworząca go w przypadku, gdy dany moduł nie został jeszcze utworzony. Zwrócony obiekt służy następnie jako uchwyt dla pozostałych definiowanych przez nas funkcji i zmiennych.</p>

<p>Innym rozwiązaniem jest stworzenie predefiniowanej metody pozwalającej wydobywać/tworzyć moduły na zawołanie, wraz z zachowaniem ich hierarchii. Ten prosty wzorzec, nazywany jak nie ciężko się domyślić przestrzenią nazw (<em>namespace</em>), może być sprowadzony do postaci pojedyńczej funkcji:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">namespace</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">parent</span> <span class="o">=</span> <span class="nx">root</span> <span class="o">||</span> <span class="nb">window</span><span class="p">;</span>    <span class="c1">// jeżeli nie podaliśmy korzenia, korzystamy z obiektu okna</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">modules</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">modules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">modules</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">parent</span><span class="p">[</span><span class="nx">module</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">parent</span><span class="p">[</span><span class="nx">module</span><span class="p">]</span> <span class="o">||</span> <span class="p">{});</span>
</span><span class='line'>        <span class="nx">parent</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">[</span><span class="nx">module</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">parent</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tak zdefiniowana funkcja pozwala nam pobierać lub tworzyć hierarchie modułów na żądanie. Przykładowe użycie może wyglądać następująco: <code>var regexes = namespace(&lsquo;System.Text.RegularExpressions&rsquo;);</code></p>

<h2>4. Komunikuj się poprzez obiekty</h2>

<p>Jest to dość wieloznaczne stwierdzenie, w praktyce jednak chodzi o prostą ideę: wykorzystanie proxy w komunikacji z zewnętrznymi serwisami, a nawet między różnymi modułami. Jest to wygodny sposób zachowanie luźnych powiązań.</p>

<p>W ramach przykładu załóżmy, że wykorzystujemy obiekt pośredniczący w obsłudze żądań ajaxowych z różnych modułów naszej aplikacji. Niestety z jakiegoś powodu biblioteka jQuery, z której korzystaliśmy do obsługi tych wywołań, generuje błędy lub posiada zbyt ubogie funkcje. Dzięki wykorzystaniu proxy możemy ją zamienić na inną (lub napisać własną) bez potrzeby przepisywania kodu we wszystkich miejscach, które do tej pory wykorzystywały ją do komunikacji.</p>

<p>Kolejną wynikającą z tego zaletą jest możliwość przeprowadzania testów jednostkowych dla skryptów klienckich. Nie ma przecież żadnych przeciwwskazań, aby stworzyć mocki, które będziemy mogli podstawiać w miejsce obiektu komunikatora.</p>

<p>Innym zastosowaniem takiego rozwiązania jest możliwość reagowania na nadchodzące wiadomości w bardziej wyrafinowany sposób. Zastanówcie się, jak do tej pory reagowaliście, jeżeli w odpowiedzi na wasze żądanie na serwer zamiast upragnionego JSONa dostawaliście stringa zawierającego stronę z błędem? Oczywiście należałoby jakoś powiadomić użytkownika o wystąpieniu błędu lub wywołać odpowiednią reakcję systemu. To z kolei wiąże się z koniecznością każdorazowego sprawdzenia, czy zwrócona wiadomość jest prawidłowa. Wykorzystując interfejs pośredniczący moglibyśmy odpowiednio reagować na takie sytuacje <strong>zanim </strong>wiadomość zostanie przekazana dalej do oczekujących na nią elementów, a nawet za pomocą wzorca Publish/Subscribe tworzyć listy obiektów oczekujących i reagujących na konkretne rodzaje komunikatów.</p>

<h2>5. Dokumentuj skrypty</h2>

<p>Może to zabrzmi dziwnie, ale taka jest prawda. Kiedy rozwijasz duże aplikacje, bardzo możliwe że na przestrzeni miesięcy będziesz musiał wrócić do dawno nie oglądanego kodu lub twoja praca zostanie odziedziczona przez innego programistę, który nie ma zielonego pojęcia o tym co i jak działa. Z tego powodu w momencie, gdy skrypty nie są okraszone stosownymi komentarzami, ilość WTFów/min. znacznie wzrasta. Nie powinniśmy się przejmować wzrostem rozmiaru plików JS, ponieważ niemal każdy minifier załatwi ten problem za nas. Warto przyjąć sobie jakiś konkretny format pisania komentarzy, a w tej dziedzinie standardem wydaje się <a href="http://en.wikipedia.org/wiki/JSDoc">JSDoc</a>.</p>

<h2>6. Minimalizuj skrypty</h2>

<p>Kolejna sprawa, która powinna być dość oczywista w praktyce, często jest jednak pomijana. Minimalizowanie skryptów oraz styli pozwala nawet kilkukrotnie zmniejszyć rozmiar wymaganych do pobrania plików. Jak wiadomo im mniejszy rozmiar, tym mniej danych trzeba przesłać przez sieć i tym szybciej dana strona zostanie załadowana. Ma to znaczenie zwłaszcza dla użytkowników korzystających z urządzeń mobilnych, które często są wykorzystywane w otwartych obszarach np. miejskich hot-spotach, gdzie udźwig łącza stanowi pewien problem.</p>

<p>Innym dobrym pomysłem jest łączenie wielu plików ze skryptami do jednego pliku. Znowu wynika to z faktu, że większa ilość plików wymaga wygenerowanie przez przeglądarkę większej ilości zapytań. W przypadku gdy przeglądarka klienta lub serwer hostujący nie obsługują protokołu <a href="https://sites.google.com/a/chromium.org/dev/spdy/spdy-whitepaper">SPDY</a>, oznacza to, że każdy żądany zasób będzie wymagał ustanowienia nowego połączenia TCP, co jest dość kosztowne i negatywnie przekłada się na czas transmisji, zwłaszcza na dużych dystansach między klientem a serwerem. Z tego powodu wskazane jest zarówno łączenie jak i minimalizacja skryptów i stylów w środowisku produkcyjnym.</p>

<h2>7. Testuj skrypty</h2>

<p>Nie jest chyba dla nikogo niespodzianką, że w życiu programisty dużą część czasu poświęca się nie tylko na pisaniu kodu, ale również na sprawdzeniu jego poprawności. Aby zautomatyzować ten proces, powstało wiele frameworków umożliwiających przeprowadzanie szybkich testów. Ponieważ w dzisiejszych aplikacjach webowych coraz większa część logiki zaczyna być wykonywana po stronie klienta, dobrą praktyką jest przygotowywanie testów również dla skryptów JS. Zalet tego podejścia jest sporo, warto wymienić chociaż kilka z nich:</p>

<ul>
<li>Przeprowadzanie testów jednostkowych wymusza budowanie modularnych aplikacji opartych o luźne powiązania między obiektami. Jest to bardzo dobra metodyka programowania i pomaga poprawić czytelność oraz jakość pisanego kodu.</li>
<li>Od kiedy JavaScript umożliwia nam zdalne wywoływanie zdarzeń związanych z akcjami użytkownika, możliwe jest również przynajmniej częściowe zautomatyzowanie testów wymagających podejmowania działań po stronie klienta.</li>
<li>W przypadku scalania i minimalizacji skryptów (zwłaszcza tych wykorzystujących niezminimalizowane biblioteki zewnętrzne do developingu i zminimalizowane w środowisku produkcyjnym) nigdy nie możemy mieć 100% pewności, że nasz scalony/zminimalizowany skrypt będzie dalej działał dokładnie tak jak sprawdzaliśmy.</li>
</ul>


<p>Środowisk do testów javascriptowych jest dość sporo. Osobiście mogę polecić <a href="http://pivotal.github.com/jasmine/">Jasmine</a>, framework bazujący na rozwiązaniach znanych dla programistów Ruby z RSpeca. Jest łatwy do nauki i wprowadzenia w naszej aplikacji, a jednocześnie daje nam dużą swobodę w tworzeniu własnych rozwiązań.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NLP] Stemming i lematyzacja]]></title>
    <link href="http://Horusiath.github.io/blog/2012/08/24/nlp-stemming-i-lematyzacja/"/>
    <updated>2012-08-24T08:17:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2012/08/24/nlp-stemming-i-lematyzacja</id>
    <content type="html"><![CDATA[<p>Zagłębiając się coraz dalej w NLP (<em>ang. Natural Language Processing</em>) &ndash; dziedzinę znaną również jako przetwarzanie języka naturalnego &ndash; natrafiłem na dość powszechny problem, którego rozwiązaniem pragnę się podzielić w tym artykule. Zacznijmy jednak od ogólnego przedstawienia problemu: załóżmy, że w życiu każdego programisty zdarzają się chwilę, w których musi on stworzyć aplikację zdolną poradzić sobie z analizą standardowego tekstu tzn. takiego, który domyślnie nie był sformatowany w sposób umożliwiający zastosowanie prostych wzorców w celu wyciągnięcia rzeczowych informacji. O ile dla większości ludzi zadanie to powinno być banalne, gdyż wystarczy nam zwykłe czytanie tekstu ze zrozumieniem, o tyle istniejące programy komputerowe mają niezwykłe problemy z jego rozwiązaniem. To właśnie tutaj z pomocą przychodzą pojęcia takie jak lematyzacja i stemming.</p>

<p><strong>Stemming </strong>&ndash; bazując na definicji z angielskiej wikipedii jest to proces polegający na wydobyciu z wybranego wyrazu tzw. rdzenia, a więc tej jego części, która jest odporna na odmiany przez przyimki, rodzaje itp.</p>

<p><strong>Lematyzacja </strong>&ndash; pojęcie to jest bardzo podobne do powyższego, a oznacza sprowadzenie grupy wyrazów stanowiących odmianę danego zwrotu do wspólnej postaci, umożliwiającej traktowanie ich wszystkich jako te samo słowo.</p>

<p>Ponieważ problem ten jest dość stary i dobrze znany, w ciągu ostatnich dziesięcioleci powstało kilka znanych algorytmów służących jego rozwiązaniu. Dwa z najbardziej znanych to algorytm Portera (1979 r.) oraz algorytm Lancaster (1990 r.). Celem moich rozważań będzie zaimplementowanie drugiego z nich.</p>

<p>Główne działanie algorytmu opiera się na słowniku zawierającym definicje par {zakończenie &ndash; podmieniany ciąg znaków} modyfikowanych wyrazów. Ponieważ słownik taki jest ciężki w skonstruowaniu postanowiłem dodać gotową listę definicji dla języka angielskiego zaczerpniętą z kodu źródłowego biblioteki NLTK (Natural Language Toolkit) napisanej w Pythonie. Listę tą znaleźć można na końcu tego artykułu.</p>

<p>Warto zwrócić uwagę na format zapisu definicji. Są one opisane w postaci pojedynczego słowa. Podciągi występujących w nim znaków stanowią kolejno:</p>

<ol>
<li>Odwrócony zapis końcówki słowa (obowiązkowy) &ndash; umożliwia określenie, czy dana reguła powinna być stosowana dla modyfikowanego wyrazu.</li>
<li>Znacznik nienaruszalności (opcjonalny, symbol: &lsquo;<strong>*&rsquo;</strong>) &ndash; oznacza to, że reguła powinna być zastosowana tylko wtedy, kiedy słowo nie zostało zmienione przez jakiekolwiek poprzednie reguły.</li>
<li>Liczba usuwanych znaków (obowiązkowa) &ndash; określa, ile liter z końca wyrazu powinno zostać usunięte podczas modyfikacji.</li>
<li>Podstawiany ciąg znaków (opcjonalny) &ndash; nowa końcówka doklejana do słowa po usunięciu poprzedniej.</li>
<li>Flaga kontynuacji (obowiązkowa, symbol: &lsquo;<strong>></strong>&rsquo; [true] lub &lsquo;<strong>.</strong>&rsquo; [false]) &ndash; określa czy po zastosowaniu tej reguły do wyrazu dopuszczalne są jakiekolwiek dalsze modyfikacje.</li>
</ol>


<p>Aby ułatwić sobie pracę, stwórzmy strukturę przechowującą informację o tak zdefiniownej regule (w mojej implementacji nazwałem ją <strong><em>StemRule</em></strong>). Kolejne punkty opisanej powyżej definicji reprezentowane będą przez następujące pola/właściwości: 1 &ndash; <em>WordEnd </em>(string), 2 &ndash; <em>Intact </em>(bool), 3 &ndash; <em>RemoveTotal </em>(int), 4 &ndash; <em>AppendString </em>(string), 5 &ndash; <em>IsContinous </em>(bool).</p>

<p>Parsowanie, realizowane w konstruktorze klasy, opiera się o wyciągnięcie odpowiednich grup przy pomocy wyrażeń regularnych a następnie wstawieniu ich wartości do odpowiadających pól.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="nf">StemRule</span><span class="p">(</span><span class="kt">string</span> <span class="n">rule</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">RuleValdiator</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Regex</span><span class="p">(</span><span class="s">@&quot;^([a-z]+)(\*?)(\d)([a-z]*)([&gt;\.]?)$&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">match</span> <span class="p">=</span> <span class="n">RuleValdiator</span><span class="p">.</span><span class="n">Match</span><span class="p">(</span><span class="n">rule</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(!</span><span class="n">match</span><span class="p">.</span><span class="n">Success</span><span class="p">)</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;Provided rule could not be parsed&quot;</span><span class="p">,</span> <span class="n">rule</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">var</span> <span class="n">chars</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span><span class="p">.</span><span class="n">ToCharArray</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Array</span><span class="p">.</span><span class="n">Reverse</span><span class="p">(</span><span class="n">chars</span><span class="p">);</span>
</span><span class='line'>  <span class="n">WordEnd</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="n">chars</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Intact</span> <span class="p">=</span> <span class="p">!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">2</span><span class="p">].</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>  <span class="n">RemoveTotal</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">3</span><span class="p">].</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>  <span class="n">AppendString</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">4</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>  <span class="n">IsContinous</span> <span class="p">=</span> <span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">5</span><span class="p">].</span><span class="n">Value</span> <span class="p">!=</span> <span class="s">&quot;.&quot;</span><span class="p">)</span> <span class="p">||</span> <span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">5</span><span class="p">].</span><span class="n">Value</span> <span class="p">==</span> <span class="s">&quot;&gt;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dysponując tak przygotowanymi regułami możemy przejść do konstrukcji właściwego stemmera. Aby szybciej wydobywać odpowiednie reguły dla danego słowa, umieścimy je w czymś w rodzaju hashmapy, gdzie hashem będzie ostatnia litera końcówki wyszukiwanego słowa, zaś &ldquo;koszyk&rdquo; będzie stanowił listę obiektów <code>StemRule</code> ze stosownymi końcówkami.</p>

<p>Ostatecznie tworzenie słownika wyglądać będzie następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">StemRule</span><span class="p">&gt;&gt;</span> <span class="n">ParseRules</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">rules</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">dictionary</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">StemRule</span><span class="p">&gt;&gt;();</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">rules</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">rule</span> <span class="p">=</span> <span class="n">rules</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">firstLetter</span> <span class="p">=</span> <span class="n">rule</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">dictionary</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">firstLetter</span><span class="p">))</span>
</span><span class='line'>          <span class="n">dictionary</span><span class="p">[</span><span class="n">firstLetter</span><span class="p">].</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">StemRule</span><span class="p">(</span><span class="n">rule</span><span class="p">));</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">dictionary</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">firstLetter</span><span class="p">,</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">StemRule</span><span class="p">&gt;(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="k">new</span> <span class="n">StemRule</span><span class="p">(</span><span class="n">rule</span><span class="p">)</span> <span class="p">}));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">dictionary</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Przetwarzaniem zajmować się będzie metoda Stem. Kolejność akcji wykonywanych przez algorytm wyglądać będzie następująco:</p>

<ol>
<li>Sprowadzamy wszystkie słowa do zapisu lower case.</li>
<li>W głównej pętli:

<ol>
<li>Znajdujemy pozycję ostatniej litery w słowie i sprawdzamy czy jest ona jednym z kluczy w naszym słowniku reguł. Jeżeli nie, kończymy pracę algorytmu.</li>
<li>Pobieramy &ldquo;kubełek&rdquo; z regułami ze słownika na podstawie klucza (ostatniej litery).</li>
<li>W pętli wewnętrznej dla każdego kubełka:

<ol>
<li>Sprawdzamy, czy końcówka zapisana w regule znajduje się na końcu modyfikowanego słowa. Jeżeli nie, przechodzimy do kolejnej reguły.</li>
<li>Sprawdzamy czy reguła miała ustawioną flagę nienaruszalności: jeżeli tak, sprawdzamy czy słowo przez nas przetwarzane nie zostało zmienione przez poprzednie reguły. Jeżeli zostało, pomijamy działanie tej reguły.</li>
<li>Modyfikujemy słowo na podstawie danych z reguły.</li>
<li>Oznaczamy słowo jako zmodyfikowane.</li>
<li>Dodatkowo jeżeli reguła miała ustawioną flagę kontynuacji, wychodzimy z wewnętrznej pętli i kontynuujemy działanie algorytmu.</li>
</ol>
</li>
</ol>
</li>
</ol>


<p>Implementacja algorytmu może wyglądać następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">Stem</span><span class="p">(</span><span class="kt">string</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">lowered</span> <span class="p">=</span> <span class="n">token</span><span class="p">.</span><span class="n">ToLower</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">proceed</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">proceed</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// find position of last alphabetic letter in stemmed word</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">lastLetterPosition</span> <span class="p">=</span> <span class="n">LastLetterPosition</span><span class="p">(</span><span class="n">lowered</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">original</span> <span class="p">=</span> <span class="n">lowered</span> <span class="p">=</span> <span class="n">lowered</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">lastLetterPosition</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// stemm the word only when it has last letter and it&#39;s matching to any stemm rule</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">lastLetterPosition</span> <span class="p">&lt;</span> <span class="m">0</span>
</span><span class='line'>          <span class="p">||</span> <span class="p">!</span><span class="n">_ruleDictionary</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">lowered</span><span class="p">[</span><span class="n">lastLetterPosition</span><span class="p">]))</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">proceed</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">var</span> <span class="n">applied</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>          <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">rule</span> <span class="k">in</span> <span class="n">_ruleDictionary</span><span class="p">[</span><span class="n">lowered</span><span class="p">[</span><span class="n">lastLetterPosition</span><span class="p">]])</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="c1">// proceed if word ends with matched rule&#39;s endingString</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">lowered</span><span class="p">.</span><span class="n">EndsWith</span><span class="p">(</span><span class="n">rule</span><span class="p">.</span><span class="n">WordEnd</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">&amp;&amp;</span> <span class="n">IsStemmingAcceptable</span><span class="p">(</span><span class="n">lowered</span><span class="p">,</span> <span class="n">rule</span><span class="p">.</span><span class="n">RemoveTotal</span><span class="p">))</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(!</span><span class="n">rule</span><span class="p">.</span><span class="n">Intact</span> <span class="p">||</span> <span class="n">lowered</span> <span class="p">==</span> <span class="n">original</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">lowered</span> <span class="p">=</span> <span class="n">ApplyRule</span><span class="p">(</span><span class="n">lowered</span><span class="p">,</span> <span class="n">rule</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">applied</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>                      <span class="k">if</span> <span class="p">(!</span><span class="n">rule</span><span class="p">.</span><span class="n">IsContinous</span><span class="p">)</span> <span class="n">proceed</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="c1">// if no more rules apply, stop stemming</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(!</span><span class="n">applied</span><span class="p">)</span> <span class="n">proceed</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">lowered</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Na koniec zestaw kilku metod wykorzystywanych przez powyższą implementację:</p>

<p>Pobieranie pozycji ostatniej litery w ciągu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">LastLetterPosition</span><span class="p">(</span><span class="kt">string</span> <span class="n">word</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">word</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&gt;=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span><span class="p">--)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="kt">char</span><span class="p">.</span><span class="n">IsLetter</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sprawdzenie, czy słowo może zostać poddane przetwarzaniu &ndash; metoda ta jest potrzebna od kiedy nie możemy przetwarzać słów jednosylabowych, niezależnie od podanych wcześniej reguł (przykład: bez tego warunku reguła usuwająca końcówkę <em>-ing</em> sprawiłaby, że wyrazy takie jak <em>sing </em>stałyby się całkowicie nieczytelne):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">IsStemmingAcceptable</span><span class="p">(</span><span class="kt">string</span> <span class="n">word</span><span class="p">,</span> <span class="kt">int</span> <span class="n">removeTotal</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">string</span> <span class="n">vowels</span> <span class="p">=</span> <span class="s">&quot;aeiouy&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// if word start with a vowel, it have to be at least 2 letters long</span>
</span><span class='line'>  <span class="c1">// else it have to be at least 3 letters and contains at least one vowel</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">vowels</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="m">0</span><span class="p">])</span>
</span><span class='line'>             <span class="p">?</span> <span class="n">word</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="n">removeTotal</span> <span class="p">&gt;=</span> <span class="m">2</span>
</span><span class='line'>             <span class="p">:</span> <span class="n">word</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="n">removeTotal</span> <span class="p">&gt;=</span> <span class="m">3</span>
</span><span class='line'>               <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">vowels</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="m">1</span><span class="p">])</span> <span class="p">||</span> <span class="n">vowels</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="m">2</span><span class="p">]));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aplikowanie danej reguły do słowa &ndash; dość prosta sprawa, usuwamy z końca słowa liczbę znaków podanych w regule oraz podstawiamy ewentualną końcówkę, jeżeli została ona zdefiniowana w regule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">ApplyRule</span><span class="p">(</span><span class="kt">string</span> <span class="n">word</span><span class="p">,</span> <span class="n">StemRule</span> <span class="n">rule</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Concat</span><span class="p">(</span>
</span><span class='line'>      <span class="n">word</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">word</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="n">rule</span><span class="p">.</span><span class="n">RemoveTotal</span><span class="p">),</span>
</span><span class='line'>      <span class="n">rule</span><span class="p">.</span><span class="n">AppendString</span> <span class="p">??</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><details><summary>Lista definicji</summary></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="s">&quot;ai*2.&quot;</span><span class="p">,</span>     <span class="c1">// -ia &gt; - if intact</span>
</span><span class='line'><span class="s">&quot;a*1.&quot;</span><span class="p">,</span>      <span class="c1">// -a &gt; - if intact</span>
</span><span class='line'><span class="s">&quot;bb1.&quot;</span><span class="p">,</span>      <span class="c1">// -bb &gt; -b</span>
</span><span class='line'><span class="s">&quot;city3s.&quot;</span><span class="p">,</span>   <span class="c1">// -ytic &gt; -ys</span>
</span><span class='line'><span class="s">&quot;ci2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -ic &gt; -</span>
</span><span class='line'><span class="s">&quot;cn1t&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -nc &gt; -nt</span>
</span><span class='line'><span class="s">&quot;dd1.&quot;</span><span class="p">,</span>      <span class="c1">// -dd &gt; -d</span>
</span><span class='line'><span class="s">&quot;dei3y&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -ied &gt; -y</span>
</span><span class='line'><span class="s">&quot;deec2ss.&quot;</span><span class="p">,</span>  <span class="c1">// -ceed &gt;&quot;, -cess</span>
</span><span class='line'><span class="s">&quot;dee1.&quot;</span><span class="p">,</span>     <span class="c1">// -eed &gt; -ee</span>
</span><span class='line'><span class="s">&quot;de2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -ed &gt; -</span>
</span><span class='line'><span class="s">&quot;dooh4&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -hood &gt; -</span>
</span><span class='line'><span class="s">&quot;e1&gt;&quot;</span><span class="p">,</span>       <span class="c1">// -e &gt; -</span>
</span><span class='line'><span class="s">&quot;feil1v.&quot;</span><span class="p">,</span>   <span class="c1">// -lief &gt; -liev</span>
</span><span class='line'><span class="s">&quot;fi2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -if &gt; -</span>
</span><span class='line'><span class="s">&quot;gni3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ing &gt; -</span>
</span><span class='line'><span class="s">&quot;gai3y.&quot;</span><span class="p">,</span>    <span class="c1">// -iag &gt; -y</span>
</span><span class='line'><span class="s">&quot;ga2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -ag &gt; -</span>
</span><span class='line'><span class="s">&quot;gg1.&quot;</span><span class="p">,</span>      <span class="c1">// -gg &gt; -g</span>
</span><span class='line'><span class="s">&quot;ht*2.&quot;</span><span class="p">,</span>     <span class="c1">// -th &gt; -   if intact</span>
</span><span class='line'><span class="s">&quot;hsiug5ct.&quot;</span><span class="p">,</span> <span class="c1">// -guish &gt; -ct</span>
</span><span class='line'><span class="s">&quot;hsi3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ish &gt; -</span>
</span><span class='line'><span class="s">&quot;i*1.&quot;</span><span class="p">,</span>      <span class="c1">// -i &gt; -    if intact</span>
</span><span class='line'><span class="s">&quot;i1y&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -i &gt; -y</span>
</span><span class='line'><span class="s">&quot;ji1d.&quot;</span><span class="p">,</span>     <span class="c1">// -ij &gt; -id   --  see nois4j&gt; &amp; vis3j&gt;</span>
</span><span class='line'><span class="s">&quot;juf1s.&quot;</span><span class="p">,</span>    <span class="c1">// -fuj &gt; -fus</span>
</span><span class='line'><span class="s">&quot;ju1d.&quot;</span><span class="p">,</span>     <span class="c1">// -uj &gt; -ud</span>
</span><span class='line'><span class="s">&quot;jo1d.&quot;</span><span class="p">,</span>     <span class="c1">// -oj &gt; -od</span>
</span><span class='line'><span class="s">&quot;jeh1r.&quot;</span><span class="p">,</span>    <span class="c1">// -hej &gt; -her</span>
</span><span class='line'><span class="s">&quot;jrev1t.&quot;</span><span class="p">,</span>   <span class="c1">// -verj &gt; -vert</span>
</span><span class='line'><span class="s">&quot;jsim2t.&quot;</span><span class="p">,</span>   <span class="c1">// -misj &gt; -mit</span>
</span><span class='line'><span class="s">&quot;jn1d.&quot;</span><span class="p">,</span>     <span class="c1">// -nj &gt; -nd</span>
</span><span class='line'><span class="s">&quot;j1s.&quot;</span><span class="p">,</span>      <span class="c1">// -j &gt; -s</span>
</span><span class='line'><span class="s">&quot;lbaifi6.&quot;</span><span class="p">,</span>  <span class="c1">// -ifiabl &gt; -</span>
</span><span class='line'><span class="s">&quot;lbai4y.&quot;</span><span class="p">,</span>   <span class="c1">// -iabl &gt; -y</span>
</span><span class='line'><span class="s">&quot;lba3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -abl &gt; -</span>
</span><span class='line'><span class="s">&quot;lbi3.&quot;</span><span class="p">,</span>     <span class="c1">// -ibl &gt; -</span>
</span><span class='line'><span class="s">&quot;lib2l&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -bil &gt; -bl</span>
</span><span class='line'><span class="s">&quot;lc1.&quot;</span><span class="p">,</span>      <span class="c1">// -cl &gt; c</span>
</span><span class='line'><span class="s">&quot;lufi4y.&quot;</span><span class="p">,</span>   <span class="c1">// -iful &gt; -y</span>
</span><span class='line'><span class="s">&quot;luf3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ful &gt; -</span>
</span><span class='line'><span class="s">&quot;lu2.&quot;</span><span class="p">,</span>      <span class="c1">// -ul &gt; -</span>
</span><span class='line'><span class="s">&quot;lai3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ial &gt; -</span>
</span><span class='line'><span class="s">&quot;lau3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ual &gt; -</span>
</span><span class='line'><span class="s">&quot;la2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -al &gt; -</span>
</span><span class='line'><span class="s">&quot;ll1.&quot;</span><span class="p">,</span>      <span class="c1">// -ll &gt; -l</span>
</span><span class='line'><span class="s">&quot;mui3.&quot;</span><span class="p">,</span>     <span class="c1">// -ium &gt; -</span>
</span><span class='line'><span class="s">&quot;mu*2.&quot;</span><span class="p">,</span>     <span class="c1">// -um &gt; -   if intact</span>
</span><span class='line'><span class="s">&quot;msi3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ism &gt; -</span>
</span><span class='line'><span class="s">&quot;mm1.&quot;</span><span class="p">,</span>      <span class="c1">// -mm &gt; -m</span>
</span><span class='line'><span class="s">&quot;nois4j&gt;&quot;</span><span class="p">,</span>   <span class="c1">// -sion &gt; -j</span>
</span><span class='line'><span class="s">&quot;noix4ct.&quot;</span><span class="p">,</span>  <span class="c1">// -xion &gt; -ct</span>
</span><span class='line'><span class="s">&quot;noi3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ion &gt; -</span>
</span><span class='line'><span class="s">&quot;nai3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ian &gt; -</span>
</span><span class='line'><span class="s">&quot;na2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -an &gt; -</span>
</span><span class='line'><span class="s">&quot;nee0.&quot;</span><span class="p">,</span>     <span class="c1">// protect  -een</span>
</span><span class='line'><span class="s">&quot;ne2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -en &gt; -</span>
</span><span class='line'><span class="s">&quot;nn1.&quot;</span><span class="p">,</span>      <span class="c1">// -nn &gt; -n</span>
</span><span class='line'><span class="s">&quot;pihs4&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -ship &gt; -</span>
</span><span class='line'><span class="s">&quot;pp1.&quot;</span><span class="p">,</span>      <span class="c1">// -pp &gt; -p</span>
</span><span class='line'><span class="s">&quot;re2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -er &gt; -</span>
</span><span class='line'><span class="s">&quot;rae0.&quot;</span><span class="p">,</span>     <span class="c1">// protect  -ear</span>
</span><span class='line'><span class="s">&quot;ra2.&quot;</span><span class="p">,</span>      <span class="c1">// -ar &gt; -</span>
</span><span class='line'><span class="s">&quot;ro2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -or &gt; -</span>
</span><span class='line'><span class="s">&quot;ru2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -ur &gt; -</span>
</span><span class='line'><span class="s">&quot;rr1.&quot;</span><span class="p">,</span>      <span class="c1">// -rr &gt; -r</span>
</span><span class='line'><span class="s">&quot;rt1&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -tr &gt; -t</span>
</span><span class='line'><span class="s">&quot;rei3y&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -ier &gt; -y</span>
</span><span class='line'><span class="s">&quot;sei3y&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -ies &gt; -y</span>
</span><span class='line'><span class="s">&quot;sis2.&quot;</span><span class="p">,</span>     <span class="c1">// -sis &gt; -s</span>
</span><span class='line'><span class="s">&quot;si2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -is &gt; -</span>
</span><span class='line'><span class="s">&quot;ssen4&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -ness &gt; -</span>
</span><span class='line'><span class="s">&quot;ss0.&quot;</span><span class="p">,</span>      <span class="c1">// protect  -ss</span>
</span><span class='line'><span class="s">&quot;suo3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ous &gt; -</span>
</span><span class='line'><span class="s">&quot;su*2.&quot;</span><span class="p">,</span>     <span class="c1">// -us &gt; -   if intact</span>
</span><span class='line'><span class="s">&quot;s*1&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -s &gt; - if intact</span>
</span><span class='line'><span class="s">&quot;s0.&quot;</span><span class="p">,</span>       <span class="c1">// -s &gt; -s</span>
</span><span class='line'><span class="s">&quot;tacilp4y.&quot;</span><span class="p">,</span> <span class="c1">// -plicat &gt; -ply</span>
</span><span class='line'><span class="s">&quot;ta2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -at &gt; -</span>
</span><span class='line'><span class="s">&quot;tnem4&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -ment &gt; -</span>
</span><span class='line'><span class="s">&quot;tne3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ent &gt; -</span>
</span><span class='line'><span class="s">&quot;tna3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ant &gt; -</span>
</span><span class='line'><span class="s">&quot;tpir2b.&quot;</span><span class="p">,</span>   <span class="c1">// -ript &gt; -rib</span>
</span><span class='line'><span class="s">&quot;tpro2b.&quot;</span><span class="p">,</span>   <span class="c1">// -orpt &gt; -orb</span>
</span><span class='line'><span class="s">&quot;tcud1.&quot;</span><span class="p">,</span>    <span class="c1">// -duct &gt; -duc</span>
</span><span class='line'><span class="s">&quot;tpmus2.&quot;</span><span class="p">,</span>   <span class="c1">// -sumpt &gt; -sum</span>
</span><span class='line'><span class="s">&quot;tpec2iv.&quot;</span><span class="p">,</span>  <span class="c1">// -cept &gt; -ceiv</span>
</span><span class='line'><span class="s">&quot;tulo2v.&quot;</span><span class="p">,</span>   <span class="c1">// -olut &gt; -olv</span>
</span><span class='line'><span class="s">&quot;tsis0.&quot;</span><span class="p">,</span>    <span class="c1">// protect  -sist</span>
</span><span class='line'><span class="s">&quot;tsi3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ist &gt; -</span>
</span><span class='line'><span class="s">&quot;tt1.&quot;</span><span class="p">,</span>      <span class="c1">// -tt &gt; -t</span>
</span><span class='line'><span class="s">&quot;uqi3.&quot;</span><span class="p">,</span>     <span class="c1">// -iqu &gt; -</span>
</span><span class='line'><span class="s">&quot;ugo1.&quot;</span><span class="p">,</span>     <span class="c1">// -ogu &gt; -og</span>
</span><span class='line'><span class="s">&quot;vis3j&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -siv &gt; -j</span>
</span><span class='line'><span class="s">&quot;vie0.&quot;</span><span class="p">,</span>     <span class="c1">// protect  -eiv</span>
</span><span class='line'><span class="s">&quot;vi2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -iv &gt; -</span>
</span><span class='line'><span class="s">&quot;ylb1&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -bly &gt; -bl</span>
</span><span class='line'><span class="s">&quot;yli3y&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -ily &gt; -y</span>
</span><span class='line'><span class="s">&quot;ylp0.&quot;</span><span class="p">,</span>     <span class="c1">// protect  -ply</span>
</span><span class='line'><span class="s">&quot;yl2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -ly &gt; -</span>
</span><span class='line'><span class="s">&quot;ygo1.&quot;</span><span class="p">,</span>     <span class="c1">// -ogy &gt; -og</span>
</span><span class='line'><span class="s">&quot;yhp1.&quot;</span><span class="p">,</span>     <span class="c1">// -phy &gt; -ph</span>
</span><span class='line'><span class="s">&quot;ymo1.&quot;</span><span class="p">,</span>     <span class="c1">// -omy &gt; -om</span>
</span><span class='line'><span class="s">&quot;ypo1.&quot;</span><span class="p">,</span>     <span class="c1">// -opy &gt; -op</span>
</span><span class='line'><span class="s">&quot;yti3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ity &gt; -</span>
</span><span class='line'><span class="s">&quot;yte3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ety &gt; -</span>
</span><span class='line'><span class="s">&quot;ytl2.&quot;</span><span class="p">,</span>     <span class="c1">// -lty &gt; -l</span>
</span><span class='line'><span class="s">&quot;yrtsi5.&quot;</span><span class="p">,</span>   <span class="c1">// -istry &gt; -</span>
</span><span class='line'><span class="s">&quot;yra3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ary &gt; -</span>
</span><span class='line'><span class="s">&quot;yro3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -ory &gt; -</span>
</span><span class='line'><span class="s">&quot;yfi3.&quot;</span><span class="p">,</span>     <span class="c1">// -ify &gt; -</span>
</span><span class='line'><span class="s">&quot;ycn2t&gt;&quot;</span><span class="p">,</span>    <span class="c1">// -ncy &gt; -nt</span>
</span><span class='line'><span class="s">&quot;yca3&gt;&quot;</span><span class="p">,</span>     <span class="c1">// -acy &gt; -</span>
</span><span class='line'><span class="s">&quot;zi2&gt;&quot;</span><span class="p">,</span>      <span class="c1">// -iz &gt; -</span>
</span><span class='line'><span class="s">&quot;zy1s.&quot;</span>       <span class="c1">// -yz &gt; -ys</span>
</span></code></pre></td></tr></table></div></figure>


<p></details></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jak wybrać stos frameworków pod projekt webowy (.NET)]]></title>
    <link href="http://Horusiath.github.io/blog/2012/07/12/jak-wybrac-stos-frameworkow-pod-projekt/"/>
    <updated>2012-07-12T18:14:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2012/07/12/jak-wybrac-stos-frameworkow-pod-projekt</id>
    <content type="html"><![CDATA[<p>W życiu każdego web developera nadchodzi moment, kiedy należy się zdecydować na wybór platform i bibliotek wykorzystywanych w nowym projekcie. Nie ma w tym absolutnie nic złego, co więcej powinniśmy być zadowoleni, mając taką opcję. W aplikacjach biznesowych często jest on podejmowany &ndash; nie zawsze słusznie ani rozsądnie (przynajmniej z naszego punktu widzenia) &ndash; za nas, przez osoby trzecie. Tym bardziej warto doceniać sytuacje, w których mamy możliwość wygłoszenia swojej opinii.</p>

<p>W takim razie rodzi się kolejne pytanie: co wybrać? W tym wątku postaram się rozwinąć swoje obserwacje na temat niektórych rozwiązań i stworzyć drobny przekrój technologii wykorzystywanych przez programistów .NET do budowy aplikacji sieciowych.</p>

<h2>Hosting</h2>

<p>Pierwsza sprawa to miejsce, w którym stać będzie nasza aplikacja. Czy będzie to standardowy wykupiony hosting, własny serwer czy może zechcemy udać się w podróż <em>into the cloud?</em> Nie rozwodzę się tutaj nad wykorzystywanym typem serwera, ponieważ praktycznie każdy rozsądny hosting oferuje IIS co najmniej od wersji 7. Hosting aplikacji na innych serwerach jest bardzo ograniczony. Osobiście nie udało mi się znaleźć strony oferującej serwery typu Mono Apache. Nadzieją na przyszłość dla alternatyw IIS może być framework <a href="http://nancyfx.org/">Nancy</a> &ndash; jeżeli się upowszechni, być może pojawią się oferty hostingowe na innych obsługiwanych przez niego serwerach.</p>

<p>Kwestia hostingu aplikacji w chmurze to inna zabawa. Tutaj aplikacje .NETowe mają spore ograniczenie. W praktyce spotkałem tylko dwie chmury typu PaaS oferujące taki hosting: promowany przez Microsoft <a href="http://www.windowsazure.com/pl-pl/">Windows Azure</a> oraz oparty o chmurę Amazonu <a href="https://appharbor.com/">AppHarbor</a>.</p>

<p>Cechą AppHarbor jest prostota &ndash; chmura ta bierze na siebie wiele z rozwiązań sprawdzonych już w Heroku i moim zdaniem jest to absolutny strzał w dziesiątkę. AppHarbor oferuje bardzo tanie jak na chmurę rozwiązania (najmniejsza, pojedyncza, współdzielona instancja jest zawsze za darmo), do tego oferuje szereg znanych technologii, o które można rozszerzyć naszą aplikację &ndash; są to głównie istniejące już na Amazonie usługi, oferty baz danych, systemów kolejkowych i innych (co ważne dla osób chcących je wykorzystać do celów prywatnych, niemal wszystkie w dysponują wersją darmową). Do tego wszystkiego wystarczy zamontować zwykłą aplikację ASP.NET (nie potrzebne są żadne specyficzne projekty). Skalowanie wykonywane jest przez proste zwiększenie liczby instancji oraz wykupienie droższych ofert u zewnętrznych usługodawców.</p>

<p>W przypadku Windows Azure mamy do czynienia z kompletnie innym podejściem. Aplikacja umieszczona na Azure jest pisana z dedykacją dla tej chmury. Potrzebny jest do tego osobny projekt, konieczne jest również generowanie specjalnych paczek umieszczanych docelowo w chmurze. Do tego cała oferta jest znacznie droższa niż opisywany poprzednik, nie mamy również dostępu do tak szerokiego menu dodatkowych usług i są one z reguły kierowane specjalnie pod Azure (technologii tych nie zobaczymy nigdzie indziej). Jakie są więc zalety? Prawdopodobnie lepsze przystosowanie do aplikacji wymagających dużego skalowania i lepsze osiągi istniejących usług. Ostatecznie może to mieć znaczenie, zwłaszcza dla dużych aplikacji.</p>

<h2>Framework</h2>

<p>W tej sytuacji również wybór jest dość prosty. O Mono Rails nikt już nie pamięta (zresztą nie ma takiej potrzeby). W praktyce mamy parę rozwiązań:</p>

<ul>
<li><strong>ASP.NET Web Forms</strong> &ndash; stara technologia, która wywołuje dreszcze chyba u wszystkich, którzy mieli już okazję posmakować MVC. Istnieje garść bibliotek dla tej technologii, jednak osobiście nikomu bym jej nie polecił. Brak modularyzacji komponentów, praktyczny brak możliwości prowadzenia testów jednostkowych czy cała masa chybionych pomysłów (ViewState WTF?) powodują, że aplikacje pisane w Web Forms często są drogą przez mękę.</li>
<li><strong>ASP.NET MVC</strong> &ndash; nowsze spojrzenie, wyraźnie inspirowane Ruby on Rails (co widać coraz wyraźniej w każdej następnej wersji). W dodatku często wykorzystywane, sprawdzone i wspierane zarówno przez sam Microsoft, jak i wiele firm zewnętrznych. Rozwiązanie w sam raz dla tych, którzy chcą rozwiązań pewnych i szybkich w pisaniu, jednocześnie nie tracąc poczucia elastyczności.</li>
</ul>


<p>Ponieważ programowanie do dynamiczna dyscyplina, warto również zwrócić uwagę na dwa stosunkowo nowe, wybijające się rozwiązania:</p>

<ul>
<li><strong>ASP.NET MVC Web API</strong> &ndash; dostępne od nadchodzącej wersji ASP MVC 4. Jedną z jego zalet jest znaczne uproszczenie w tworzeniu serwerów API (o których wspominałem w jednym z wcześniejszych wpisów), przez co stanowi pewien kontrast wobec tradycyjnego ASP MVC, jest jednak w chwili obecnej rozwiązaniem bardziej na czasie.</li>
<li><strong>Nancy </strong>&ndash; framework inspirowany Sinatrą (kolejna platforma webowa na Ruby&#8217;ego). Cechy charakterystyczne to duża modularność (przydatna sprawa kiedy potrzebujemy przystosować środowisko specjalnie pod nasze potrzeby) oraz niewielki rozmiar. Rozwiązanie to jest jednak nowe (mniej sprawdzone do ASP). Stąd polecałbym go do mniejszych aplikacji oraz tam, gdzie rola serwera opiera się głównie na pośredniczeniu między klientem a bazą danych (patrz Server API).</li>
</ul>


<h2>Baza danych i ORM</h2>

<p>Temat jest dość szeroki, dlatego nie będę się skupiał na niuansach dotyczących wyboru między bazami relacyjnymi i nierelacyjnymi &ndash; po pierwsze jest to temat na osobny artykuł, po za tym uważam, że z tymi drugimi wciąż miałem za mało do czynienia.</p>

<p>W przypadku relacyjnych baz danych, przeważnie zostanie nam narzucone jakieś konkretne rozwiązanie. W momencie, gdy mamy dostęp do SqlServer, dalszy wybór nasuwa się praktycznie sam &ndash; <strong>Entity Framework</strong>. Polecam szczególnie przyjżeć się wersjom powyżej 4.0+. Widać (kolejną zresztą) inspirację Rubym (mam mianowicie na myśli świetny mechanizm migracji/kontroli wesji bazy danych ala Rake &ndash; szczególnie przydatny w sytuacji, kiedy członkowie zespołu mają mieć dostęp do własnych, niezależnych developerskich instancji bazy danych), jak również przejście na model POCO, co zwiększa elastyczność oraz daje mniejsze uzależnienie naszych modeli od konkretnej technologii.</p>

<p>W przypadku innych typów baz, EF nie zawsze musi się to okazać najlepszym rozwiązaniem. Wynika to z faktu, że ten ORM tworzony były z myślą o bazie Microsoftu i często po macoszemu traktuje (ignoruje) technologie nie wykorzystywane przez SqlServer, ale wciąż dostępne w jego alternatywach. W tej dziedzinie można zauważyć sporą konkurencję ze strony<strong> (Fluent) NHibernate</strong>. Do ciekawostek należy mechanizm <a href="http://nhforge.org/blogs/nhibernate/archive/2009/12/17/queryover-in-nh-3-0.aspx">QueryOver</a>, mniej uniwersalny i bardziej niskopoziomowy od LINQ, jednakże lepiej przystosowany do generowania zapytań SQL pod konkretną bazę.</p>

<p>Ostatecznie kiedy mowa o takich kobyłach jak EF czy NH, warto się zastanowić, czy naprawdę potrzebujemy czegoś tak wielkiego, czy może wystarczy nam mniejsze, prostsze rozwiązanie. W końcu nie każda aplikacja musi obsługiwać zaawansowane zapytania i dawać nam możliwość ingerencji w najdrobniejszy aspekt pracy z bazą danych. W takim wypadku powstało kilka MicroORMów, wśród których najpopularniejszym rozwiązaniem jest <a href="https://github.com/markrendle/Simple.Data/">Simple.Data</a>. Dynamicznie tworzone POCOsy, zapytania sterowane konwencją nazewniczą metod oraz wsparcie naprawdę dużej ilości baz danych &ndash; najpopularniejszych baz relacyjnych, dokumentowej bazy MongoDB i planowane wsparcie usług bazodanowych dostępnych na Azure &ndash; to mocne strony tego projektu. Coś w sam raz dla osób chcących skupić się na szybkim wykonaniu gotowego kodu do komunikacji z bazą z pominięciem wszystkich upierdliwych konfiguracji.</p>

<h2>Prezentacja danych</div></h2>

<p>Gdzie ma się znajdować logika odpowiedzialna za prezentację danych? W przypadku logiki umieszczonej po stronie serwera mamy do czynienia z dynamicznym generowaniem stron, a co za tym idzie, większym kosztem obliczeniowym po stronie serwera oraz z reguły większym rozmiarem przesyłanych odpowiedzi do klienta. Zaletą jest lepsza kontrola oraz dość rozbudowane możliwości większości komercyjnych kontrolek &ndash; przydatne zwłaszcza w rozwiązaniach typowo biznesowych. W tej dziedzinie znane są dwie marki:</p>

<ul>
<li><a href="http://www.telerik.com/products/aspnet-mvc.aspx">Telerik</a> MVC &ndash; całkiem dobra biblioteka dysponująca szerokimi możliwościami (bindowanie bezpośrednio do akcji po stronie serwera, usług WCF lub wywołań ajax), o całkiem sporych możliwościach własnego rozszerzania. Wadą mogą być pewne nieprzemyślane (z mojego punktu widzenia) decyzje np. duża różnica w obsłudze kolumn z danymi i komend oraz spore rozbieżności w kodzie generowanym przez wiązania ajaxowe i serwerowe.</li>
<li><a href="http://www.devexpress.com/Subscriptions/DXperience/WhatsNew2012v1/asp.xml">DevExpress</a>. Nie spotkałem jeszcze nikogo, kto po kontakcie z Telerikiem, wybrałby DevExpress. Naprawdę ciężko usłyszeć o tej bibliotece cokolwiek dobrego. Generowany HTML nie ma wiele wspólnego z logiką, w razie potrzeb ciężko jest rozszerzyć istniejące opcje, zaś samo wsparcie techniczne jest dalekie od ideału.</li>
</ul>


<p>W przypadku kontrolek renderowanych po stronie klienta mamy prawdziwe zatrzęsienie dostępnych rozwiązań. Od jQuery UI, przez rozmaite formy wykresów, gridów czy grafów. Ciężko objąć je wszystkie dlatego postanowiłem znów wybrać dwa ciekawe rozwiązania przyjazne zwłaszcza z punktu widzenia biznesu:</p>

<ul>
<li><a href="http://www.kendoui.com/web.aspx">KendoUI</a> &ndash; kolejna biblioteka od twórców Telerika, tym razem skupiona jednak w całości po stronie klienta. Dostarcza dużych możliwości, w tym integrację z urządzeniami mobilnymi, frameworkiem MVVM Knockout.js (promowanym przez Microsoft wraz z nadchodzącym wypuszeniem ASP MVC 4) oraz obsługą HTML5.</li>
<li><a href="http://www.sencha.com/products/extjs/">ExtJS</a> &ndash; duży framework oferujący bardzo rozbudowane możliwości kontroli logiki i prezentacji danych. Jego budowa jest bardziej &ldquo;obiektowa&rdquo; (w ujęciu tworzenia instancji klas/prototypów) niż KendoUI, jednak wydaje się również, że jest trudniejszy do opanowania od swojego konkurenta &ndash; poniekąd przez fakt, że wydaje się stanowić bardziej rozległe rozwiązanie.</li>
</ul>


<h2>Uzupełnienie</h2>

<p>Pisząc uzupełnienie mam na myśli szereg bibliotek, które nieraz ułatwiają pracę, ale ciężko je podpisać pod którąkolwiek z poprzednich kategorii. W praktyce chciałem utworzyć jeszcze jedną dziedzinę, stworzoną specjalnie z myślą o rozbudowanych aplikacjach klienckich (Single Page Applications i stos MVC po stronie przeglądarki), ale ich opis zaprezentowałem we wcześniejszych postach.</p>

<p>Jednym z najciekawszych spotkanych do tej pory projektów wydaje się być <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a>.To prawdziwe wybawienie dla osób, które nie chcą za każdym razem walczyć ze stylami i kompozycjami, a w pełni wystarczy im zbiór najbardziej popularnych rozwiązań podanych <em>out of the box</em>.</p>

<p>Osoby wykorzystujące API zewnętrznych portali (np. Facebook, Twitter) mogą być zaciekawione możliwościami oferowanymi przez <a href="http://andrewplummer.github.com/APIConnect/">Connect API</a>. Ta biblioteka javascriptowa pomaga zautomatyzować odwołania do zewnętrznych API, tworząc jednocześnie spójny interfejs dla tych usług.</p>

<p>Na zakończenie, mówiąc o automatyzacji, ciekawym rozwiązaniem jest C#-owa biblioteka <a href="https://github.com/AutoMapper/AutoMapper">AutoMapper</a>. Świetnie nadaje się w sytuacjach kiedy musimy dokonywać częstych mapowań pomiędzy obiektami (jak również dokonywać kompozycji obiektów czy spłaszczeń &ndash; <em>flattening</em>) i świetnie pozwala zautomatyzować cały ten proces.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forwardowanie i streaming dużych plików przez WCF]]></title>
    <link href="http://Horusiath.github.io/blog/2012/07/04/forwardowanie-i-streaming-duzych-plikow/"/>
    <updated>2012-07-04T19:08:00+02:00</updated>
    <id>http://Horusiath.github.io/blog/2012/07/04/forwardowanie-i-streaming-duzych-plikow</id>
    <content type="html"><![CDATA[<p>W trakcie tworzenia serwisów bazujących na ASP.NET niejednokrotnie zdarza się potrzeba przesyłania dużych plików przez sieć. W przypadku, gdy kontroler, aby przetransportować plik do przeglądarki, musi odwołać się do usługi sieciowej (w opisywanym przez mnie wypadku WCF) sprawy mogą się trochę skomplikować. Ponieważ nie chcielibyśmy, aby nasz serwer regularnie zapychał się buforując dużą ilość danych, dobrym rozwiązaniem byłoby utworzenie strumienia wzdłuż całego stosu komunikacyjnego. Przedstawia to rysunek poglądowy poniżej.</p>

<p><img border="0" src="http://3.bp.blogspot.com/-YNoTKRkDFdY/T_Rk7WLTmYI/AAAAAAAAAEo/x8aFQOc0siQ/s1600/flow.png" /></p>

<p>Stwórzmy zatem przykładowe rozwiązanie takiego problemu. W tym celu podzielimy go na dwa mniejsze podproblemy: strumieniowanie pliku przy pomocy Windows Communication Foundation oraz forwardowanie otrzymanego strumienia bezpośrednio do przeglądarki. Co istotne, w rozwiązaniu tym nie możemy pozwolić sobie na zbuforowanie pliku w którymkolwiek momencie strumieniowania.</p>

<h2>Streaming WCF</h2>

<p>Zacznijmy od zdefiniowania przykładowego interfejsu naszej usługi. Może on wyglądać następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[ServiceContract]</span>
</span><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IFileStreamer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [OperationContract]</span>
</span><span class='line'>    <span class="n">FileStreamResponse</span> <span class="nf">GetFile</span><span class="p">(</span><span class="n">FileStreamRequest</span> <span class="n">request</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jak widzimy jedyną operacja wykonywaną przez naszą usługę jest pobranie obiektu klasy <em>FileStreamResponse</em>. Klasę taką możemy zdefiniować następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[MessageContract]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FileStreamResponse</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [MessageHeader]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">FileName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [MessageHeader]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">ContentType</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [MessageHeader]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">long</span> <span class="n">FileLength</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [MessageBodyMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Stream</span> <span class="n">Stream</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Warto zatrzymać się na chwilę w tym miejscu. Jak widzimy obiekt tej klasy nie jest zdefiniowany za pomocą standardowego atrybutu <em>[DataContract]</em>, lecz nieco rzadziej spotykanego <em>[MessageContract]. </em>Powodem takiego zachowania jest właściwość oznaczona parametrem <em>[MessageBodyMember]</em>. Jest to główna treść naszego obiektu, strumień. Reszta danych zdefiniowana zostanie w nagłówku wiadomości SOAP, w którą opakowane są wszystkie serializowane obiekty transportowane przez naszą usługę. Jest tak, ponieważ zgodnie z regułami narzucanymi przez WCF, jeżeli zwracany jest strumień, powinien on być jedynym elementem zawartym w ciele wiadomości. Więcej o message contractach można dowiedzieć się <a href="http://msdn.microsoft.com/en-us/library/ms730255.aspx">tutaj</a> oraz <a href="http://msdn.microsoft.com/en-us/library/ms733742.aspx">tutaj</a>.</p>

<p>Mimo że nasza usługa ma za zadanie strumieniować pliki, to w praktyce zwracany strumień jest klasy <em>Stream</em>. Dzieje się tak z dwóch powodów:</p>

<ol>
<li>Ponieważ klasa <em>FileStream</em> nie jest oznaczona atrybutem <em>Serializable</em>, nie może ona być zserializowana i przesłana przez sieć.</li>
<li>W praktyce serializer WCF zawsze będzie konwertował wszystkie wyjściowe strumienie do klasy <em>MessageBodyStream</em>. Jest to ważne, ze względu na fakt że klasa ta nie dysponuje takimi możliwościami jak większość innych strumieni &ndash; opiszę je w drugiej części artykułu &ndash; i będziemy musieli ominąć jej braki.</li>
</ol>


<p>W dalszej kolejności powinniśmy się przyjrzeć budowie obiektu przekazywanego jako parametr. W naszym przykładzie wygląda on następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[MessageContract]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FileStreamRequest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [MessageBodyMember]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jak widać jedyną zmienną przechowywaną przez nasz obiekt żądania jest pojedyncza liczba. Pytanie zatem brzmi: czy musimy budować osobny obiekt żądania na potrzeby tylko jednego prostego parametru? Odpowiedź brzmi: Tak. Dzieje się tak dlatego, że WCF wymaga od nas, aby w przypadku, gdy w operacji zwracane są obiekty oznaczone jako <em>[MessageContract]</em>, operacja ta może przyjmować za parametry jedynie inne obiekty oznaczone tym atrybutem i może w ten sposób przyjmować tylko jeden obiekt.</p>

<p>Przejdźmy teraz do zdefiniowania klasy służącej za implementację naszej usługi.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[ServiceBehavior(AddressFilterMode = AddressFilterMode.Any)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FileStreamer</span> <span class="p">:</span> <span class="n">IFileStreamer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">FileStreamResponse</span> <span class="nf">GetFile</span><span class="p">(</span><span class="n">FileStreamRequest</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// pobieramy ścieżkę do pliku</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">path</span> <span class="p">=</span> <span class="n">GetPathFor</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">filename</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">GetFileName</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FileStream</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">Open</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">Read</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">FileStreamResponse</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Stream</span> <span class="p">=</span> <span class="n">stream</span><span class="p">,</span>
</span><span class='line'>            <span class="n">FileLength</span> <span class="p">=</span> <span class="n">stream</span><span class="p">.</span><span class="n">Length</span><span class="p">,</span>
</span><span class='line'>            <span class="n">FileName</span> <span class="p">=</span> <span class="n">filename</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ContentType</span> <span class="p">=</span> <span class="s">&quot;application/zip&quot;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ... dalsza implementacja </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Na koniec musimy zdefiniować konfigurację usługi tak, aby mogła ona wykorzystywać strumieniowanie. W tym wypadku jesteśmy ograniczeni do wyboru jednego z czterech bindingów, które to umożliwiają:</p>

<ul>
<li>BasicHttpBinding</li>
<li>WebHttpBinding</li>
<li>NetTcpBinding</li>
<li>NetNamedPipeBinding</li>
</ul>


<p>Niezbędne jest również określenie maksymalnego rozmiaru danych przesyłanych w strumieniu oraz określenie kierunku strumienia &ndash; dla danych pobieranych z usługi jest to <em>StreamedResponse</em>. Dodatkowo warto określić kodowanie wiadomości (co pozwoli zmniejszyć jej rozmiar) oraz rozmiar bufora ramki (im większy jego rozmiar tym mniej &ldquo;rozdrobniona&rdquo; będzie nasza wiadomość, lecz jednocześnie więcej pamięci potrzebnej jest na obsługę bufora przez serwer). Domyślny rozmiar bufora w WCF wynosi 64KB.</p>

<p>W rezultacie przykładowa konfiguracja może wyglądać następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;services&gt;</span>
</span><span class='line'>  <span class="nt">&lt;service</span> <span class="na">name=</span><span class="s">&quot;&lt;namespace&gt;.FileStreamer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;endpoint</span>
</span><span class='line'>      <span class="na">binding=</span><span class="s">&quot;basicHttpBinding&quot;</span>
</span><span class='line'>      <span class="na">address=</span><span class="s">&quot;http://localhost/&lt;webservice_address&gt;&quot;</span>
</span><span class='line'>      <span class="na">contract=</span><span class="s">&quot;&lt;namespace&gt;.IFileStreamer&quot;</span>
</span><span class='line'>      <span class="na">bindingConfiguration=</span><span class="s">&quot;streamedBasicHttpBinding&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/service&gt;</span>
</span><span class='line'><span class="nt">&lt;/services&gt;</span>
</span><span class='line'><span class="nt">&lt;bindings&gt;</span>
</span><span class='line'>  <span class="nt">&lt;basicHttpBinding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;binding</span> <span class="na">name=</span><span class="s">&quot;streamedBasicHttpBinding&quot;</span>
</span><span class='line'>             <span class="na">transferMode=</span><span class="s">&quot;StreamedResponse&quot;</span>
</span><span class='line'>             <span class="na">messageEncoding=</span><span class="s">&quot;Mtom&quot;</span>
</span><span class='line'>             <span class="na">maxReceivedMessageSize=</span><span class="s">&quot;629145600&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- maksymalny rozmiar pliku: 600MB --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/basicHttpBinding&gt;</span>
</span><span class='line'><span class="nt">&lt;/bindings&gt;&lt;/services&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Analogicznie do tego można utworzyć konfigurację kliencką. Można ją zdefiniować ręcznie albo posłużyć się opcją <em>Add Service Reference</em> z menu kontekstowego referencji w projekcie docelowym otwartym w Visual Studio lub używając narzędzia <em>svcutil </em>i wygenerować w ten sposób potrzebny plik proxy klienta i konfigurację.</p>

<h2>Forwardowanie po stronie ASP</h2>

<p>Zanim przejdziemy do pisania przykładowego kodu, należy zwrócić uwagę na kilka kwestii.</p>

<p>Tak jak opisałem wcześniej mimo, że transport pliku z operacji WCF odbywa się za pomocą strumienia, nie jest to jednak obiekt klasy <em>FileStream</em>, lecz <em>MessageBodyStream</em>. Nanosi to na nasze zadanie pewne trudności:</p>

<ul>
<li>Metoda <em>Read </em>strumienia tej klasy nie musi zwracać w wyniku ilości faktycznie odczytanych wierszy. Ponieważ strumień nie definiuje również żadnego odpowiednika flagi <em>EndOfStream</em>, musimy z góry znać długość strumienia, aby w odpowiednim momencie zakończyć odczytywanie danych.</li>
<li>Strumień ten nie implementuje właściwości <em>Length</em> (sic!), stąd też musieliśmy wcześniej zdefiniować message contract, w którym ustawiamy ręcznie tą długość jako jeden z parametrów przekazywanych w nagłówku wiadomości.</li>
<li>Przy próbie bezpośredniego zwrócenia tego strumienia przy przekazaniu go do metody <em>File </em>kontrolera, nastąpi próba zbuforowania całego pliku przez kontroler. Zgodnie z początkowym założeniem nie możemy do tego dopuścić. Z tego powodu powinniśmy własnoręcznie skonstruować odpowiedź dla przeglądarki.</li>
</ul>


<p>W rezultacie przykładowy kod akcji kontrolera może wyglądać następująco:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">private</span> <span class="n">ActionResult</span> <span class="nf">GetFileStream</span><span class="p">(</span><span class="kt">long</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// fileStreamer - klient proxy do usługi WCF</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="n">fileStreamer</span><span class="p">.</span><span class="n">GetFile</span><span class="p">(</span><span class="k">new</span> <span class="n">FileStreamRequest</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">versionId</span> <span class="p">});</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">Stream</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">message</span><span class="p">.</span><span class="n">FileLength</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BinaryReader</span><span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">Stream</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Response</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
</span><span class='line'>            <span class="n">Response</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="n">message</span><span class="p">.</span><span class="n">ContentType</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Response</span><span class="p">.</span><span class="n">AddHeader</span><span class="p">(</span><span class="s">&quot;Content-Length&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">FileLength</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>            <span class="n">Response</span><span class="p">.</span><span class="n">AddHeader</span><span class="p">(</span><span class="s">&quot;Content-Disposition&quot;</span><span class="p">,</span> <span class="s">&quot;attachment; filename=&quot;</span> <span class="p">+</span> <span class="n">message</span><span class="p">.</span><span class="n">FileName</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">var</span> <span class="n">defaultBufferSize</span> <span class="p">=</span> <span class="m">1024</span><span class="p">*</span><span class="m">1024</span><span class="p">*</span><span class="m">64</span><span class="p">;</span>   <span class="c1">// 65KB</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">bytesRead</span> <span class="p">=</span> <span class="m">0L</span><span class="p">;</span>
</span><span class='line'>            <span class="k">do</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">frame</span> <span class="p">=</span> <span class="p">(</span><span class="n">bytesRead</span> <span class="p">+</span> <span class="n">defaultBufferSize</span><span class="p">)</span> <span class="p">&lt;=</span> <span class="n">message</span><span class="p">.</span><span class="n">FileLength</span>
</span><span class='line'>                    <span class="p">?</span> <span class="n">defaultBufferSize</span>
</span><span class='line'>                    <span class="p">:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">message</span><span class="p">.</span><span class="n">FileLength</span> <span class="p">-</span> <span class="n">bytesRead</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">buffer</span> <span class="p">=</span> <span class="n">stream</span><span class="p">.</span><span class="n">ReadBytes</span><span class="p">(</span><span class="n">frame</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Response</span><span class="p">.</span><span class="n">BinaryWrite</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Response</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">bytesRead</span> <span class="p">+=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">while</span> <span class="p">(</span> <span class="n">bytesRead</span> <span class="p">&lt;</span> <span class="n">message</span><span class="p">.</span><span class="n">FileLength</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Response</span><span class="p">.</span><span class="n">End</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ostatnia rzecz warta odnotowania, to w zasadzie rada dla developerów. Niestety, aby sprawdzić działanie strumienia w praktyce, musimy uruchomić naszą aplikację na rzeczywistym serwerze IIS (można to ustawić we właściwościach projektu), ponieważ standardowy serwer developerski ASP nie udostępnia tej opcji.</p>
]]></content>
  </entry>
  
</feed>
